<!-- doc/src/sgml/pgbuffercache.sgml -->

<sect1 id="pgbuffercache" xreflabel="pg_buffercache">
 <title>pg_buffercache</title>

 <indexterm zone="pgbuffercache">
  <primary>pg_buffercache</primary>
 </indexterm>

 <para>
 <filename>pg_buffercache</filename> 모듈을 이용하면, 
 공유 버퍼 캐시가 어떻게 사용되고 있는지를 실시간으로 살펴볼 수 있다.
 </para>

 <indexterm>
  <primary>pg_buffercache_pages</primary>
 </indexterm>

 <para>
  C로 만든 <function>pg_buffercache_pages</function> 함수는 버퍼 캐시 정보를
  레코드 단위로 리턴하고, 이를 이용해서 좀 더 보기 편한 <structname>pg_buffercache</structname>
  뷰도 제공한다.
 </para>

 <para>
  보안상 이슈가 될 여지가 있어, 이 두 기능은 슈퍼 유저와
  <literal>pg_monitor</literal> 롤 소속 사용자만 사용할 수 있다.
  필요하다면, <command>GRANT</command> 명령을 통해 권한을 부여한다.
 </para>

 <sect2>
  <title><structname>pg_buffercache</structname> 뷰</title>

  <para>
   이 뷰에서 제공하는 칼럼은 <xref linkend="pgbuffercache-columns"/>  표와 같다.
  </para>

  <table id="pgbuffercache-columns">
   <title><structname>pg_buffercache</structname> 칼럼들</title>

   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       칼럼 자료형
      </para>
      <para>
       설명
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>bufferid</structfield> <type>integer</type>
      </para>
      <para>
       ID, 1..<varname>shared_buffers</varname> 범위
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relfilenode</structfield> <type>oid</type>
       (references <link linkend="catalog-pg-class"><structname>pg_class</structname></link>.<structfield>relfilenode</structfield>)
      </para>
      <para>
       해당 릴레이션의 파일노드 번호
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>reltablespace</structfield> <type>oid</type>
       (references <link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.<structfield>oid</structfield>)
      </para>
      <para>
       해당 릴레이션의 테이블스페이스 OID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>reldatabase</structfield> <type>oid</type>
       (references <link linkend="catalog-pg-database"><structname>pg_database</structname></link>.<structfield>oid</structfield>)
      </para>
      <para>
       해당 릴레이션의 데이터베이스 OID
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relforknumber</structfield> <type>smallint</type>
      </para>
      <para>
       해당 릴레이션 포크 번호; 
       Fork number within the relation;
       <filename>include/common/relpath.h</filename> 참조
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relblocknumber</structfield> <type>bigint</type>
      </para>
      <para>
       해당 릴레이션 안의 페이지 번호
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>isdirty</structfield> <type>boolean</type>
      </para>
      <para>
       이 페이지가 체크포인트 대상인지?
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>usagecount</structfield> <type>smallint</type>
      </para>
      <para>
       Clock-sweep 접근 회수
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pinning_backends</structfield> <type>integer</type>
      </para>
      <para>
       해당 페이지를 선점한 백엔드 수
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
  하나의 로우는 공유 캐시 안에서의 하나의 버퍼 정보다.
  이 버퍼가 사용되고 있지 않다면, <structfield>bufferid</structfield> 칼럼을 제외한 모든 
  칼럼 값이 null이다.
  공용 시스템 카탈로그는 데이터베이스 OID가 0으로 표시된다.
  </para>

  <para>
  이 출력 자료는 공유되고 있는 모든 캐시 정보를 보여주기 때문에, 
  현재 데이터베이스에 속하지 않은 정보들도 출력된다.
  그래서, <structname>pg_class</structname> 테이블에 없는 릴레이션 OID 값이 출력될 수도 
  있다. <structname>pg_class</structname> 테이블과 join 쿼리를 사용한다면, 
  <structfield>reldatabase</structfield> 값이 0인 경우도 고려해서 쿼리를 작성해야한다.
  </para>

  <para>
   이 뷰로 출력될 자료를 버퍼 관리자가 복사할 때, 버퍼를 잠그지 않기 때문에, 
   <structname>pg_buffercache</structname> 뷰는 다른 프로세스들의 일반적인 
   버퍼 작업에 크게 영향을 주지 않는다.  이렇게 처리하기 때문에 모든 버퍼의 
   일관성이 맞지 않을 수도 있다.  하지만, 각 개별 버퍼의 일관성은 맞게 
   보여준다.
  </para>
 </sect2>

 <sect2>
  <title>출력 예제</title>

<screen>
regression=# SELECT n.nspname, c.relname, count(*) AS buffers
             FROM pg_buffercache b JOIN pg_class c
             ON b.relfilenode = pg_relation_filenode(c.oid) AND
                b.reldatabase IN (0, (SELECT oid FROM pg_database
                                      WHERE datname = current_database()))
             JOIN pg_namespace n ON n.oid = c.relnamespace
             GROUP BY n.nspname, c.relname
             ORDER BY 3 DESC
             LIMIT 10;

  nspname   |        relname         | buffers
------------+------------------------+---------
 public     | delete_test_table      |     593
 public     | delete_test_table_pkey |     494
 pg_catalog | pg_attribute           |     472
 public     | quad_poly_tbl          |     353
 public     | tenk2                  |     349
 public     | tenk1                  |     349
 public     | gin_test_idx           |     306
 pg_catalog | pg_largeobject         |     206
 public     | gin_test_tbl           |     188
 public     | spgist_text_tbl        |     182
(10 rows)
</screen>
 </sect2>

 <sect2>
  <title>만든이</title>

  <para>
   Mark Kirkwood <email>markir@paradise.net.nz</email>
  </para>

  <para>
   디자인 제안: Neil Conway <email>neilc@samurai.com</email>
  </para>

  <para>
   디버깅 도와준 이: Tom Lane <email>tgl@sss.pgh.pa.us</email>
  </para>
 </sect2>

</sect1>
