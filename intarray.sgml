<!-- doc/src/sgml/intarray.sgml -->

<sect1 id="intarray" xreflabel="intarray">
 <title>intarray</title>

 <indexterm zone="intarray">
  <primary>intarray</primary>
 </indexterm>

 <para>
  <filename>intarray</filename> 모듈은 
  정수를 구성 요소로 하는 null 값이 없는 배열
  처리를 위한 유용한 함수와 연산자를 제공한다.
  또한 이 배열 자료형에 대한 인덱스 검색 기능도 제공한다.
 </para>

 <para>
  This module is considered <quote>trusted</quote>, that is, it can be
  installed by non-superusers who have <literal>CREATE</literal> privilege
  on the current database.
 </para>

 <para>
  여기서 소개하는 모든 연산자는 그 대상 배열에 null 값이 있으면, 오류를 낸다.
 </para>

 <para>
  여기서 소개하는 대부분의 연산자는 일차원 배열에서만 쓸모가 있다.
  물론 다차원 배열에서도 사용 가능 하지만, 그 자료는 
  저장 순서를 기반으로 일차원 배열처럼 간주한다.
 </para>

 <sect2>
  <title><filename>intarray</filename> 함수와 연산자들</title>

  <para>
   <filename>intarray</filename> 모듈에서 제공하는 함수는
   <xref linkend="intarray-func-table"/>에서, 연산자는
   <xref linkend="intarray-op-table"/>에서 소개한다.
  </para>

  <table id="intarray-func-table">
   <title><filename>intarray</filename> 함수들</title>

    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        함수
       </para>
       <para>
        설명
       </para>
       <para>
        예제
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>icount</primary></indexterm>
        <function>icount</function> ( <type>integer[]</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        배열 요소 개수
       </para>
       <para>
        <literal>icount('{1,2,3}'::integer[])</literal>
        <returnvalue>3</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>sort</primary></indexterm>
        <function>sort</function> ( <type>integer[]</type>, <parameter>dir</parameter> <type>text</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        배열 오름,내림차순 정렬. <parameter>dir</parameter>에는
        <literal>asc</literal> 또는 <literal>desc</literal>만 허용
       </para>
       <para>
        <literal>sort('{1,3,2}'::integer[], 'desc')</literal>
        <returnvalue>{3,2,1}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>sort</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para role="func_signature">
        <indexterm><primary>sort_asc</primary></indexterm>
        <function>sort_asc</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        오름차순 정렬
       </para>
       <para>
        <literal>sort(array[11,77,44])</literal>
        <returnvalue>{11,44,77}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>sort_desc</primary></indexterm>
        <function>sort_desc</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        내림차순 정렬
       </para>
       <para>
        <literal>sort_desc(array[11,77,44])</literal>
        <returnvalue>{77,44,11}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>uniq</primary></indexterm>
        <function>uniq</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        중복된 요소 제거
       </para>
       <para>
        <literal>uniq(sort('{1,2,3,2,1}'::integer[]))</literal>
        <returnvalue>{1,2,3}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>idx</primary></indexterm>
        <function>idx</function> ( <type>integer[]</type>, <parameter>item</parameter> <type>integer</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        해당 <parameter>item</parameter> 요소가 배열의 몇번째에 있는지 (0이면 없음)
       </para>
       <para>
        <literal>idx(array[11,22,33,22,11], 22)</literal>
        <returnvalue>2</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>subarray</primary></indexterm>
        <function>subarray</function> ( <type>integer[]</type>, <parameter>start</parameter> <type>integer</type>, <parameter>len</parameter> <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        배열의 <parameter>start</parameter> 시작 위치에서, <parameter>len</parameter> 개수 만큼 부분 배열 추출
       </para>
       <para>
        <literal>subarray('{1,2,3,2,1}'::integer[], 2, 3)</literal>
        <returnvalue>{2,3,2}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>subarray</function> ( <type>integer[]</type>, <parameter>start</parameter> <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        배열의 <parameter>start</parameter> 번째부터 시작해서 끝까지 부분 배열 추출
       </para>
       <para>
        <literal>subarray('{1,2,3,2,1}'::integer[], 2)</literal>
        <returnvalue>{2,3,2,1}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>intset</primary></indexterm>
        <function>intset</function> ( <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        입련 인자를 단일 요소로 하는 배열 반환
       </para>
       <para>
        <literal>intset(42)</literal>
        <returnvalue>{42}</returnvalue>
       </para></entry>
      </row>
    </tbody>
   </tgroup>

  </table>

  <table id="intarray-op-table">
   <title><filename>intarray</filename> 연산자들</title>

    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        연산자
       </para>
       <para>
        설명
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>&amp;&amp;</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
      겹침 &mdash; 두 배열 요수 가운데 한 요소라도 같으면 <literal>true</literal>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>@&gt;</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
      포함함 &mdash; 왼쪽 배열이 오른쪽 배열을 포함하면 <literal>true</literal>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>&lt;@</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
      포함됨 &mdash; 왼쪽 배열이 오른쪽 배열에 포함되면 <literal>true</literal>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type></type> <literal>#</literal> <type>integer[]</type>
        <returnvalue>integer</returnvalue>
       </para>
       <para>
      배열 요소 수
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>#</literal> <type>integer</type>
        <returnvalue>integer</returnvalue>
       </para>
       <para>
      <function>idx</function> 함수의 연산자
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>+</literal> <type>integer</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
      배열에 요소 추가 (배열 마지막에 추가됨)
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>+</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
      배열 합치기, 왼쪽 오른쪽 순서대로 합침
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>-</literal> <type>integer</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
      오른쪽에 지정한 정수가 배열 요소에 있으면 뺌
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>-</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
      왼쪽 배열에서 오른쪽 배열 요소들을 모두 뺌
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>|</literal> <type>integer</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
      오른쪽 정수를 왼쪽 배열에 포함함 (이미 있으면 무시)
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>|</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
      두 배열을 합치면서 겹치는 것 없앰
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>&amp;</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
      두 배열의 교집합
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>@@</literal> <type>query_int</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
      해당 query_int 조건에 맞으면 <literal>true</literal> (아래 참조)
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>query_int</type> <literal>~~</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
      윗 <literal>@@</literal> 연산자의 교환 연산자
       </para></entry>
      </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   (8.2 이전 버전에서는 <literal>@&gt;</literal> 연산자와 <literal>&lt;@</literal> 
   연산자는 각각  <literal>@</literal>, <literal>~</literal> 로 사용했었다.
   이 연산자들도 아직 사용할 수는 있지만, 범용 배열 연산자들이 정리되면서
   이 연산자(@,~)는 이제 더 이상 사용하지 않는다.  이 연산자들은 
   기본 지리정보 자료형에서 아직 사용하기에, 헷갈리지 않기 바란다!)
  </para>

  <para>
   <literal>&amp;&amp;</literal>, <literal>@&gt;</literal>, <literal>&lt;@</literal> 연산자는
   범용 배열 자료형의 기본 연산자로 채택되어 그 사용법이 똑같다.
   다른 점은 이 모듈을 사용하면, 정수형 배열에서는 null 값이 없어야되고, 
   그 외 배열 자료형에서는 null 값이 있어도 된다.
   이런 제한은 정수형 배열 자료형에서 처리 속도를 빠르게 하기 때문에, 
   아직까지 이런 차이가 있다.
  </para>

  <para>
   <literal>@@</literal>,  <literal>~~</literal> 연산자는 
   지정한 <firstterm>쿼리</firstterm> 조건에 만족하는가를 검사하는 연산자다.
   이 쿼리는 문자열로 <type>query_int</type> 구문을 사용해야 하면, 
   사용할 수 있는 기호는  <literal>&amp;</literal>
   (AND), <literal>|</literal> (OR), <literal>!</literal> (NOT) 이다. 
   예를 들어 이 쿼리가  <literal>1&amp;(2|3)</literal>  이라면,
   해당 배열 요소들 가운데, 1은 반드시 있어야 하고, 
   2 또는 3도 반드시 있는 배열이면 이 연산자는 true를 반환한다.
  </para>
 </sect2>

 <sect2>
  <title>인덱스 지원</title>

  <para>
   <filename>intarray</filename> 모듈은 <literal>&amp;&amp;</literal>, <literal>@&gt;</literal>,
   <literal>&lt;@</literal>, <literal>@@</literal> 연산자를 사용할 경우
   인덱스를 사용해서 보다 빠르게 그 결과를 확인할 수 있도록
   연산자 클래스를 제공한다.
  </para>

  <para>
   GiST 색인 방법으로 다음 두 가지 인자를 추가할 수 있는 연산자 클래스를 제공한다:
   <literal>gist__int_ops</literal> (기본값) 클래스는
   4바이트 정수 최대값 만큼의 배열 요소가 있는 경우,
   <literal>gist__intbig_ops</literal> 클래스는
   8바이트 정수 최대값 만큼의 배열 요소가 있는 경우에 사용한다.
   이 색인 방법은 RD-tree 자료 구조에 대한 구현체이며, 
   내장된 압축이 별로 안되는 방법이다.
  </para>

  <para>
   <literal>gist__int_ops</literal> approximates an integer set as an array of
   integer ranges.  Its optional integer parameter <literal>numranges</literal>
   determines the maximum number of ranges in
   one index key.  The default value of <literal>numranges</literal> is 100.
   Valid values are between 1 and 253.  Using larger arrays as GiST index
   keys leads to a more precise search (scanning a smaller fraction of the index and
   fewer heap pages), at the cost of a larger index.
  </para>

  <para>
   <literal>gist__intbig_ops</literal> approximates an integer set as a bitmap
   signature.  Its optional integer parameter <literal>siglen</literal>
   determines the signature length in bytes.
   The default signature length is 16 bytes.  Valid values of signature length
   are between 1 and 2024 bytes.  Longer signatures lead to a more precise
   search (scanning a smaller fraction of the index and fewer heap pages), at
   the cost of a larger index.
  </para>

  <para>
   GIN 연산자 클래스로 <literal>gin__int_ops</literal>
   연산자 클래스도 제공한다.
  </para>

  <para>
   해당 배열형에 대해서 GiST 색인 방법을 쓸지, 
   GIN 색인 방법을 쓸지에 대해서는 Gist, GIN 인덱스의 장단점을 
   충분히 파악한 후 선택하면 된다. 
  </para>
 </sect2>

 <sect2>
  <title>사용 예</title>

<programlisting>
-- 하나의 메시지는 하나 또는 여러 섹션을 포함한다.
CREATE TABLE message (mid INT PRIMARY KEY, sections INT[], ...);

-- sections 칼럼의 자료 길이를 32 바이트로 제한한 인덱스
CREATE INDEX message_rdtree_idx ON message USING GIST (sections gist__int_ops(siglen=32));

-- 겹침 연산자를 이용한 해당 섹션이 있는 메시지 찾기
SELECT message.mid FROM message WHERE message.sections &amp;&amp; '{1,2}';

-- 포함 연산자를 이용한 해당 섹션이 있는 메시지 찾기
SELECT message.mid FROM message WHERE message.sections @&gt; '{1,2}';

-- 윗 쿼리와 같은 쿼리 문자열을 이용한 또 다른 방법
SELECT message.mid FROM message WHERE message.sections @@ '1&amp;2'::query_int;
</programlisting>
 </sect2>

 <sect2>
  <title>성능 검사</title>

  <para>
   소스 디렉터리 안  <filename>contrib/intarray/bench</filename>
   디렉터리에  이 모듈에 대한 성능 검사 관련 소스들이 포함되어 있다.
   (<filename>DBD::Pg</filename> perl 모듈이 먼저 설치되어 있어야 한다)
   사용법:
  </para>

<programlisting>
cd .../contrib/intarray/bench
createdb TEST
sql -c "CREATE EXTENSION intarray" TEST
./create_test.pl | psql TEST
./bench.pl
</programlisting>

  <para>
   <filename>bench.pl</filename> 스크립트는 다양한 옵션을 제공한다.
   옵션 설명은 아무런 옵션 없이 실행하면 보여준다.
  </para>
 </sect2>

 <sect2>
  <title>만든이</title>

  <para>
   모든 작업은 Teodor Sigaev (<email>teodor@sigaev.ru</email>)와
   Oleg Bartunov (<email>oleg@sai.msu.su</email>)가 했다.
   추가적인 정보는 <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>
   페이지에서 제공한다.  Andrey Oktyabrski가 새 함수와 연산자들 
   추가 작업을 했다.
  </para>
 </sect2>

</sect1>
