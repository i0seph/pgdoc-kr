<!-- doc/src/sgml/advanced.sgml -->

 <chapter id="tutorial-advanced">
  <title>고급 기능</title>

  <sect1 id="tutorial-advanced-intro">
   <title>소개</title>
   <para>
    이전 장에서는 자료를 저장하고, <productname>PostgreSQL</productname> 
    안에 있는 데이터를 조작하는 기본적인 <acronym>SQL</acronym> 명령들에
    대해서 살펴보았습니다.  이 장에서는 좀더 심화된 SQL 명령들에 대해서
    간단히 살펴 볼 예정입니다.   여기서 설명하고 있는 것들은 관리 작업을
    단순화 시키며, 자료의 손실, 손상을 막을 수 있는 역할을 합니다.  아울러
    이 자습서의 끝부분에서는 <productname>PostgreSQL</productname>만의
    고유 확장 기능들에 대해서도 간단히 소개할 예정입니다.
   </para>

   <para>
    여기서도  <xref
    linkend="tutorial-sql"/>에서 예제로 사용했던 그 자료들을 가지고
    예제를 설명합니다.  아직 읽어보지 않았다면, 한 번 정도 간단하게나마
    읽어 보면 이 장을 읽는데 도움이 많이 될 것입니다.  이 장에서 다루는
    몇몇 예제는 소스의 tutorial 디렉터리안에 있는
    <filename>advanced.sql</filename> 파일에서 살펴 볼 
    수 있습니다.  또한 이 파일에는 이 장에서 사용할 예제 자료들도
    함께 있습니다.  이 자료들은 2장에서 입력한 자료들은
    포함하고 있지 않습니다. (이 파일을 사용하는 방법은 
    <xref linkend="tutorial-sql-intro"/>에서 설명하고 있습니다.)
   </para>
  </sect1>


  <sect1 id="tutorial-views">
   <title>뷰</title>

   <indexterm zone="tutorial-views"><primary>view</primary></indexterm>
   <indexterm zone="tutorial-views"><primary>뷰</primary></indexterm>

   <para>
    <xref linkend="tutorial-join"/>에서 다룬 쿼리를 다시 한 번
    살펴보겠습니다.  응용 프로그램에서는 항상 날씨 정보와 
    도시 위치를 함께 출력하는 작업을 하는데, 이 때마다 
    그 복잡한 쿼리를 계속 사용한다는 것은 번거로운 일입니다.  이 때
    <firstterm>뷰</firstterm> <firstterm>view</firstterm>를 만듭니다. 이것은
    마치 또 하나의 새로운 테이블 처럼 사용할 수 있습니다:

<programlisting>
CREATE VIEW myview AS
    SELECT city, temp_lo, temp_hi, prcp, date, location
        FROM weather, cities
        WHERE city = name;

SELECT * FROM myview;
</programlisting>
   </para>

   <para>
    사용이 유연한 뷰를 만드는 것은 좋은 자료구조 설계의
    핵심적인 요소입니다.  일단 기본적인 뷰를 만들고 그것을 응용프로그램에서
    사용한다면, 뷰가 참조하는 원래 테이블의 자료구조가, 만들어진 뷰에 영향을
    미치지 않는 범위에서는 얼마든지 확장되고 수정될 수 있겠지요.  이렇게
    되면 응용프로그램의 개발 부담을 줄여줄 것입니다.
   </para>

   <para>
    쿼리에서 실재 테이블을 지정하는 자리 어느 곳이든 그 자리에 
    뷰를 사용할 수 있습니다.  또한 뷰를 가지고 또 다른 뷰를 
    만드는 것도 흔한 방법입니다.
   </para>
  </sect1>


  <sect1 id="tutorial-fk">
   <title>참조키</title>

   <indexterm zone="tutorial-fk"><primary>foreign key</primary></indexterm>
   <indexterm zone="tutorial-fk"><primary>참조키</primary></indexterm>

   <indexterm zone="tutorial-fk">
    <primary>참조 무결성</primary>
   </indexterm>

   <para>
    <xref
    linkend="tutorial-sql"/>에서 사용한 <classname>weather</classname>, 
    <classname>cities</classname> 테이블의 관계를 다시 한 번 살펴봅시다.  이
    두 테이블 간에 아무른 관계 조건이 없다고 가정한다면,  다음과 같은
    문제점들이 발생할 것입니다.  두 테이블을 도시명으로 조인해서 자료를
    찾고자 하는데, inner join 일 경우는 사용자가 한 테이블에서 도시명을
    잘못 입력했다면, 그 자료는 완벽하게 찾을 수 없는 사태가
    발생하겠지요.  또 한 테이블에서 도시명을 바꾸었을 경우도 그렇게 될
    것이고, 또 <classname>cities</classname> 테이블에서 특정 도시 정보가
    삭제가 되어버리면 <classname>weather</classname> 테이블 안에 있는
    그 도시의 날씨 정보가 전혀 쓸 모 없게 되어버립니다.  그래서, 
    <classname>weather</classname> 테이블에 자료를 입력할 때는 반드시
    <classname>cities</classname> 테이블에 있는 도시명을 사용해야지만
    입력할 수 있도록 해야겠다고 테이블 관계를 다시 정의합니다.  이것을
    RDBMS 용어로 <firstterm>참조 무결성</firstterm>(<firstterm>referential
    integrity</firstterm>) 이라고 합니다.  이것을 구현하기 위해서
    단순하게 생각해서 <classname>weather</classname> 테이블에 자료를
    입력하기 전에, 먼저 입력될 도시명이 <classname>cities</classname> 테이블에
    있는지 살펴보고 있다면 입력작업을 계속 진행하고, 없다면 입력작업은
    중지하도록 프로그램 만들 수 있겠지요.  처음에 아무런 참조 무결성
    조건이 없는 상태보다는 좀 더 안전해졌지만, 아직도 많은 문제점들을
    안고 있습니다 (앞에서 이야기한 update, delete 관련 작업에서).
    이런 문제를 <productname>PostgreSQL</productname>에서는
    다음과 같이 간단히 참조키를 지정함으로 해결할 수 있습니다.
   </para>

   <para>
    이것을 구현하는 테이블 생성 스크립트는 다음과 같습니다:

<programlisting>
CREATE TABLE cities (
        city     varchar(80) primary key,
        location point
);

CREATE TABLE weather (
        city      varchar(80) references cities(city),
        temp_lo   int,
        temp_hi   int,
        prcp      real,
        date      date
);
</programlisting>

    테이블을 만들었으면, 이제 잘못된 자료를 넣어봅시다:

<programlisting>
INSERT INTO weather VALUES ('Berkeley', 45, 53, 0.0, '1994-11-28');
</programlisting>

<screen>
ERROR:  insert or update on table "weather" violates foreign key constraint "weather_city_fkey"
DETAIL:  Key (city)=(Berkeley) is not present in table "cities".
</screen>
   </para>

   <para>
    윗 오류 메시지는 <classname>weather</classname> 테이블을 대상으로 하는
    자료입력 또는 자료 변경 작업이 weather_city_fkey 제약조건을 위반했으며, 
    자세한 내용으로 그 제약조건의 상위 테이블인 <classname>cities</classname>
    테이블의 city 칼럼값으로 Berkeley인 자료가 없다고 알려주는 것입니다.
   </para>

   <para>
    참조키 기능은 응용 프로그램에서 해야할 일들을 대폭 줄여줌과 동시에
    자료의 관계성을 보다 견고하게 만들어줍니다.  참조키 기능은 여기서
    언급한 것보다 훨씬 많은 것을 제공하고 있습니다.  이 자습서에서 그
    세세한 기능들에 대해서는 언급하지 않겠습니다.  자세한
    사항은 <xref linkend="ddl"/>을 참조하십시오.
   </para>
  </sect1>


  <sect1 id="tutorial-transactions">
   <title>트랜잭션</title>

   <indexterm zone="tutorial-transactions"><primary>transaction</primary></indexterm>
   <indexterm zone="tutorial-transactions"><primary>트랜잭션</primary></indexterm>

   <para>
    <firstterm>트랜잭션</firstterm>  <firstterm>transaction</firstterm> 이란 모든 데이터베이스
        시스템에서 기본적인 한 개념입니다.  트랜잭션의 핵심은 여러개의 작업이
        최종적으로는 하나로 취급된다는 것입니다.  이것을 전부 적용 아니면 전부
        취소 작업(all-or-nothing operation)이라고 부릅니다.  각각의 트랜잭션은
        독립적이여서 동시에 발생한 트랜잭션에 대해서는 그 트랜잭션 안에서의 데이터만
        적용됩니다.  또, 하나의 트랜잭션 안에서 어떤 작업 도중 오류가 발생 되었다면,
        이전에 적용되었던 모든 작업들에 대해서는 모두 취소됩니다.
   </para>

   <para>
    예를 들어서, 간단한 은행 데이터베이스를 생각해봅시다.  이 은행 데이터베이스에는
        각 계좌의 현 잔액을 보관하는 accounts 테이블과, 각 계좌의 거래내역을 보관하는 
        branches 테이블로  구성되어있습니다.  이때, Alice 계좌에서 $100.00 빼서 
        Bob 계좌로 이체하려고 합니다.  이것을 구현한다면, 가장 간단하게 아래와 같이
        처리하면 되겠지요:

<programlisting>
UPDATE accounts SET balance = balance - 100.00
    WHERE name = 'Alice';
UPDATE branches SET balance = balance - 100.00
    WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Alice');
UPDATE accounts SET balance = balance + 100.00
    WHERE name = 'Bob';
UPDATE branches SET balance = balance + 100.00
    WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Bob');
</programlisting>
   </para>

   <para>
    물론 계좌 이체가 이렇게 간단하게 움직여지지는 않겠지만, 여기서 중요한
        것은 계좌 이체 작업을 하려면, 적어도 네 개의 독립된 update 구문으로 
        작업해야한다는 것입니다.  이런 작업을 하는데, 만일 위의 네 개의 작업
        도중 부분적으로 작업을 성공하고, 그 나머지는 실패한다면, 각 계좌에
        남아있는 금액이 이상해지겠지요.  이런 사태를 막기위해서, 하나의 
        작업군(여러개의 작업)이 전부 처리가 되든지, 아니면, 전부 취소가
        되는 이런 작업이 필요합니다. 이런 작업을 할 때, <firstterm>트랜잭션</firstterm>을
        이용합니다.  이런 하나의 트랜잭션 내에서의 일군의 작업이 하나로 처리되는
        것을 데이터베이스 용어로 트랜잭션의 <firstterm>원자성</firstterm>
        <firstterm>atomic</firstterm>이라고 합니다.
   </para>

   <para>
    또한 트랜잭션 작업이 정상적으로 끝났을 경우에는 그 변경된 자료가
        어떠한 간섭 없이 저장되어야하고, 저장된 자료는 손상되지
        않아야합니다.  예를 들어 Bob의 현금 인출 작업이 진행되고 있는
        사이에도 Bob에게 현금을 주기전까지 어떠한 오류도 발생되어서는
        안되겠지요.  이것을 구현하기 위해서 트랜잭션 기능을 제공하는
        데이터베이스에서는 트랜잭션이 정상적으로 종료되었다고 알려주기
        전에도 이미 하나의 트랜잭션에서 발생하는 모든 작업들은
        영구저장장치(예, 하드디스크)에 기록을 해둡니다.
        (주, 이를 내구성(durability)이라고 합니다)
   </para>

   <para>
    트랜잭션에서 중요한 또 하나의 속성은 하나의 트랜잭션은 다른 트랜잭션에
        의해서 간섭받지 않아야합니다.  즉, 동시에 여러개의 트랜잭션이 발생했을
        때, 각각의 트랜잭션은 다른 트랜잭션에서 변경되고 있는 자료들에 대해서는
        참조하거나 간섭할 수 없어야합니다. (주, 이것을 고립성(isolation)
        이라고 합니다)  예를 들어서,  모든 계좌의 현잔액 합계를 구하는 
        트랜잭션이 작업 중인데, Alice나 Bob의 현 잔액을 바꾸는 다른 트랜잭션에
        의해서 그 계좌의 현 잔액이 바뀌게 된다면, 정확한 그 시점의 현 잔액 합계를
        구할 수가 없겠지요.  그래서, 트랜잭션은 각각의 명령이 수행 될 때 마다
        그 변경 사항이 데이터베이스의 원래 자료에 영향을 주는 것이 아니라,
        트랜잭션 영역안에 있는 모든 작업이 끝났을 때, 한꺼번에 그 변경 사항이
        데이터베이스에 적용됩니다. 이때부터 다른 트랜잭션이 그 변경된
        데이터를 참조 할 수 있게 됩니다. (주,
        이것을 정합성(consistency)이라고 합니다)
   </para>

   <para>
    <productname>PostgreSQL</productname>에서 트랜잭션 작업을 하려면, 
        그 해당 작업 앞뒤로 <command>BEGIN</command> 명령과 <command>COMMIT</command> 명령을
        지정합니다.  다음과 같은 형태가 트랜잭션을 사용하는 예입니다:

<programlisting>
BEGIN;
UPDATE accounts SET balance = balance - 100.00
    WHERE name = 'Alice';
-- etc etc
COMMIT;
</programlisting>
   </para>

   <para>
    만일, 작업 도중 해당 작업에 문제가 생겨 다음 작업을
        더이상 진행하지 말아야할 경우가 생깁니다.  (윗 예로 든 경우라면,
        Alice 잔고가 없는 경우)  이때는 
        <command>COMMIT</command>  작업 대신에, <command>ROLLBACK</command> 명령을
        사용해서 지금까지 작업한 내역들을 모두 취소하고 트랜잭션을 종료합니다.
   </para>

   <para>
    <productname>PostgreSQL</productname>에서는 모든 SQL 구문은 모두 
        트랜잭션 안에서 실행되는 것으로 간주합니다.   <command>BEGIN</command>
        명령을 명시적으로 실행하지 않았다고 하더라도 
        실행하고자 하는 명령 앞 뒤에,  <command>BEGIN</command>과
        (그 명령이 성공했다면) <command>COMMIT</command> 명령을 함께 사용합니다.  이 때
        <command>BEGIN</command>과 <command>COMMIT</command> 사이의 영역을 
        <firstterm>트랜잭션 블록</firstterm>이라고 합니다.
   </para>

   <note>
    <para>
         몇몇 클라이언트 라이브러리는 자동으로 <command>BEGIN</command>, <command>COMMIT</command>
         명령을 포함해서 실행되기 때문에, 사용자가 트랜잭션 지정하면 오류를 내는 경우도
         있습니다.  자세한 것은 해당 라이브러리 문서를 참조하십시오.
    </para>
   </note>

   <para>
    트랜잭션 안에서 <firstterm>savepoint</firstterm>를 지정해서 작업을 좀 더 
        유연하게 처리할 수도 있습니다.  savepoint란 여기까지
        작업이 정상 처리 되었다면,  <command>ROLLBACK TO</command> 명령을 
        이용해서 그 지점 전까지 작업한 것에 대해서는 작업한 내용을 
        보장하겠다는 표시하는 지점입니다.  이 지점을 표시하는 방법은 
         <command>SAVEPOINT</command> 명령을 이용합니다.   
   </para>

   <para>
    savepoint로 취소 작업을 진행 한 뒤에도 계속 트랜잭션 내 작업을 
        진행할 수 있습니다.  그렇게 작업을 하다가도 언제든지 
        해당 savepoint로 돌아 갈 수 있습니다.  또한 더 이상 
        이 savepoint가 필요 없다고 판단되면 그것을 삭제해서 시스템 자원을 
        늘릴 수도 있습니다.  하나 주의 할 사항은 
        특정 savepoint로 돌아갈 경우 그 지점 이후에 지정해 두었던 다른 
        savepoint들도 모두 취소 되어 사라져버린다는 점입니다.
   </para>

   <para>
    트랜잭션 내에서 일어나 모든 작업은 그 트랜잭션이 커밋되기 전까지
        다른 사용자들이 볼 수 없습니다.  물론 해당 트랜잭션이 취소된다면
        다른 사용자들은 절대로 그 변경했던 내용은 볼 수 없겠죠.
   </para>

   <para>
    다음 예제는
    윗 은행 거래 예제를 다시 savepoint 사용과 함께 구현해 본 것입니다:

<programlisting>
BEGIN;
UPDATE accounts SET balance = balance - 100.00
    WHERE name = 'Alice';
SAVEPOINT my_savepoint;
UPDATE accounts SET balance = balance + 100.00
    WHERE name = 'Bob';
-- 에구 ... Wally한테 가야하는 거였는데...
ROLLBACK TO my_savepoint;
UPDATE accounts SET balance = balance + 100.00
    WHERE name = 'Wally';
COMMIT;
</programlisting>
   </para>

   <para>
    이 예제는 처음처럼 Alice 계좌에서 출금을 하고, 
        Bob 계좌로 잘못 입금해서 <command>ROLLBACK TO</command>
        명령으로 입금 전 상태로 되돌리고, 
        다시 바른 입금 처리를 하고, 트랜잭션을 커밋하는 것을 
        보여주는 것입니다. (물론 commit 명령이 아니라, 
        rollback 명령이었다면, 전체 작업이 취소됩니다.)
   </para>

  </sect1>


  <sect1 id="tutorial-window">
   <title>윈도우 함수</title>

   <indexterm zone="tutorial-window">
    <primary>window function</primary>
   </indexterm>
   <indexterm zone="tutorial-window">
    <primary>윈도우 함수</primary>
   </indexterm>

   <para>
        <firstterm>윈도우 함수</firstterm>는 테이블에서 
        로우 집합을 대상으로 계산하는 함수다.  그 로우 집합은 한 로우에 대해서
        어떠한 방식으로 관계된 로우들이다.  이 함수는 로우 집합 단위로
        계산한다는 점에서 집계 함수와 비슷하다.  집계 함수는 해당 되는
        로우 집합에 대해서 하나의 로우로 그 결과물을 보여주지만,  윈도우 함수는
        각 로우 단위로 그 처리결과를 출력한다.  숨은 이야기를 하자면, 
        윈도우 함수는 쿼리 결과의 현재 로우 뿐만 아니라 더 많은 것을 
        접근할 수 있다.
   </para>

   <para>
    다음 예제는 각 부서별 평균 임금과 각 직원별 급여를 비교하는
        것이다:

<programlisting>
SELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname) FROM empsalary;
</programlisting>

<screen>
  depname  | empno | salary |          avg          
-----------+-------+--------+-----------------------
 develop   |    11 |   5200 | 5020.0000000000000000
 develop   |     7 |   4200 | 5020.0000000000000000
 develop   |     9 |   4500 | 5020.0000000000000000
 develop   |     8 |   6000 | 5020.0000000000000000
 develop   |    10 |   5200 | 5020.0000000000000000
 personnel |     5 |   3500 | 3700.0000000000000000
 personnel |     2 |   3900 | 3700.0000000000000000
 sales     |     3 |   4800 | 4866.6666666666666667
 sales     |     1 |   5000 | 4866.6666666666666667
 sales     |     4 |   4800 | 4866.6666666666666667
(10 rows)
</screen>

    첫번째 칼럼부터 세번째 칼럼까지는 <structname>empsalary</structname> 테이블의
        자료 그대로다.  여기서 하나의 로우는 실재 테이블 자료의 실재
        로우다.  네번째 칼럼은 <structfield>depname</structfield> 칼럼 값을 기준으로 
        그룹화된 자료의 평균값을 각 로우마다 보여준다.  (이 예제에서
        보이는 <function>avg</function> 함수는 집계 함수와 그 사용법이 
        완벽하게 같은데, 뒤에 오는 <literal>OVER</literal> 절로 판단해서 
        윈도우 함수로 처리된다.)
   </para>

   <para>
    윈도우 함수 뒤에는 항상 <literal>OVER</literal> 절을 사용한다.  이 규칙은
        이 함수가 윈도우 함수로 처리할 것인지, 그렇지 않을 것인지를
        구분하는 문법상 규칙이다.  <literal>OVER</literal> 절에는
        윈도우 함수의 계산 대상이 되는 로우들을 집합화하는 방법을 정의한다.
        <literal>PARTITION BY</literal>로 정의하는 목록은 같은 그룹인지, 
        다른 그룹인지 구분하는 기준으로 사용되고, 같은 그룹 내에서는 
        현재 로우 값도 포함해서 계산 된 윈도우 함수의 결과값을 공유한다.  
   </para>

   <para>
    또한 <literal>OVER</literal> 절로 집합화 하는 로우들의 정렬 순서를
        <literal>ORDER BY</literal> 절을 사용해서 지정할 수 있다. 
    (The window <literal>ORDER BY</literal> does not even have to match the
    order in which the rows are output.)  다음은 그 예제다:

<programlisting>
SELECT depname, empno, salary,
       rank() OVER (PARTITION BY depname ORDER BY salary DESC)
FROM empsalary;
</programlisting>

<screen>
  depname  | empno | salary | rank 
-----------+-------+--------+------
 develop   |     8 |   6000 |    1
 develop   |    10 |   5200 |    2
 develop   |    11 |   5200 |    2
 develop   |     9 |   4500 |    4
 develop   |     7 |   4200 |    5
 personnel |     2 |   3900 |    1
 personnel |     5 |   3500 |    2
 sales     |     1 |   5000 |    1
 sales     |     4 |   4800 |    2
 sales     |     3 |   4800 |    2
(10 rows)
</screen>

    위에서 보는 바와 같이, 이 결과는 부서명을 기준으로 급여가 많은 자료부터
        차례로 출력하는데, 이 때 <function>rank</function> 함수를 
        사용하여 그 순위를 보여주는 것이다. 
    <function>rank</function> 함수의 입력 매개 변수는 필요없다.  다음에 오는
        <literal>OVER</literal> 절에서 이 함수에서 처리해야할 모든 입력 정보들이
        다 정의되었기 때문이다.
   </para>

   <para>
    윈도우 함수의 계산 대상이 대는 로우는 
        <literal>FROM</literal> 다음부터 <literal>WHERE</literal>, <literal>GROUP BY</literal>,
        <literal>HAVING</literal> 절로 각 조건에 맞게 걸러진 
        <quote>가상 테이블</quote>의 각 로우다.  예를 들어,
        <literal>WHERE</literal> 조건절을 통해서 이미 걸러져 버린 
        로우에 대해서는 원도우 함수의 계산 대상이 되지 않는다.  하나의
        쿼리에 여러개의 윈도우 함수를 사용할 수 있다.  이 함수들은
        각각의 <literal>OVER</literal> 절을 사용하여 각각 자료를 집합화 한다.  하지만,
        이 집합화 대상이 대는 가상 테이블은 같아야한다.
   </para>

   <para>
    이미 살펴 보았듯이, <literal>ORDER BY</literal> 절이 필요 없는 경우라면, 
        생략할 수 있다.  이와 마찬가지로 <literal>PARTITION
        BY</literal> 절도 생략할 수 있으며, 이것이 생략된다면, 윈도우 함수가 처리하는
        같은 집합은 처리 결과 모든 로우의 집합이 된다.
   </para>

   <para>
    윈도우 함수와 관련된 또 하나 중요한 사항은 다음과 같다:
        <firstterm>윈도우 프래임</firstterm> <firstterm>window frame</firstterm>이라는 개념인데, 
        구분 대상이 되는 로우 집함들 가운데,  현재 윈도우 함수가 
        처리 하는 로우 집합을 뜻한다.  많은 윈도우 함수들이 
        이 윈도우 프래임 단위로 계산을 한다. (물론 전부는 아니다)  
        초기값으로 <literal>ORDER BY</literal> 절을 사용하면, 
        윈도우 프래임은 해당 정렬 방법으로 정렬 해서 순차적으로 현재 로우까지가
        된다.  <literal>ORDER BY</literal> 절이 빠지면,  그 구분되는 집합들의 
        모든 로우가 윈도우 함수의 계산 대상이 된다.
     <footnote>
      <para>
           물론, 이 기본 특성을 바꾸기 위해 윈도우 프래임을 바꾸는 옵션도 있지만,
           이 자습서의 범위를 벗어나 생략한다.  자세한 내용은
           <xref linkend="syntax-window-functions"/>을 참조한다.
      </para>
     </footnote>
    다음은 <function>sum</function> 윈도우 함수를 사용한 예다:
   </para>

<programlisting>
SELECT salary, sum(salary) OVER () FROM empsalary;
</programlisting>

<screen>
 salary |  sum  
--------+-------
   5200 | 47100
   5000 | 47100
   3500 | 47100
   4800 | 47100
   3900 | 47100
   4200 | 47100
   4500 | 47100
   4800 | 47100
   6000 | 47100
   5200 | 47100
(10 rows)
</screen>

   <para>
    위에서 처럼, <literal>OVER</literal> 절에 <literal>ORDER BY</literal> 정의를
        하지 않았고, <literal>PARTITION BY</literal> 절을 사용하지 않아서 
        가상 테이블은 실재 테이블의 전체 자료가 된다.  즉, 
        모든 로우에는 같은 윈도우 함수의 결과값이 출력된다.  하지만
        <literal>ORDER BY</literal> 정의를 하게 되면 다음과 같이 
        결과는 전혀 다르게 나온다.
   </para>

<programlisting>
SELECT salary, sum(salary) OVER (ORDER BY salary) FROM empsalary;
</programlisting>

<screen>
 salary |  sum  
--------+-------
   3500 |  3500
   3900 |  7400
   4200 | 11600
   4500 | 16100
   4800 | 25700
   4800 | 25700
   5000 | 30700
   5200 | 41100
   5200 | 41100
   6000 | 47100
(10 rows)
</screen>

   <para>
    윈도우 함수는 현재 로우를 포함 해서,  급여가 제일 적은 것부터
        차례대로 함수 결과를 그때 그때 출력한다. (여기서 주의할 사항은
        윈도우 함수는 현재 로우의 자료를 포함해서 계산 한다는 것이다.)
   </para>

   <para>
    윈도우 함수는 <literal>SELECT</literal> 항목 영역 안에서와, 
        <literal>ORDER BY</literal> 절에서만 사용할 수 있다.  그외
        <literal>GROUP BY</literal> 절이나, <literal>HAVING</literal>,
        <literal>WHERE</literal> 절에서는 사용할 수 없다.  이는
    논리적으로 이 함수의 처리 대상이 되는 입력 매개 변수값이 
        이미 결정이 나야하기 때문이다.  이와 같은 이유로, 
        윈도우 함수의 입력 매개 변수로 집계 함수의 결과를 
        사용 할 수는 있지만, 그 반대는 불가능 하다.
   </para>

   <para>
    윈도우 함수를 사용한 결과에 대한 검색 조건이나, 
        재 집계가 필요하다면, 서브 쿼리를 사용할 수 있다. 아래 예제 참고:

<programlisting>
SELECT depname, empno, salary, enroll_date
FROM
  (SELECT depname, empno, salary, enroll_date,
          rank() OVER (PARTITION BY depname ORDER BY salary DESC, empno) AS pos
     FROM empsalary
  ) AS ss
WHERE pos &lt; 3;
</programlisting>

    윗 쿼리는 <literal>rank</literal> 값이 3보다 작은 자료들만 출력한다.
   </para>

   <para>
    여러 개의 윈도우 함수를 함께 쓸 때는 각각 <literal>OVER</literal>
        절을 사용해야하는데, 이 때 지정할 원도우 프래임이 복잡하다면,
        그것을 계속 중복 입력해야는 것과, 이로 인해 오류를 낼 가능성 커진다.  이 
        문제점을 줄이기 위해서 <literal>WINDOW</literal> 절을 이용한다. 다음은 
        그 예다:

<programlisting>
SELECT sum(salary) OVER w, avg(salary) OVER w
  FROM empsalary
  WINDOW w AS (PARTITION BY depname ORDER BY salary DESC);
</programlisting>
   </para>

   <para>
    윈도우 함수에 대한 보다 많은 정보들은 
    <xref linkend="syntax-window-functions"/>,
    <xref linkend="functions-window"/>,
    <xref linkend="queries-window"/>, 및
    <xref linkend="sql-select"/> 설명서 페이지에서 다루고 있다.
   </para>
  </sect1>


  <sect1 id="tutorial-inheritance">
   <title>상속</title>

   <indexterm zone="tutorial-inheritance">
    <primary>inheritance</primary>
   </indexterm>
   <indexterm zone="tutorial-inheritance">
    <primary>상속</primary>
   </indexterm>


   <para>
    상속은 객체지향 데이터베이스에서 사용하는 개념입니다.  상속은
        데이터베이스 설계 방법에 대한 새로운 가능성을 제시합니다.
   </para>

   <para>
    <classname>cities</classname> (도시) 테이블과 <classname>capitals</classname> (수도) 테이블
        두 개를 만들어봅시다.  실 세계의 개념으로 본다면, 도시를 모두 찾아보자면,
        당연히 수도도 포함되겠지요.  여기서 테이블 상속 개념은 출발합니다.  만일
        전통적인 개념으로 자료구조를 설계한다면 다음과 같이 하겠지요:

<programlisting>
CREATE TABLE capitals (
  name       text,
  population real,
  elevation   int,    -- (in ft)
  state      char(2)
);

CREATE TABLE non_capitals (
  name       text,
  population real,
  elevation   int     -- (in ft)
);

CREATE VIEW cities AS
  SELECT name, population, elevation FROM capitals
    UNION
  SELECT name, population, elevation FROM non_capitals;
</programlisting>

        이 방식도 괜찮습니다.  하지만 자료를 조작해야하는 
        입장에서 본다면, 항상 두 개의 테이블을 같이 고려해야겠지요.
   </para>

   <para>
    좀 더 나은 방법:

<programlisting>
CREATE TABLE cities (
  name       text,
  population real,
  elevation   int     -- (in ft)
);

CREATE TABLE capitals (
  state      char(2) UNIQUE NOT NULL
) INHERITS (cities);
</programlisting>
   </para>

   <para>
    윗 예제는, <classname>capitals</classname> 테이블에서 지정한
    <firstterm>inherits</firstterm> 예약어가 바로 테이블을 상속받겠다는
    것을 나타냅니다.  윗 경우라면, <classname>cities</classname> 테이블의
    모든 칼럼을 상속 받는 것을 의미합니다.  윗
    <structfield>name</structfield> 칼럼의 <type>text</type>
    자료형은 <productname>PostgreSQL</productname>에서 사용하는 고유한
    가변길이 문자열 자료형입니다.  <classname>capitals</classname> 테이블에는
    주 약자를 보여주는 <structfield>state</structfield> 칼럼이 추가
    되었습니다.  PostgreSQL에서는
    하나의 테이블은 자기 자신이 상위테이블 (하나도 상속 받지 않은 테이블)이
    되거나 여러개의 상위 테이블을 상속받을 수 있습니다.  또한 그 테이블의
    자료 조회는 하위 테이블의 모든 자료를 포함해서 조회합니다.
   </para>

   <para>
    예를 들어, 해발고도가 500 ft. 보다 큰 도시들을 모두 찾을 때, 물론
        이때 수도도 포함하고자 할 때는 다음과 같은 쿼리를 이용합니다:

<programlisting>
SELECT name, elevation
  FROM cities
  WHERE elevation &gt; 500;
</programlisting>

    which returns:

<screen>
   name    | elevation
-----------+----------
 Las Vegas |     2174
 Mariposa  |     1953
 Madison   |      845
(3 rows)
</screen>
   </para>

   <para>
    이때, 수도를 빼고 검색하려면 다음과 같이 <literal>ONLY</literal> 예약어를 사용합니다:

<programlisting>
SELECT name, elevation
    FROM ONLY cities
    WHERE elevation &gt; 500;
</programlisting>

<screen>
   name    | elevation
-----------+----------
 Las Vegas |     2174
 Mariposa  |     1953
(2 rows)
</screen>
   </para>

   <para>
    이  <literal>ONLY</literal> 예약어는 앞에서 이야기한 모든 자료
        조작 명령  &mdash; <command>SELECT</command>, <command>UPDATE</command>,
    <command>DELETE</command> &mdash; 에서 그대로 적용됩니다.  물론 빠진다면,
        그 테이블의 하위 테이블 모두 적용됩니다.
   </para>

   <note>
    <para>
         테이블 상속 기능은 이렇게 유용함에도 불구하고, 
         유니크 제약조건, 참조키 같은 부분에서 그리 깔끔한 해결책을 
         제시하고 있지는 못합니다.  보다 자세한 사항은  <xref linkend="ddl-inherit"/>
         에서 다루고 있습니다.
    </para>
   </note>
  </sect1>


  <sect1 id="tutorial-conclusion">
   <title>끝맺음</title>

   <para>
    이 자습서는  <productname>PostgreSQL </productname>을 처음 접하는
        이들에게 개략적인 안내를 하기 위해서 작성되었습니다.  여기서 
        소개하지 않은 보다 깊이 있는 내용은 이 설명서의 
        다른 부분들에서 다룹니다.
   </para>

   <para>
    입문에 관계된 좀 더 많은 정보가 필요하다면, 
        PostgreSQL <ulink url="https://www.postgresql.org">웹 사이트</ulink>를 
        방문하면 좀 더 다양한 읽을 거리를 찾을 수 있습니다.
   </para>
   <note>
     <para>
           이 한글 설명서를 제공하고 있는 <ulink url="http://postgresql.kr">한국 PostgreSQL</ulink> 홈페이지도
           있습니다. - 옮긴이
         </para>
   </note>
  </sect1>
 </chapter>
