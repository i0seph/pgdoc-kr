<!-- doc/src/sgml/pgstatstatements.sgml -->

<sect1 id="pgstatstatements" xreflabel="pg_stat_statements">
 <title>pg_stat_statements</title>

 <indexterm zone="pgstatstatements">
  <primary>pg_stat_statements</primary>
 </indexterm>

 <para>
  <filename>pg_stat_statements</filename> 모듈은 서버에서 실행 되었던 
  쿼리들에 대한 실행 통계 정보를 보여준다.
 </para>

 <para>
  이 모듈을 사용하려면, 먼저 <xref linkend="guc-shared-preload-libraries"/>
  서버 환경 설정 값에 <literal>pg_stat_statements</literal> 값이 추가 되어 있어야한다. 
  이 모듈은 추가적인 공유 메모리를 사용하기 때문에,
  이렇게 서버 환경 설정도 바꾸어야 하며, 
  이것이 적용 하기 위해서는 서버도 다시 실행 해야한다. 물론 이 모듈을 더 이상 
  사용하지 않아 추가적인 공유 메모리 사용을 하지 않으려고 할 때도 마찮가지다.
 </para>

 <para>
   <filename>pg_stat_statements</filename> 모듈이 로드되면, 
   이 때부터 해당 서버의 모든 데이터베이스에서 일어라는 쿼리 통계가 
   수집된다.  하지만, 이 통계를 보는 <structname>pg_stat_statements</structname> 뷰,
   통계를 비우는 <function>pg_stat_statements_reset</function> 함수,
   통계를 보는 <function>pg_stat_statements</function> 함수들은 
   각 데이터베이스 별로 지정해야 한다.  이 작업은 해당 데이터베이스로 접속해서
   <command>CREATE EXTENSION pg_stat_statements</command> 명령을 이용하면 된다.
 </para>

 <sect2>
  <title><structname>pg_stat_statements</structname> 뷰</title>

  <para>
   이 모듈로 제공하는 쿼리 실행 통계 정보는 <structname>pg_stat_statements</structname> 이름의
   뷰로 제공된다.  이 뷰는 하나의 로우가 하나의 식별되는 쿼리를 뜻하며, 부가적으로 
   그 쿼리가 실행되었던 데이터베이스 ID, 사용자 ID등을 포함 하고 있다. (이 뷰에서 
   제공하고 있는 최대 쿼리 개수는 이 모듈 환경 설정값에 따라 결정 된다.) 
   <xref linkend="pgstatstatements-columns"/> 표에서는 이 뷰의 각 칼럼에 대한 설명을 
   하고 있다.
  </para>

  <table id="pgstatstatements-columns">
   <title><structname>pg_stat_statements</structname> 칼럼들</title>

   <tgroup cols="4">
    <thead>
     <row>
      <entry>칼럼명</entry>
      <entry>자료형</entry>
      <entry>참조</entry>
      <entry>설명</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>userid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
      <entry>해당 쿼리를 실행했던 사용자의 OID</entry>
     </row>

     <row>
      <entry><structfield>dbid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-database"><structname>pg_database</structname></link>.oid</literal></entry>
      <entry>해당 쿼리를 실행했던 데이터베이스 OID</entry>
     </row>

    <row>
      <entry><structfield>queryid</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>쿼리 고유 번호</entry>
     </row>

    <row>
      <entry><structfield>query</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <entry>해당 쿼리 내용(<xref linkend="guc-track-activity-query-size"/> 값으로 지정한 크기만큼만 저장됨)</entry>
     </row>

     <row>
      <entry><structfield>calls</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>실행 회수</entry>
     </row>

     <row>
      <entry><structfield>total_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>밀리세컨드 단위 총 실행 시간</entry>
     </row>

     <row>
      <entry><structfield>min_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>해당 구문 최소 실행 시간, 밀리초</entry>
     </row>

     <row>
      <entry><structfield>max_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>해당 구문 최대 실행 시간, 밀리초</entry>
     </row>

     <row>
      <entry><structfield>mean_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>해당 구문 평균 실행 시간, 밀리초</entry>
     </row>

     <row>
      <entry><structfield>stddev_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>해당 구문 실행 시간의 표준 편차, 밀리초</entry>
     </row>

     <row>
      <entry><structfield>rows</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>해당 쿼리로 출력한 또는 영향 받는 총 로우 개수</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_hit</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of shared block cache hits by the statement</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_read</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of shared blocks read by the statement</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_dirtied</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of shared blocks dirtied by the statement</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_written</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of shared blocks written by the statement</entry>
     </row>

     <row>
      <entry><structfield>local_blks_hit</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of local block cache hits by the statement</entry>
     </row>

     <row>
      <entry><structfield>local_blks_read</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of local blocks read by the statement</entry>
     </row>

     <row>
      <entry><structfield>local_blks_dirtied</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of local blocks dirtied by the statement</entry>
     </row>

     <row>
      <entry><structfield>local_blks_written</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of local blocks written by the statement</entry>
     </row>

     <row>
      <entry><structfield>temp_blks_read</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of temp blocks read by the statement</entry>
     </row>

     <row>
      <entry><structfield>temp_blks_written</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <entry>Total number of temp blocks written by the statement</entry>
     </row>

     <row>
      <entry><structfield>blk_read_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>
        블록을 디스크에서 읽는데 소비한 총 시간, 밀리세컨드
        (<xref linkend="guc-track-io-timing"/> 값이 on 상태여야 함, 그렇지 않으면, 0)
      </entry>
     </row>

     <row>
      <entry><structfield>blk_write_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>
        블록을 디스크로 쓰는데 소비한 총 시간, 밀리세컨드
        (<xref linkend="guc-track-io-timing"/> 값이 on 상태여야 함, 그렇지 않으면, 0)
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
   보안 문제로, 슈퍼 유저와 <literal>pg_read_all_stats</literal> 롤 소속
   사용자만 다른 사용자가 실행한
   <structfield>queryid</structfield>나 쿼리 내용을를 볼 수 있다. 한편,
   그 외 통계 정보는 일반 사용자도 볼 수 있다. (물론 해당 데이터베이스
   이 모듈의 확장 기능이 설치 되어 있는 경우를 말한다)
  </para>

  <para>
   실행계획을 짤 수 있는 쿼리들(<command>SELECT</command>, <command>INSERT</command>,
   <command>UPDATE</command>, <command>DELETE</command> 구문들)은 그 실행계획이 같은 
   쿼리들에 대해서는 그 조건 값들이 다르더라도 같은 쿼리로 취급한다. 
   즉, 쿼리에서 사용한 글자 그대로의 상수 값들만 달라서 실질적으로 
   그 실행계획이 같은 것들은 <structname>pg_stat_statements</structname> 뷰에서는
   하나의 쿼리로 취급한다.  하지만, 앞에서 설명한 쿼리들이 아닌 
   객체 정의 명령들은 상수 값들과 관계 없이 무조건 개별 쿼리로 취급한다.
  </para>

  <para>
   <structname>pg_stat_statements</structname> 뷰에서 상수 부분에 
   <literal>$1</literal> 형태로 표시된 것이 앞에서 설명한 동일 쿼리로 취급하기 위한
   상수 값의 변경된 값이다. 
   이렇게 변경된 쿼리 문이 다음에도 사용된다면, 그 <structfield>queryid</structfield>로
   같이 취급한다.
  </para>

  <para>
   또한 몇몇 상황에서는 실제 쿼리가 다른 쿼리임에도 불구하고, 
   <structname>pg_stat_statements</structname> 뷰에서 같은 항목의 쿼리로 취급되기도 한다.
   일반적으로 이런 경우는 구문적으로 보면 동일 쿼리이지만, 그 해시 값이 약간 다른 경우,
   같은 쿼리로 취급한다. (하지만, 이런 통합작업은 사용자나 데이터베이스가 다른 상황에서는 
   일어나지 않는다.)
  </para>

  <para>
   이 해시 값 비교 방식은 쿼리 구문분석 다음에 처리 되기 때문에, 
   위와 반대로 동일 쿼리임에도 불구하고,  <varname>search_path</varname> 와 같은
   설정값이 다르기 때문에 다른 쿼리로 처리하는 경우도 발생할 수 있다.
  </para>

  <para>
   Consumers of <structname>pg_stat_statements</structname> may wish to use
   <structfield>queryid</structfield> (perhaps in combination with
   <structfield>dbid</structfield> and <structfield>userid</structfield>) as a more stable
   and reliable identifier for each entry than its query text.
   However, it is important to understand that there are only limited
   guarantees around the stability of the <structfield>queryid</structfield> hash
   value.  Since the identifier is derived from the
   post-parse-analysis tree, its value is a function of, among other
   things, the internal object identifiers appearing in this representation.
   This has some counterintuitive implications.  For example,
   <filename>pg_stat_statements</filename> will consider two apparently-identical
   queries to be distinct, if they reference a table that was dropped
   and recreated between the executions of the two queries.
   The hashing process is also sensitive to differences in
   machine architecture and other facets of the platform.
   Furthermore, it is not safe to assume that <structfield>queryid</structfield>
   will be stable across major versions of <productname>PostgreSQL</productname>.
  </para>

  <para>
   As a rule of thumb, <structfield>queryid</structfield> values can be assumed to be
   stable and comparable only so long as the underlying server version and
   catalog metadata details stay exactly the same.  Two servers
   participating in replication based on physical WAL replay can be expected
   to have identical <structfield>queryid</structfield> values for the same query.
   However, logical replication schemes do not promise to keep replicas
   identical in all relevant details, so <structfield>queryid</structfield> will
   not be a useful identifier for accumulating costs across a set of logical
   replicas.  If in doubt, direct testing is recommended.
  </para>

  <para>
   The parameter symbols used to replace constants in
   representative query texts start from the next number after the
   highest <literal>$</literal><replaceable>n</replaceable> parameter in the original query
   text, or <literal>$1</literal> if there was none.  It's worth noting that in
   some cases there may be hidden parameter symbols that affect this
   numbering.  For example, <application>PL/pgSQL</application> uses hidden parameter
   symbols to insert values of function local variables into queries, so that
   a <application>PL/pgSQL</application> statement like <literal>SELECT i + 1 INTO j</literal>
   would have representative text like <literal>SELECT i + $2</literal>.
  </para>

  <para>
   The representative query texts are kept in an external disk file, and do
   not consume shared memory.  Therefore, even very lengthy query texts can
   be stored successfully.  However, if many long query texts are
   accumulated, the external file might grow unmanageably large.  As a
   recovery method if that happens, <filename>pg_stat_statements</filename> may
   choose to discard the query texts, whereupon all existing entries in
   the <structname>pg_stat_statements</structname> view will show
   null <structfield>query</structfield> fields, though the statistics associated with
   each <structfield>queryid</structfield> are preserved.  If this happens, consider
   reducing <varname>pg_stat_statements.max</varname> to prevent
   recurrences.
  </para>
 </sect2>

 <sect2>
  <title>함수들</title>

  <variablelist>
   <varlistentry>
    <term>
     <function>pg_stat_statements_reset(userid Oid, dbid Oid, queryid bigint) returns void</function>
     <indexterm>
      <primary>pg_stat_statements_reset</primary>
     </indexterm>
    </term>

    <listitem>
     <para>
      <function>pg_stat_statements_reset</function> discards statistics
      gathered so far by <filename>pg_stat_statements</filename> corresponding
      to the specified <structfield>userid</structfield>, <structfield>dbid</structfield>
      and <structfield>queryid</structfield>.  If any of the parameters are not
      specified, the default value <literal>0</literal>(invalid) is used for
      each of them and the statistics that match with other parameters will be
      reset.  If no parameter is specified or all the specified parameters are
      <literal>0</literal>(invalid), it will discard all statistics.  By
      default, this function can only be executed by superusers.  Access may be
      granted to others using <command>GRANT</command>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <function>pg_stat_statements(showtext boolean) returns setof record</function>
     <indexterm>
      <primary>pg_stat_statements</primary>
      <secondary>function</secondary>
     </indexterm>
    </term>

    <listitem>
     <para>
      The <structname>pg_stat_statements</structname> view is defined in
      terms of a function also named <function>pg_stat_statements</function>.
      It is possible for clients to call
      the <function>pg_stat_statements</function> function directly, and by
      specifying <literal>showtext := false</literal> have query text be
      omitted (that is, the <literal>OUT</literal> argument that corresponds
      to the view's <structfield>query</structfield> column will return nulls).  This
      feature is intended to support external tools that might wish to avoid
      the overhead of repeatedly retrieving query texts of indeterminate
      length.  Such tools can instead cache the first query text observed
      for each entry themselves, since that is
      all <filename>pg_stat_statements</filename> itself does, and then retrieve
      query texts only as needed.  Since the server stores query texts in a
      file, this approach may reduce physical I/O for repeated examination
      of the <structname>pg_stat_statements</structname> data.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
  <title>환경 설정 매개 변수들</title>

  <variablelist>
   <varlistentry>
    <term>
     <varname>pg_stat_statements.max</varname> (<type>integer</type>)
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.max</varname> 값은 이 모듈에서 
      처리할 수 있는 최대 쿼리 수를 지정한다.
      <structname>pg_stat_statements</structname> 뷰에 보일 최대 로우 수를 뜻한다.
      If more distinct statements than that are observed,
      information about the least-executed statements is discarded.
      초기값은 1000. 이 값은 서버 기동할 때만 지정할 수 있다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.track</varname> (<type>enum</type>)
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.track</varname> 설정은
      수집할 쿼리문의 사용빈도에 따른 쿼리문 사용 통계 정보 수집범위를 지정한다.
      <literal>top</literal>으로 지정하면, 자주 사용하는 쿼리들을 대상으로 하고, 
      <literal>all</literal>로 지정하면 모든 쿼리들을 대상으로, 
      <literal>none</literal>으로 지정하면, 아무 쿼리도 수집하지 않는다.
      초기값은 <literal>top</literal> 이다.
      이 값은 슈퍼유저만 바꿀 수 있다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.track_utility</varname> (<type>boolean</type>)
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.track_utility</varname> 설정은
      <command>SELECT</command>, <command>INSERT</command>, <command>UPDATE</command>, <command>DELETE</command>
      구문 외 다른 구문들도 수집 대상으로 할 것인지를 지정한다.
      초기값은 <literal>on</literal> 이다.
      이 값은 슈퍼유저만 바꿀 수 있다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.save</varname> (<type>boolean</type>)
    </term>

    <listitem>
     <para>
      <varname>pg_stat_statements.save</varname> 설정은 서버가 중지 되고, 
      재실행 되었을 때, 마지막 중지 시점의 쿼리문 통계 정보를 
      저장할 것인지를 지정한다.
      <literal>off</literal>로 설정하면, 서버가 재실행될 때 항상 
      모든 쿼리문에 대한 통계정보를 초기화 한다.
      초기값은 <literal>on</literal> 이다.
      이 환경설정 값은 <filename>postgresql.conf</filename> 파일에서 지정하거나
      서버 실행 명령행 옵션에서만 지정할 수 있다.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   이 모듈은 <varname>pg_stat_statements.max</varname> <literal>*</literal>
   <xref linkend="guc-track-activity-query-size"/> 바이트만큼의 
   공유 메모리를 추가로 필요로 한다.
   참고할 사항은  <varname>pg_stat_statements.track</varname> 값을
   <literal>none</literal>으로 지정했다 하더라도 앞의 계산식 만큼의 
   공유 메모리는 항상 사용한다는 점이다.
  </para>

  <para>
   <filename>postgresql.conf</filename> 파일에 이 모듈을 사용할 때의 기본 내용은
   다음과 같다:

<programlisting>
# postgresql.conf
shared_preload_libraries = 'pg_stat_statements'

pg_stat_statements.max = 10000
pg_stat_statements.track = all
</programlisting>
  </para>
 </sect2>

 <sect2>
  <title>예제 출력</title>

<screen>
bench=# SELECT pg_stat_statements_reset();

$ pgbench -i bench
$ pgbench -c10 -t300 bench

bench=# \x
bench=# SELECT query, calls, total_time, rows, 100.0 * shared_blks_hit /
               nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
          FROM pg_stat_statements ORDER BY total_time DESC LIMIT 5;
-[ RECORD 1 ]--------------------------------------------------------------------
query       | UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2
calls       | 3000
total_time  | 25565.855387
rows        | 3000
hit_percent | 100.0000000000000000
-[ RECORD 2 ]--------------------------------------------------------------------
query       | UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2
calls       | 3000
total_time  | 20756.669379
rows        | 3000
hit_percent | 100.0000000000000000
-[ RECORD 3 ]--------------------------------------------------------------------
query       | copy pgbench_accounts from stdin
calls       | 1
total_time  | 291.865911
rows        | 100000
hit_percent | 100.0000000000000000
-[ RECORD 4 ]--------------------------------------------------------------------
query       | UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2
calls       | 3000
total_time  | 271.232977
rows        | 3000
hit_percent | 98.5723926698852723
-[ RECORD 5 ]--------------------------------------------------------------------
query       | alter table pgbench_accounts add primary key (aid)
calls       | 1
total_time  | 160.588563
rows        | 0
hit_percent | 100.0000000000000000


bench=# SELECT pg_stat_statements_reset(0,0,s.queryid) FROM pg_stat_statements AS s
            WHERE s.query = 'UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2';

bench=# SELECT query, calls, total_time, rows, 100.0 * shared_blks_hit /
               nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
          FROM pg_stat_statements ORDER BY total_time DESC LIMIT 5;
-[ RECORD 1 ]--------------------------------------------------------------------
query       | UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2
calls       | 3000
total_time  | 20756.669379
rows        | 3000
hit_percent | 100.0000000000000000
-[ RECORD 2 ]--------------------------------------------------------------------
query       | copy pgbench_accounts from stdin
calls       | 1
total_time  | 291.865911
rows        | 100000
hit_percent | 100.0000000000000000
-[ RECORD 3 ]--------------------------------------------------------------------
query       | UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2
calls       | 3000
total_time  | 271.232977
rows        | 3000
hit_percent | 98.5723926698852723
-[ RECORD 4 ]--------------------------------------------------------------------
query       | alter table pgbench_accounts add primary key (aid)
calls       | 1
total_time  | 160.588563
rows        | 0
hit_percent | 100.0000000000000000
-[ RECORD 5 ]--------------------------------------------------------------------
query       | vacuum analyze pgbench_accounts
calls       | 1
total_time  | 136.448116
rows        | 0
hit_percent | 99.9201915403032721

bench=# SELECT pg_stat_statements_reset(0,0,0);

bench=# SELECT query, calls, total_time, rows, 100.0 * shared_blks_hit /
               nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
          FROM pg_stat_statements ORDER BY total_time DESC LIMIT 5;
-[ RECORD 1 ]---------------------------------------
query       | SELECT pg_stat_statements_reset(0,0,0)
calls       | 1
total_time  | 0.189497
rows        | 1
hit_percent | 

</screen>
 </sect2>

 <sect2>
  <title>만든이</title>

  <para>
   Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>.
   Query normalization added by Peter Geoghegan <email>peter@2ndquadrant.com</email>.
  </para>
 </sect2>

</sect1>
