<!-- doc/src/sgml/config.sgml -->

<chapter id="runtime-config">
<title>서버 환경 설정</title>

<indexterm>
 <primary>환경 설정</primary>
 <secondary>서버</secondary>
</indexterm>

<para>
 데이터베이스 시스템의 동작에 영향을 주는 환경 설정 매개 변수는 여러 가지가 있다. 
 본문의 첫 번째 절에서는 환경 설정 매개 변수와 인터랙션하는 방법을 설명하고 후속 절에서는 각 매개 변수를 자세하게 다룬다.
</para>

<sect1 id="config-setting">
 <title>매개 변수 설정</title>

 <sect2 id="config-setting-names-values">
<title>매개 변수 이름 및 값</title>

<para>
 모든 매개 변수 이름은 대소문자를 구분한다. 
 각 매개 변수 값은 boolean, string, integer, floating point 또는 enumerated(enum)의 5가지 타입 중 하나이다. 
 데이터 타입은 매개 변수 설정을 위한 구문을 설정한다.
</para>

<itemizedlist>
 <listitem>
<para>
 <emphasis>Boolean:</emphasis>
 <literal>on</literal>,
 <literal>off</literal>,
 <literal>true</literal>,
 <literal>false</literal>,
 <literal>yes</literal>,
 <literal>no</literal>,
 <literal>1</literal>,
 <literal>0</literal>
 (대소문자 구문 안함) 또는 이들 중 하나의 모호하지 않은 접두사 아무거나 값을 설정할 수 있다.
</para>
 </listitem>

 <listitem>
<para>
 <emphasis>String:</emphasis>
 일반적으로 앞뒤에 작은따옴표가 표시되며, 값 내에서는 작은따옴표가 겹쳐서 사용된다. 
 값이 보통 단순한 숫자 또는 식별자일 경우에는 따옴표를 생략할 수 있다.
 (값이 SQL 키워드인 경우 몇 문맥에서는 작은 따옴표가 필요할 수도 있다.)
</para>
 </listitem>

 <listitem>
<para>
 <emphasis>Numeric (integer and floating point):</emphasis>
       Numeric parameters can be specified in the customary integer and
       floating-point formats; fractional values are rounded to the nearest
       integer if the parameter is of integer type.  Integer parameters
       additionally accept hexadecimal input (beginning
       with <literal>0x</literal>) and octal input (beginning
       with <literal>0</literal>), but these formats cannot have a fraction.
       Do not use thousands separators.
       Quotes are not required, except for hexadecimal input.
</para>
 </listitem>

 <listitem>
<para>
 <emphasis>Numeric with Unit:</emphasis>
 일부 숫자 매개 변수는 메모리 또는 시간을 설명하므로 암시적 단위를 갖고 있다. 
 단위는 바이트, 킬로바이트, 블록(보통 8킬로바이트), 밀리초, 초 또는 분일 수 있다. 
 이러한 설정들 중 단위가 없는 숫자 값은 설정의 기본 단위를 사용하는 데, <structname>pg_settings</structname>.<structfield>unit</structfield>에서 확인할 수 있다. 
 편의상, 설정은 명시적으로 지정된 단위를 지정할 수 있다. 예를 들면, 시간 값이 <literal>'120 ms'</literal>인 경우, 매개 변수의 실제 단위가 무엇이든 변환 된다. 
 이 기능을 사용하려면 값을 string(따옴표 포함)으로 작성해야 한다는 점에 유의하라. 
 단위 이름은 대소문자를 구분하며, 숫자 값과 단위 사이에 공백이 올 수 있다.
 <itemizedlist>
<listitem>
 <para>
유효 메모리 단위는 <literal>B</literal> (바이트),
<literal>kB</literal>(킬로바이트), <literal>MB</literal>(메가바이트), <literal>GB</literal>(기가바이트) 및 <literal>TB</literal>(테라바이트)이다. 
메모리 단위의 승수는 1000이 아니라 1024이다.
 </para>
</listitem>

<listitem>
 <para>
유효 시간 단위는 <literal>us</literal> (microseconds), 
<literal>ms</literal>(밀리초), <literal>s</literal>(초), <literal>min</literal>(분), <literal>h</literal>(시) 및 <literal>d</literal>(일)이다.
 </para>
</listitem>
 </itemizedlist>

       If a fractional value is specified with a unit, it will be rounded
       to a multiple of the next smaller unit if there is one.
       For example, <literal>30.1 GB</literal> will be converted
       to <literal>30822 MB</literal> not <literal>32319628902 B</literal>.
       If the parameter is of integer type, a final rounding to integer
       occurs after any unit conversion.
</para>
 </listitem>

 <listitem>
<para>
 <emphasis>Enumerated:</emphasis>
 Enumerated 타입의 매개 변수는 string 매개 변수와 작성 방식이 동일하지만 값 집합이 하나로 제한된다. 
 이 매개 변수에서 허용되는 값은 <structname>pg_settings</structname>.<structfield>enumvals</structfield>를 참고할 수 있다. 
 Enum 매개 변수 값은 대소문자를 구분하지 않는다.
</para>
 </listitem>
</itemizedlist>
 </sect2>

 <sect2 id="config-setting-configuration-file">
<title>환경 설정 파일을 통한 매개 변수 인터랙션</title>

<para>
 이러한 매개 변수를 설정하는 가장 기본적인 방법은 일반적으로 데이터 디렉터리에 있는 <filename>postgresql.conf</filename><indexterm><primary>postgresql.conf</primary></indexterm> 파일을 편집하는 것이다. 
 데이터베이스 클러스터 디렉터리가 초기화된 경우 기본 사본이 설치된다. 
 이 파일과 유사한 예시는 다음과 같다.
<programlisting>
# This is a comment
log_connections = yes
log_destination = 'syslog'
search_path = '"$user", public'
shared_buffers = 128MB
</programlisting>
 라인당 매개 변수 하나가 지정되어 있다. 이름과 값 사이의 등호는 옵션이다. 
 공백은 중요하지 않으며(따옴표로 둘러싼 매개 변수 제외), 빈 라인은 무시된다. 
 해시 마크(<literal>#</literal>)는 라인의 나머지가 주석임을 의미한다. 단순 식별자 또는 숫자가 아닌 매개 변수 값은 작은 따옴표를 사용해야 한다. 
 작은 따옴표를 매개 변수 값에 포함하려면 따옴표 2개를 겹치거나 역슬래시와 따옴표를 사용해야 한다.
     같은 매개 변수 설정이 여러개 있는 경우, 
     마지막 것을 제외하고 나머지 모두 무시된다.
</para>

<para>
 이렇게 설정된 매개 변수는 클러스터에 기본값으로 제공된다. 
 값을 오버라이드하지 않은 경우 활성 세션에서 보이는 설정은 이 값들이다. 
 다음 절에서는 관리자 또는 사용자가 이러한 기본값을 오버라이드하는 방법을 설명한다.
</para>

<para>
 <indexterm>
<primary>SIGHUP</primary>
 </indexterm>
 메인 서버 프로세스가 <systemitem>SIGHUP</systemitem> 신호를 수신할 때마다 환경 설정 파일이 다시 읽히게 된다. 
 이 신호는 커맨드 라인에서 <literal>pg_ctl reload</literal>를 실행하거나 SQL 함수 <function>pg_reload_conf()</function>를 호출함으로써 가장 최근에 전송된 것이다. 
 또한 메인 서버 프로세스는 현재 실행 중인 모든 서버 프로세스에 이 신호를 퍼트려서 기존 세션에도 새 값이 적용되게 한다(현재 실행 중인 클라이언트 명령이 완료된 후에 진행됨). 
 또는 사용자가 단일 서버 프로세스에 직접 신호를 전송할 수도 있다. 일부 매개 변수는 서버 시작 시에만 설정 가능하다. 
 환경 설정 파일의 항목 변경은 서버가 재시작되기 전까지 무시된다. 
 마찬가지로, 환경 설정 파일에서 잘못된 매개 변수 설정도 <systemitem>SIGHUP</systemitem> 처리 중에 무시된다(단, 로그에는 기록된다).
</para>

<para>
 <filename>postgresql.conf</filename> 외에, 
 <productname>PostgreSQL</productname> 데이터 디렉터리에는 
 <filename>postgresql.auto.conf</filename><indexterm><primary>postgresql.auto.conf</primary></indexterm>
 파일이 포함되어 있으며, 
 <filename>postgresql.conf</filename>와 형식은 동일하지만 자동으로 편집됨으로,
 직접 편집해서는 안 된다. 
 이 파일에는 <xref linkend="sql-altersystem"/> 명령을 통해 설정한 것들이 포함되어 있다. 
 <filename>postgresql.conf</filename> 파일과 같이 환경 설정을 읽어야 할 때, 
 동일하게 읽으며, 
 같은 매개 변수 설정이 두 곳 모두 있다면,
 <filename>postgresql.auto.conf</filename>의 설정이 최종 반영 된다. 
</para>

    <para>
     외부 도구들로 <filename>postgresql.auto.conf</filename>
     파일을 변경할 수는 있다.  하지만, 
     <command>ALTER SYSTEM</command> 명령으로
     충분히 그 내용이 바뀔 수 있음으로 서버 실행 중에는 
     이 파일을 외부 도구로 편집하는 것을 추천하지 않는다.  외부
     도구들로 새 설정을 맨 밑에 추가하거나, 중복된 설정을 지우거나,
     주석 처리를 하거나 주석 처리를 취소하거나 할 수 있다. 
     (<command>ALTER SYSTEM</command> 명령이 하는 것들이다.)
    </para>
 </sect2>

 <sect2 id="config-setting-sql-command-interaction">
<title>SQL을 통한 매개 변수 인터랙션</title>

 <para>
<productname>PostgreSQL</productname>는 환경 설정 기본값을 설정하기 위한 3가지 SQL 명령을 제공한다. 
앞에서 언급한 <xref linkend="sql-altersystem"/> 명령은 SQL 구문으로 전역 기본값을 변경할 수 있는 방법을 제공하는데, 기능상 <filename>postgresql.conf</filename>를 편집하는 것과 동일하다. 
또한 데이터베이스별로 또는 role별로 기본값 설정이 가능한 명령이 2가지 있다.
 </para>

 <itemizedlist>
 <listitem>
<para>
 <xref linkend="sql-alterdatabase"/> 명령은 전역 설정을 데이터베이스별로 오버라이드한다.
</para>
 </listitem>

 <listitem>
<para>
 <xref linkend="sql-alterrole"/> 명령은 전역 및 데이터베이스별 설정을 모두 사용자 지정 값으로 오버라이드한다.
</para>
 </listitem>
</itemizedlist>

 <para>
<command>ALTER DATABASE</command> 및 <command>ALTER ROLE</command>로 설정된 값은 데이터베이스 세션을 새로 시작하는 경우에만 적용된다. 
이것은 환경 설정 파일 또는 서버 커맨드 라인에서 구한 값을 오버라이드하고 나머지 세션에 대해 기본값을 적용한다. 
서버 시작 후에 일부 설정은 변경이 불가하므로 이 명령(또는 아래 나열된 것 중 하나)으로 설정할 수 없다는 점에 유의해야 한다.
</para>

 <para>
클라이언트가 데이터베이스에 연결되면 <productname>PostgreSQL</productname> 세션-로컬 환경 설정 설정과 인터랙션이 가능한 SQL 명령(또는 동등한 함수) 2개를 추가 제공한다.
</para>

<itemizedlist>
 <listitem>
 <para>
<xref linkend="sql-show"/> 명령으로 모든 매개 변수의 현재 값을 확인할 수 있다. 
해당 SQL 함수는
      <function>current_setting(setting_name text)</function>이다
      (<xref linkend="functions-admin-set"/> 참조).
 </para>
 </listitem>

 <listitem>
<para>
 <xref linkend="sql-set"/> 명령으로는 세션에 로컬로 설정할 수 있는 이 매개 변수의 현재 값을 수정할 수 있다. 
 다른 세션에는 영향을 미치지 않는다. 해당 SQL 함수는 <function>set_config(setting_name, new_value, is_local)</function>이다 (<xref linkend="functions-admin-set"/> 참조).
</para>
 </listitem>
</itemizedlist>

<para>
 또한, 시스템 뷰 <link
 linkend="view-pg-settings"><structname>pg_settings</structname></link>는 세션-로컬 값을 확인하고 변경하는 데 사용할 수 있다.
</para>

<itemizedlist>
 <listitem>
<para>
 뷰 쿼리는 <command>SHOW ALL</command>과 유사하지만, 좀 더 상세한 결과를 보여준다. 또한 필터 조건을 지정하거나 다른 릴레이션과 조인할 수 있어서 좀 더 유연하다.
</para>
 </listitem>

 <listitem>
<para>
 이 뷰에서, setting 칼럼을 업데이트하기 위해 <xref linkend="sql-update"/>를 사용하는 것은 <command>SET</command> 명령을 실행하는 것과 동일하다. 예를 들면,
<programlisting>
SET configuration_parameter TO DEFAULT;
</programlisting>
 위의 구문은 아래와 동일하다.
<programlisting>
UPDATE pg_settings SET setting = reset_val WHERE name = 'configuration_parameter';
</programlisting>
</para>
 </listitem>
</itemizedlist>

 </sect2>

 <sect2>
<title>쉘을 통한 매개 변수 인터랙션</title>

 <para>
전역 기본값을 설정하거나 데이터베이스 또는 role 레벨에서 오버라이드를 첨부하는 것 외에도, 
쉘 기능을 통해 <productname>PostgreSQL</productname>로 설정을 전달할 수 있다. 
서버와 <application>libpq</application> 클라이언트 라이브러리 모두 쉘을 통해 매개 변수를 전달 받는다.
 </para>

 <itemizedlist>
<listitem>
<para>
 서버 시작 도중에 <option>-c</option> 커맨드 라인 매개 변수를 사용하여 매개 변수 설정을 <command>postgres</command> 명령에 전달할 수 있다. 예를 들면,
<programlisting>
postgres -c log_connections=yes -c log_destination='syslog'
</programlisting>
 이런 방법으로 제공된 설정은 <filename>postgresql.conf</filename> 또는 <command>ALTER SYSTEM</command>을 통해 해당 설정을 오버라이드 하므로 서버를 재시작하지 않고는 전역적으로 설정을 변경할 수 없다.
 </para>
</listitem>

<listitem>
 <para>
<application>libpq</application>를 통해 클라이언트 세션을 시작하면 <envar>PGOPTIONS</envar> 환경 변수를 사용하여 매개 변수 설정을 지정할 수 있다. 
이렇게 지정된 설정은 세션의 일생 중에 기본값을 환경 설정하지만 다른 세션에는 영향을 주지 않는다. 
기록을 위해 <envar>PGOPTIONS</envar>의 형식은 <command>postgres</command> 명령을 실행할 때 사용되는 것과 유사한데, 특히 <option>-c</option> 플래그의 지정이 필요하다. 
예를 들면,
<programlisting>
env PGOPTIONS="-c geqo=off -c statement_timeout=5min" psql
</programlisting>
 </para>

 <para>
다른 클라이언트와 라이브러리는 쉘을 통해 자체 메커니즘을 제공하거나, SQL 명령을 직접적으로 사용하지 않고 사용자가 세션 설정을 변경할 수 있게 한다.
 </para>
</listitem>
 </itemizedlist>

 </sect2>

 <sect2 id="config-includes">
<title>환경 설정 파일 내용 관리</title>

 <para>
<productname>PostgreSQL</productname>는 복잡한 <filename>postgresql.conf</filename> 파일을 작은 파일로 세분화하는 몇 가지 기능을 제공한다. 
이 기능은 환경 설정이 동일하지는 않지만 연관성이 있는 서버들을 관리할 때 특히 유용하다.
 </para>

 <para>
<indexterm>
 <primary><literal>include</literal></primary>
 <secondary>환경 설정 파일</secondary>
</indexterm>
개별 매개 변수 설정 외에, <filename>postgresql.conf</filename> 파일에는 <firstterm>include
지시어</firstterm>가 포함되어 있는데, 이것은 읽어올 다른 파일을 지정함으로써 환경 설정 파일의 해당 위치에 파일이 삽입된 것 같이 처리된다. 
이 기능은 환경 설정 파일을 물리적으로 분할 한다. 
Include 지시어는 간략하게 다음과 같이 나타난다.
<programlisting>
include 'filename'
</programlisting>
파일 이름이 절대 경로가 아니면 레퍼런스 환경 설정 파일이 있는 디렉터리의 상대 경로로 취급된다. include는 중첩이 가능하다.
 </para>

 <para>
<indexterm>
 <primary><literal>include_if_exists</literal></primary>
 <secondary>in configuration file</secondary>
</indexterm>
<literal>include_if_exists</literal> 지시어도 있는데, 이것은 레퍼런스 파일이 존재하지 않거나 파일을 읽을 수 없는 경우 외에는 <literal>include</literal> 지시어와 동일하게 작동된다. 
정규 <literal>include</literal>는 이것을 에러 조건으로 간주하지만 <literal>include_if_exists</literal>는 단순히 메시지를 로깅하고 레퍼런스 환경 설정 파일의 처리를 계속한다.
 </para>

 <para>
<indexterm>
 <primary><literal>include_dir</literal></primary>
 <secondary>in configuration file</secondary>
</indexterm>
<filename>postgresql.conf</filename> 파일에는 <literal>include_dir</literal> 지시어도 포함될 수 있는데, 이것은 포함할 환경 설정 파일의 전체 디렉터리를 지정한다. 다음과 같이 나타난다.
<programlisting>
include_dir 'directory'
</programlisting>
절대 경로가 아닌 디렉터리 이름은 참고 환경 설정 파일이 포함된 디렉터리의 상대 경로로 취급된다. 
지정된 디렉터리 내에서 디렉터리가 아닌 파일은 이름이 접미사 <literal>.conf</literal>로 끝나는 경우에만 포함된다. 
해당 파일이 일부 플랫폼에서 숨겨질 수 있으므로 실수 예방 차원에서 문자 <literal>.</literal>로 시작되는 파일 이름도 무시된다. 
include 디렉터리 내의 파일들은 파일 이름 순으로 처리된다(C 로케일(locale) 규칙에 따라, 예를 들면, 숫자-문자 순 및 대문자-소문자 순).
 </para>

 <para>
Include 파일 또는 디렉터리는 <filename>postgresql.conf</filename> 파일 하나만 쓰지 않고, 데이터베이스 환경 설정을 논리적으로 분리하는 데 사용될 수 있다. 
메모리 용량이 각각 다른 데이터베이스 서버 2대를 운용하는 회사를 생각해보자. 로깅 같이 데이터베이스 2개가 공유하는 환경 설정 요소가 있을 가능성이 높다. 
그러나 서버의 메모리 관련 매개 변수는 서로 상이하다. 그리고 서버 전용 커스텀화customization를 했을 것이다. 
이러한 상황을 관리하는 한 방법은 커스텀 환경 설정 변경 내용을 3개의 파일로 분할하는 것이다. 
사용자는 아래 코드를 <filename>postgresql.conf</filename> 파일의 끝에 추가하여 각 파일을 포함하면 된다.
<programlisting>
include 'shared.conf'
include 'memory.conf'
include 'server.conf'
</programlisting>
모든 시스템의 <filename>shared.conf</filename> 파일은 동일하다. 
메모리 크기가 다른 각 서버는 동일한 <filename>memory.conf</filename>를 공유할 수 있다. 
사용자는 RAM이 8GB인 서버와 16GB인 서버를 모두 한 파일로 관리할 수 있다. 
그리고 <filename>server.conf</filename>에는 서버별 환경 설정 정보가 포함된다.
 </para>

 <para>
환경 설정 파일 디렉터리를 생성하고 이 정보를 그 파일에 넣는 방법도 있다. 
예를 들면, <filename>conf.d</filename> 디렉터리는 <filename>postgresql.conf</filename>의 끝에서 참고할 수 있다.
<programlisting>
include_dir 'conf.d'
</programlisting>
그런 다음, <filename>conf.d</filename> 디렉터리의 파일 이름을 다음과 같이 지정한다.
<programlisting>
00shared.conf
01memory.conf
02server.conf
</programlisting>
 이러한 네이밍 규칙으로 파일이 로드되는 순서가 명확해진다. 
 서버가 환경 설정 파일을 읽을 때, 매개 변수의 마지막 설정만 사용되므로 이 규칙은 중요하다. 
 이 예시에서, <filename>conf.d/02server.conf</filename>에서 설정된 값들은 <filename>conf.d/01memory.conf</filename>에서 설정된 값을 오버라이드한다.
 </para>

 <para>
이 방법을 대신 사용하여 파일을 서술적으로 네이밍할 수 있다.
<programlisting>
00shared.conf
01memory-8GB.conf
02server-foo.conf
</programlisting>
이러한 배치 순서는 각각의 환경 설정 파일 변화에 대해 고유한 이름을 부여한다. 
이로써 버전 관리 저장소처럼 몇 개의 서버 환경 설정이 한곳에 저장되는 경우 모호성을 줄일 수 있다(데이터베이스 환경 설정 파일을 버전 관리에 저장하는 것은 생각해볼 만한 좋은 사례이다.).
 </para>
</sect2>
 </sect1>

 <sect1 id="runtime-config-file-locations">
<title>파일 위치</title>

 <para>
앞에서 언급한 <filename>postgresql.conf</filename> 파일 외에도 <productname>PostgreSQL</productname>는 수동으로 편집되는 다른 환경 설정 파일 2개를 사용하는데, 이 파일은 클라이언트 인증을 관리하는 파일이다(이 파일의 사용은 <xref
linkend="client-authentication"/>에서 다룬다). 기본적으로 3개의 환경 설정 파일 모두 데이터베이스 클러스터의 데이터 디렉터리에 저장된다. 
이 절에서 설명하는 매개 변수는 환경 설정 파일을 다른 곳에 배치할 수 있다(그렇게 하면 관리가 편하다. 특히, 환경 설정 파일이 별도로 관리되는 경우에는 환경 설정 파일을 백업하기가 훨씬 쉽다.).
 </para>

 <variablelist>
 <varlistentry id="guc-data-directory" xreflabel="data_directory">
<term><varname>data_directory</varname> (<type>string</type>)
<indexterm>
 <primary><varname>data_directory</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 데이터 저장소로 사용되는 디렉터리를 지정한다. 이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-config-file" xreflabel="config_file">
<term><varname>config_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>config_file</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 메인 서버 환경 설정 파일(통상적으로 <filename>postgresql.conf</filename>라고 함)을 지정한다. 이 매개 변수는 <command>postgres</command> 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-hba-file" xreflabel="hba_file">
<term><varname>hba_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>hba_file</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 호스트 기반 인증(통상적으로 <filename>pg_hba.conf</filename>라고 함)용 환경 설정 파일을 지정한다. 이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ident-file" xreflabel="ident_file">
<term><varname>ident_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ident_file</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 사용자 이름 매핑(통상적으로 <filename>pg_ident.conf</filename>라고 함)용 환경 설정 파일을 지정한다. 
 (<xref linkend="auth-username-maps"/> 참조)
 이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-external-pid-file" xreflabel="external_pid_file">
<term><varname>external_pid_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>external_pid_file</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버 관리 프로그램에서 사용하기 위해 서버가 생성해야 하는 추가 프로세스 ID(PID) 파일의 이름을 정한다. 
이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>
 </variablelist>

 <para>
기본 설치에서, 위의 것들 중 명시적으로 설정되는 매개 변수는 없다. 
대신, 데이터 디렉터리가 <option>-D</option> 커맨드 라인 옵션 또는 <envar>PGDATA</envar> 환경 변수로 지정되고, 모든 환경 설정 파일은 데이터 디렉터리에 위치한다.
 </para>

 <para>
데이터 디렉터리가 아닌 다른 곳에 환경 설정 파일을 저장하고 싶으면 <command>postgres</command> <option>-D</option> 커맨드 라인 옵션 또는 <envar>PGDATA</envar> 환경 변수가 환경 설정 파일이 있는 곳의 위치를 가리켜야 하고, 
데이터 디렉터리가 실제로 어디에 있는지를 보여주는 <varname>data_directory</varname> 매개 변수는 <filename>postgresql.conf</filename>(또는 커맨드 라인에서)에 설정되어야 한다. 
<varname>data_directory</varname>는 환경 설정 파일의 위치가 아니라 데이터 디렉터리의 위치에 대해 <option>-D</option> 및 <envar>PGDATA</envar>를 오버라이드한다.
files.
 </para>

 <para>
<varname>config_file</varname>, 
<varname>hba_file</varname> 및/또는 <varname>ident_file</varname> 매개 변수를 사용하여 환경 설정 파일의 이름과 위치를 개별적으로 지정할 수 있다. 
<varname>config_file</varname>은 <command>postgres</command> 커맨드 라인에서만 지정 가능하고, 기타 파일은 메인 환경 설정 파일 내에 설정할 수 있다. 
이 3가지 매개 변수와 <varname>data_directory</varname>가 명시적으로 설정되는 경우, <option>-D</option>와 <envar>PGDATA</envar>를 지정할 필요 없다.
 </para>

 <para>
이 3가지 매개 변수는 설정 시 <command>postgres</command>가 시작된 디렉터리의 상대 경로로 해석된다.
 </para>
 </sect1>

 <sect1 id="runtime-config-connection">
<title>연결 및 인증</title>

<sect2 id="runtime-config-connection-settings">
 <title>접속 설정</title>

 <variablelist>

 <varlistentry id="guc-listen-addresses" xreflabel="listen_addresses">
<term><varname>listen_addresses</varname> (<type>string</type>)
<indexterm>
 <primary><varname>listen_addresses</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 서버가 클라이언트 애플리케이션으로부터의 연결을 listen하는 TCP/IP 주소를 지정한다. 
 값은 호스트 이름 및/또는 숫자 IP 주소가 쉼표로 구분된 형태를 취한다. 
 특수 입력 <literal>*</literal>는 사용 가능한 IP 인터페이스 모두를 뜻한다. 
 <literal>0.0.0.0</literal>은 모든 IPv4 주소에 대해 listen하며, <literal>::</literal>는 모든 IPv6 주소에 대해 listen한다. 
 목록이 빈칸이면 서버가 IP 인터페이스를 일절 listen하지 않으며, 이런 경우 Unix 도메인 소켓만 사용해서 연결할 수 있다. 
 기본값은 <systemitem class="systemname">localhost</systemitem>이며, 로컬 TCP/IP <quote>루프백</quote> 연결이 만들어진다. 
 클라이언트 인증(<xref
 linkend="client-authentication"/>)으로 서버 접근에 대한 권한을 세분화할 수 있는 경우, 
 <varname>listen_addresses</varname>는 연결 시도를 수락하는 인터페이스를 제어함으로써 안전하지 않은 네트워크 인터페이스 상에서 악의적 연결 요청이 반복되는 것을 방지할 수 있다. 
 이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-port" xreflabel="port">
<term><varname>port</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>port</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
기본적으로 서버가 listen하는 TCP 포트는 5432이다. 
서버가 listen하는 모든 IP 주소에 동일한 포트 번호가 사용된다. 
이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-connections" xreflabel="max_connections">
<term><varname>max_connections</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_connections</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터베이스 서버로의 동시 연결 최대 수를 결정한다. 
기본값은 일반적으로 100개 연결이지만 커널 설정이 지원하지 않는 경우 여기에 미치지 못할 수 있다(<application>initdb</application> 중에 결정됨). 
이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>

 <para>
대기 서버 실행 중에 사용자는 max_connections를 마스터 서버 값보다 크거나 같게 설정해야 한다. 
그렇지 않으면 대기 서버에서 쿼리가 허용되지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-superuser-reserved-connections"
 xreflabel="superuser_reserved_connections">
<term><varname>superuser_reserved_connections</varname>
(<type>integer</type>)
<indexterm>
 <primary><varname>superuser_reserved_connections</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<productname>PostgreSQL</productname> 슈퍼유저의 연결용으로 예약된 연결 <quote>슬롯</quote> 수를 결정한다. 
최대 <xref linkend="guc-max-connections"/> 연결 수가 동시에 활성화된다. 
활성화된 동시 연결 수가 <varname>max_connections</varname>에서 <varname>superuser_reserved_connections</varname>를 뺀 값 이상이면 슈퍼유저만 새롭게 연결되고 복제 연결은 되지 않는다.
 </para>

 <para>
기본값은 3이고, <varname>max_connections</varname> 수
 미만이어야 한다.
이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-unix-socket-directories" xreflabel="unix_socket_directories">
<term><varname>unix_socket_directories</varname> (<type>string</type>)
<indexterm>
 <primary><varname>unix_socket_directories</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버가 클라이언트 애플리케이션 연결을 listen하는 도메인 소켓의 디렉터리를 지정한다. 
복수 디렉터리를 쉼표로 구분하여 나열하면 복수 소켓을 생성할 수 있다. 항목 간 공백은 무시된다. 
이름에 공백이나 쉼표를 넣어야 하는 경우 디렉터리 이름 앞뒤에 이중따옴표를 사용한다. 
값을 빈칸으로 두면 Unix 도메인 소켓에서 일절 listen하지 않는다. 이때 TCP/IP 소켓만 서버에 연결하는 데 사용될 수 있다. 
기본값은 통상 <filename>/tmp</filename>이지만, 빌드 시에는 변경
가능하다.  윈도우즈에서는 이 설정의 기본값이 빈값이다.  기본적으로
유닉스-도메인 소켓을 사용하지 않는다.  이 매개 변수는 서버 시작
시에만 설정 가능하다.
 </para>

 <para>
소켓 외에도, 파일 자체의 이름도 <literal>.s.PGSQL.<replaceable>nnnn</replaceable></literal>이다. 
여기서 <replaceable>nnnn</replaceable>은 서버의 포트 번호이며, 
이름이 <literal>.s.PGSQL.<replaceable>nnnn</replaceable>.lock</literal>인 일반 파일은 각각의 <varname>unix_socket_directories</varname> 디렉터리에 생성된다. 
어떤 파일이든 수동으로 삭제하면 절대 안 된다.
 </para>

</listitem>
 </varlistentry>

 <varlistentry id="guc-unix-socket-group" xreflabel="unix_socket_group">
<term><varname>unix_socket_group</varname> (<type>string</type>)
<indexterm>
 <primary><varname>unix_socket_group</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
Unix 도메인 소켓의 소유자 그룹을 설정한다. 
(소켓을 소유한 사용자는 항상 서버를 시작하는 사용자이다.) 
<varname>unix_socket_permissions</varname> 매개 변수와 함께 
unix_socket_group을 Unix 도메인 연결용 추가 액세스 
제어 메커니즘으로 사용할 수 있다.  기본적으로 unix_socket_group은 
빈 문자열이며, 서버 사용자의 기본 그룹을 사용한다.  이 매개
변수는 서버 시작 시에만 설정 가능하다.
 </para>

 <para>
이 매개 변수는 윈도우즈에서는 지원하지 않는다.  모든
설정값은 무시된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-unix-socket-permissions" xreflabel="unix_socket_permissions">
<term><varname>unix_socket_permissions</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>unix_socket_permissions</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
Unix 도메인 소켓의 액세스 권한을 설정한다. Unix 도메인 소켓은 일반적인 Unix 파일 시스템 권한 집합을 사용한다. 
매개 변수 값은, <function>chmod</function> 및 <function>umask</function> 시스템 쉘에서 수용되는 숫자 형식을 따른다(관례적인 8진수 형식을 사용하려면 <literal>0</literal>(영)으로 시작되는 숫자여야 한다.).
 </para>

 <para>
기본 권한은 누구나 연결 가능한 <literal>0777</literal>이다. 
합리적인 다른 대안은 <literal>0770</literal>(사용자와 그룹만. <varname>unix_socket_group</varname> 참조) 및 <literal>0700</literal>(사용자만)이다. 
(Unix 도메인 소켓의 경우 쓰기 권한에만 해당되는 문제이므로, 읽기 설정이나 취소 또는 실행 권한과는 무관하다.)
 </para>

 <para>
이러한 액세스 제어 메커니즘은 <xref linkend="client-authentication"/>에 설명된 것과는 별개이다.
 </para>

 <para>
이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>

 <para>
이 매개 변수는 특히 현재 Solaris 10인 Solaris 시스템과 무관하다. 
Solaris는 소켓 권한을 완전히 무시한다. 
원하는 대상 그룹(audience)에 한정된 검색 권한을 갖고 있는 디렉터리를 <varname>unix_socket_directories</varname>로 하여 유사한 효과를 낼 수 있다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-bonjour" xreflabel="bonjour">
<term><varname>bonjour</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>bonjour</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<productname>Bonjour</productname>를 통해 서버의 존재를 알린다. 기본값은 off이다. 이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-bonjour-name" xreflabel="bonjour_name">
<term><varname>bonjour_name</varname> (<type>string</type>)
<indexterm>
 <primary><varname>bonjour_name</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<productname>Bonjour</productname> 서비스 이름을 지정한다. 
이 매개 변수가 비어 있는 string <literal>''</literal>으로 설정된 경우 컴퓨터 이름이 사용된다(기본값). 
서버가 <productname>Bonjour</productname> 지원으로 컴파일되지 않은 경우 이 매개 변수가 무시된다. 
이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-tcp-keepalives-idle" xreflabel="tcp_keepalives_idle">
<term><varname>tcp_keepalives_idle</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>tcp_keepalives_idle</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
        네트워크 활동이 없는 클라이언트가 연결을 정상적인 연결을 하고 있는지
        OS가 TCP keepalive 메시지를 보내는 간격이다.
        단위를 지정하지 않으면 초단위로 간주한다.
        0 (기본값)을 지정하면,  OS 설정값을 사용한다.
이 매개 변수는
<symbol>TCP_KEEPIDLE</symbol> 또는 이에 상응하는 소켓 옵션을 지원하는
시스템과 Windows에서만 지원되며, 그 외 시스템에서는 0이어야 한다. 
Unix 도메인 소켓을 통해 연결된 세션에서 이 매개 변수는 무시되고 항상 0으로 읽힌다.
 </para>
 <note>
<para>
 Windows는 시스템 기본값을 읽을 수 있는 방법이 없으므로 Windows에서 0 값은 이 매개 변수가 2시간으로 설정된다.
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-tcp-keepalives-interval" xreflabel="tcp_keepalives_interval">
<term><varname>tcp_keepalives_interval</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>tcp_keepalives_interval</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
클라이언트에 의해 승인되지 않은 TCP keepalive 메시지를 재전송하기 전에 대기하는 초 수를 지정한다. 
0 (기본값)을 지정하면,  OS 설정값을 사용한다.  이 매개 변수는 <symbol>TCP_KEEPINTVL</symbol> 설정 또는
이에 상응하는 소켓 옵션을 지원하는 시스템과 Windows에서만 지원되며,
그 외 시스템에서는 0이어야 한다. 
Unix 도메인 소켓을 통해 연결된 세션에서 이 매개 변수는 무시되고 항상 0으로 읽힌다.
 </para>
 <note>
<para>
 Windows는 시스템 기본값을 읽을 수 있는 방법이 없으므로 Windows에서 0 값은 이 매개 변수가 1초로 설정된다.
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-tcp-keepalives-count" xreflabel="tcp_keepalives_count">
<term><varname>tcp_keepalives_count</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>tcp_keepalives_count</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
몇 개의 TCP keepalive 메시지를 분실해야 클라이언트와 서버의 연결 상태를 dead로 판단하는 기준이 되는 지를 정한다. 
0 (기본값)을 지정하면,  OS 설정값을 사용한다.  이 매개 변수는 
<symbol>TCP_KEEPCNT</symbol> 설정 또는 이에 상응하는 소켓 옵션을 지원하는 시스템에서만 지원되며, 
그 외 시스템에서는 0이어야 한다.
Unix 도메인 소켓을 통해 연결된 세션에서 이 매개 변수는 무시되고 항상 0으로 읽힌다.
 </para>
 <note>
<para>
 이 매개 변수는 Windows에서 지원되지 않으며, 0이어야 한다.
</para>
 </note>
</listitem>
 </varlistentry>

     <varlistentry id="guc-tcp-user-timeout" xreflabel="tcp_user_timeout">
      <term><varname>tcp_user_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_user_timeout</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Specifies the amount of time that transmitted data may
        remain unacknowledged before the TCP connection is forcibly closed.
        If this value is specified without units, it is taken as milliseconds.
        0 (기본값)을 지정하면,  OS 설정값을 사용한다.
        이 매개 변수는 OS <symbol>TCP_USER_TIMEOUT</symbol>
        설정을 지원하는 경우만 지원되며, 그 외 OS에서는
        0 이어야한다.
        유닉스-도메인 소켓을 사용하는 세션에서는
        이 값이 무시되며, 항상 0으로 간주한다.
       </para>
       <note>
        <para>
         이 매개 변수는 Windows에서 지원되지 않으며, 0이어야 한다.
        </para>
       </note>
      </listitem>
     </varlistentry>


 </variablelist>
 </sect2>
 <sect2 id="runtime-config-connection-authentication">
 <title>인증</title>

 <variablelist>
 <varlistentry id="guc-authentication-timeout" xreflabel="authentication_timeout">
<term><varname>authentication_timeout</varname> (<type>integer</type>)
<indexterm><primary>timeout</primary><secondary>클라이언트 인증</secondary></indexterm>
<indexterm><primary>클라이언트 인증</primary><secondary>timeout during</secondary></indexterm>
<indexterm>
 <primary><varname>authentication_timeout</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>

<listitem>
 <para>
클라이언트 인증이 완료되는 최대 시간. 접속하고자 하는 클라이언트가 이 시간 내에
인증 프로토콜이 완료되지 않은 경우 서버가 연결을 닫는다. 
단위를 지정하지 않으면 초로 간주한다.
이로써 응답이 없는 클라이언트가 연결을 무기한 점유하는 것을 방지한다. 기본값은 1분이다(<literal>1m</literal>). 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-password-encryption" xreflabel="password_encryption">
      <term><varname>password_encryption</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>password_encryption</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        When a password is specified in <xref linkend="sql-createrole"/> or
        <xref linkend="sql-alterrole"/>, this parameter determines the algorithm
        to use to encrypt the password. The default value is <literal>md5</literal>,
        which stores the password as an MD5 hash (<literal>on</literal> is also
        accepted, as alias for <literal>md5</literal>). Setting this parameter to
        <literal>scram-sha-256</literal> will encrypt the password with SCRAM-SHA-256.
       </para>
       <para>
        Note that older clients might lack support for the SCRAM authentication
        mechanism, and hence not work with passwords encrypted with
        SCRAM-SHA-256.  See <xref linkend="auth-password"/> for more details.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-server-keyfile" xreflabel="krb_server_keyfile">
      <term><varname>krb_server_keyfile</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>krb_server_keyfile</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Sets the location of the server's Kerberos key file.  The default is
        <filename>FILE:/usr/local/pgsql/etc/krb5.keytab</filename>
        (where the directory part is whatever was specified
        as <varname>sysconfdir</varname> at build time; use
        <literal>pg_config --sysconfdir</literal> to determine that).
        If this parameter is set to an empty string, it is ignored and a
        system-dependent default is used.
        This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
        See <xref linkend="gssapi-auth"/> for more information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-caseins-users" xreflabel="krb_caseins_users">
      <term><varname>krb_caseins_users</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>krb_caseins_users</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Sets whether GSSAPI user names should be treated
        case-insensitively.
        The default is <literal>off</literal> (case sensitive). This parameter can only be
        set in the <filename>postgresql.conf</filename> file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-db-user-namespace" xreflabel="db_user_namespace">
      <term><varname>db_user_namespace</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>db_user_namespace</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This parameter enables per-database user names.  It is off by default.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>

       <para>
        If this is on, you should create users as <replaceable>username@dbname</replaceable>.
        When <replaceable>username</replaceable> is passed by a connecting client,
        <literal>@</literal> and the database name are appended to the user
        name and that database-specific user name is looked up by the
        server. Note that when you create users with names containing
        <literal>@</literal> within the SQL environment, you will need to
        quote the user name.
       </para>

       <para>
        With this parameter enabled, you can still create ordinary global
        users.  Simply append <literal>@</literal> when specifying the user
        name in the client, e.g. <literal>joe@</literal>.  The <literal>@</literal>
        will be stripped off before the user name is looked up by the
        server.
       </para>

       <para>
        <varname>db_user_namespace</varname> causes the client's and
        server's user name representation to differ.
        Authentication checks are always done with the server's user name
        so authentication methods must be configured for the
        server's user name, not the client's.  Because
        <literal>md5</literal> uses the user name as salt on both the
        client and server, <literal>md5</literal> cannot be used with
        <varname>db_user_namespace</varname>.
       </para>

       <note>
        <para>
         This feature is intended as a temporary measure until a
         complete solution is found.  At that time, this option will
         be removed.
        </para>
       </note>
      </listitem>
     </varlistentry>
     </variablelist>
     </sect2>

     <sect2 id="runtime-config-connection-ssl">
     <title>SSL</title>

     <para>
      See <xref linkend="ssl-tcp"/> for more information about setting up SSL.
     </para>

     <variablelist>
 <varlistentry id="guc-ssl" xreflabel="ssl">
<term><varname>ssl</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>ssl</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<acronym>SSL</acronym> 연결을 설정한다.
이 매개 변수는 서버 시작 시에만 설정 가능하다. <acronym>SSL</acronym> 통신은 유일하게 TCP/IP 연결만 가능하다.
기본값은 <literal>off</literal>이다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-ca-file" xreflabel="ssl_ca_file">
<term><varname>ssl_ca_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_ca_file</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
SSL 서버 인증 기관(CA)이 포함된 파일 이름을 지정한다.  상대
경로를 사용하면, 그 기준 디렉터리는 데이터 디렉터리다.  이
설정은 <filename>postgresql.conf</filename> 파일 또는 서버 실행 명령 옵션에서만
지정 가능하다.  기본값은,
로드된 CA 파일이 없고 클라이언트 인증서 검증이 수행되지 않음을 뜻하는 빈칸이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-cert-file" xreflabel="ssl_cert_file">
<term><varname>ssl_cert_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_cert_file</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
SSL 서버 인증서가 포함된 파일 이름을 지정한다.  상대
경로를 사용하면, 그 기준 디렉터리는 데이터 디렉터리다. 이
설정은 <filename>postgresql.conf</filename> 파일 또는 서버 실행 명령 옵션에서만
지정 가능하다.  기본값은
<filename>server.crt</filename>이다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-crl-file" xreflabel="ssl_crl_file">
<term><varname>ssl_crl_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_crl_file</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
SSL 서버 인증서 해지 목록(CRL)이 포함된 파일 이름을 지정한다.  상대
경로를 사용하면, 그 기준 디렉터리는 데이터 디렉터리다.  이
설정은 <filename>postgresql.conf</filename> 파일 또는 서버 실행 명령 옵션에서만
지정 가능하다.  기본값은,
로드된 CRL 파일이 없음을 뜻하는 빈칸이다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-key-file" xreflabel="ssl_key_file">
<term><varname>ssl_key_file</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_key_file</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
SSL 서버 개인 키가 포함된 파일 이름을 지정한다.  상대
경로를 사용하면, 그 기준 디렉터리는 데이터 디렉터리다. 이
설정은 <filename>postgresql.conf</filename> 파일 또는 서버 실행 명령 옵션에서만
지정 가능하다.  기본값은
<filename>server.key</filename>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-ciphers" xreflabel="ssl_ciphers">
<term><varname>ssl_ciphers</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_ciphers</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
        Specifies a list of <acronym>SSL</acronym> cipher suites that are
        allowed to be used by SSL connections.  See the
        <citerefentry><refentrytitle>ciphers</refentrytitle></citerefentry>
        manual page in the <application>OpenSSL</application> package for the
        syntax of this setting and a list of supported values.  Only
        connections using TLS version 1.2 and lower are affected.  There is
        currently no setting that controls the cipher choices used by TLS
        version 1.3 connections.  The default value is
        <literal>HIGH:MEDIUM:+3DES:!aNULL</literal>.  The default is usually a
        reasonable choice unless you have specific security requirements.
       </para>

       <para>
        이 설정은 <filename>postgresql.conf</filename> 파일 또는 서버 실행
        명령행 옵션에서만 지정할 수 있다.
 </para>

 <para>
기본값 설명:
<variablelist>
 <varlistentry>
<term><literal>HIGH</literal></term>
<listitem>
 <para>
<literal>HIGH</literal> 그룹에서 cipher를 사용하는 Cipher 스위트(예: AES, Camellia, 3DES)
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><literal>MEDIUM</literal></term>
<listitem>
 <para>
<literal>MEDIUM</literal> 그룹에서 cipher를 사용하는 Cipher 스위트(예: RC4, SEED)
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><literal>+3DES</literal></term>
<listitem>
 <para>
<literal>HIGH</literal> 에 대한 OpenSSL 기본 순서는 3DES 서열이 AES128보다 높기 때문에 문제가 된다. 
3DES는 AES128보다 보안 수준이 떨어지고 느리기까지 하므로 이것은 잘못된 것이다. <literal>+3DES</literal>는 다른 모든 <literal>HIGH</literal> 및 <literal>MEDIUM</literal> cipher 뒤로 재배치한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><literal>!aNULL</literal></term>
<listitem>
 <para>
인증이 없는 익명의 cipher 스위트를 실행하지 않는다. 
해당 cipher 스위트는 중간자(man-in-the-middle) 공격에 취약하므로 사용해서는 안 된다.
 </para>
</listitem>
 </varlistentry>
</variablelist>
 </para>

 <para>
사용 가능한 cipher 스위트 상세 내역은 OpenSSL 버전에 따라 달라진다. 
현재 설치된 <application>OpenSSL</application> 버전에 대한 실제 상세 내역은 <literal>openssl ciphers -v 'HIGH:MEDIUM:+3DES:!aNULL'</literal> 명령을 사용해야 한다. 
이 목록은 서버 키 유형에 따라 런타임 시 필터링된다는 점에 유의해야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-prefer-server-ciphers" xreflabel="ssl_prefer_server_ciphers">
<term><varname>ssl_prefer_server_ciphers</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>ssl_prefer_server_ciphers</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
  SSL cipher 기본 설정을 서버 것으로 사용할 것인지, 클라이언트
  것으로 사용할 것인지 지정한다.  
  이 설정은 <filename>postgresql.conf</filename> 파일 또는 서버 실행 명령 옵션에서만
  지정 가능하다.
  기본값은 <literal>on</literal>이다.  
 </para>

 <para>
다른 PostgreSQL 버전은 이 설정이 없으며, 항상 클라이언트 기본 설정을 사용한다. 
이 설정은 주로 해당 버전의 이전 버전과의 호환성에 대한 것이다. 
서버가 적절하게 환경 설정되어 있을 가능성이 높으므로 보통은 서버의 기본 설정을 사용하는 것이 더 낫다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-ssl-ecdh-curve" xreflabel="ssl_ecdh_curve">
<term><varname>ssl_ecdh_curve</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_ecdh_curve</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
  <acronym>ECDH</acronym> 키 교환에서 사용할 곡선 이름을
  지정한다.  연결하는 모든 클라이언트에서 지원되어야
  한다.  서버의 타원 곡선 키에서 사용되는 것과 동일한
  곡선일 필요는 없다.  
  이 설정은 <filename>postgresql.conf</filename> 파일 또는 서버 실행 명령 옵션에서만
  지정 가능하다.
  기본값은 <literal>prime256v1</literal>이다.
 </para>

 <para>
  가장 일반적인 곡선의 OpenSSL 이름: 
  <literal>prime256v1</literal> (NIST P-256), 
  <literal>secp384r1</literal> (NIST P-384), 
  <literal>secp521r1</literal> (NIST P-521).
  사용 가능한 곡선의 전체 목록은 <command>openssl ecparam -list_curves</command> 명령을 사용하면 표시할 수 있다. 
  그렇더라도 모든 곡선을 <acronym>TLS</acronym>에서 사용할 수 있는 것은 아니다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-ssl-min-protocol-version" xreflabel="ssl_min_protocol_version">
      <term><varname>ssl_min_protocol_version</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>ssl_min_protocol_version</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Sets the minimum SSL/TLS protocol version to use.  Valid values are
        currently: <literal>TLSv1</literal>, <literal>TLSv1.1</literal>,
        <literal>TLSv1.2</literal>, <literal>TLSv1.3</literal>.  Older
        versions of the <productname>OpenSSL</productname> library do not
        support all values; an error will be raised if an unsupported setting
        is chosen.  Protocol versions before TLS 1.0, namely SSL version 2 and
        3, are always disabled.
       </para>

       <para>
        The default is <literal>TLSv1.2</literal>, which satisfies industry
        best practices as of this writing.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-max-protocol-version" xreflabel="ssl_max_protocol_version">
      <term><varname>ssl_max_protocol_version</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>ssl_max_protocol_version</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Sets the maximum SSL/TLS protocol version to use.  Valid values are as
        for <xref linkend="guc-ssl-min-protocol-version"/>, with addition of
        an empty string, which allows any protocol version.  The default is to
        allow any version.  Setting the maximum protocol version is mainly
        useful for testing or if some component has issues working with a
        newer protocol.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-dh-params-file" xreflabel="ssl_dh_params_file">
      <term><varname>ssl_dh_params_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_dh_params_file</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Specifies the name of the file containing Diffie-Hellman parameters
        used for so-called ephemeral DH family of SSL ciphers. The default is
        empty, in which case compiled-in default DH parameters used. Using
        custom DH parameters reduces the exposure if an attacker manages to
        crack the well-known compiled-in DH parameters. You can create your own
        DH parameters file with the command
        <command>openssl dhparam -out dhparams.pem 2048</command>.
       </para>

       <para>
        이 설정은 <filename>postgresql.conf</filename> 파일 또는 서버 실행 명령 옵션에서만
        지정 가능하다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-passphrase-command" xreflabel="ssl_passphrase_command">
      <term><varname>ssl_passphrase_command</varname> (<type>string</type>)
<indexterm>
 <primary><varname>ssl_passphrase_command</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
        Sets an external command to be invoked when a passphrase for
        decrypting an SSL file such as a private key needs to be obtained.  By
        default, this parameter is empty, which means the built-in prompting
        mechanism is used.
 </para>

 <para>
        The command must print the passphrase to the standard output and exit
        with code 0.  In the parameter value, <literal>%p</literal> is
        replaced by a prompt string.  (Write <literal>%%</literal> for a
        literal <literal>%</literal>.)  Note that the prompt string will
        probably contain whitespace, so be sure to quote adequately.  A single
        newline is stripped from the end of the output if present.
       </para>
       <para>
        The command does not actually have to prompt the user for a
        passphrase.  It can read it from a file, obtain it from a keychain
        facility, or similar.  It is up to the user to make sure the chosen
        mechanism is adequately secure.
       </para>
       <para>
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-ssl-passphrase-command-supports-reload" xreflabel="ssl_passphrase_command_supports_reload">
      <term><varname>ssl_passphrase_command_supports_reload</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>ssl_passphrase_command_supports_reload</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
        This parameter determines whether the passphrase command set by
        <varname>ssl_passphrase_command</varname> will also be called during a
        configuration reload if a key file needs a passphrase.  If this
        parameter is off (the default), then
        <varname>ssl_passphrase_command</varname> will be ignored during a
        reload and the SSL configuration will not be reloaded if a passphrase
        is needed.  That setting is appropriate for a command that requires a
        TTY for prompting, which might not be available when the server is
        running.  Setting this parameter to on might be appropriate if the
        passphrase is obtained from a file, for example.
 </para>

<para>
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
</para>
</listitem>
 </varlistentry>

</variablelist>
</sect2>
 </sect1>

 <sect1 id="runtime-config-resource">
<title>리소스 소비</title>

<sect2 id="runtime-config-resource-memory">
 <title>메모리</title>

 <variablelist>
 <varlistentry id="guc-shared-buffers" xreflabel="shared_buffers">
<term><varname>shared_buffers</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>shared_buffers</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터베이스 서버가 공유 메모리 버퍼용으로 사용하는 메모리 양을 설정한다. 
기본값은 일반적으로 128메가바이트(<literal>128MB</literal>)이지만
커널 설정에서 지원하지 않는 경우 여기에 미치지 못할 수
있다(<application>initdb</application> 중에 결정됨). 
이 설정은 최소 128킬로바이트여야 한다. 단, 
최소값보다 훨씬 큰 설정은 일반적으로 우수한 성능이 필요할 때 사용된다. 
단위를 지정하지 않으면 블록수로 간주하며, 그 단위는
<symbol>BLCKSZ</symbol> 바이트이다. 통상 8kB.
        (<symbol>BLCKSZ</symbol> 값이 바뀌면 최소값도 바뀐다.)
        이 매개 변수값은 서버를 시작할 때만 지정할 수 있다.
 </para>

 <para>
RAM이 1GB 이상인 전용 데이터베이스 서버를 사용하는 경우 <varname>shared_buffers</varname>의 적절한 시작 값은 시스템 메모리의 25%이다. 
일부 작업 부하는 <varname>shared_buffers</varname>에 대한 설정이 클수록 효과적이지만, <productname>PostgreSQL</productname> 역시 운영 체제 캐시에 의존적이므로 시스템 효율을 위해 
40% 이상의 RAM을 <varname>shared_buffers</varname>에 할당하는 것은 좋지 않다.
장시간에 걸쳐 대량의 새 데이터 또는 변경된 데이터 쓰기 프로세스를 실행하기 위해 <varname>shared_buffers</varname>를 더 크게 설정하면 <varname>checkpoint_segments</varname>에서도 그에 맞게 설정을 증가시켜야 한다.
 </para>

 <para>
시스템 RAM이 1GB 미만인 경우에는 운영 체제를 위한 적정 공간이 필요하므로 RAM 비율을 더 작게 하는 것이 맞다.
 </para>

</listitem>
 </varlistentry>

 <varlistentry id="guc-huge-pages" xreflabel="huge_pages">
<term><varname>huge_pages</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>huge_pages</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
        Controls whether huge pages are requested for the main shared memory
        area. Valid values are <literal>try</literal> (the default),
        <literal>on</literal>, and <literal>off</literal>.  With
        <varname>huge_pages</varname> set to <literal>try</literal>, the
        server will try to request huge pages, but fall back to the default if
        that fails. With <literal>on</literal>, failure to request huge pages
        will prevent the server from starting up. With <literal>off</literal>,
        huge pages will not be requested.
 </para>

 <para>
        현재, 이 설정은 리눅스와 윈도우즈에서만 사용할 수 있다.  다른 
        시스템에서 <literal>try</literal>로 설정하면, 그 설정은 무시한다.
 </para>

 <para>
huge pages 페이지의 사용은 결과적으로 메모리 관리에 더 작은 페이지 테이블과 더 짧은 CPU 시간으로 이어지고 성능도 증가한다. 리눅스 huge page에 대한 자세한
내용은 <xref linkend="linux-huge-pages"/>을 참조 바란다.
 </para>

 <para>
        Huge pages are known as large pages on Windows.  To use them, you need to
        assign the user right Lock Pages in Memory to the Windows user account
        that runs <productname>PostgreSQL</productname>.
        You can use Windows Group Policy tool (gpedit.msc) to assign the user right
        Lock Pages in Memory.
        To start the database server on the command prompt as a standalone process,
        not as a Windows service, the command prompt must be run as an administrator or
        User Access Control (UAC) must be disabled. When the UAC is enabled, the normal
        command prompt revokes the user right Lock Pages in Memory when started.
       </para>

       <para>
        Note that this setting only affects the main shared memory area.
        Operating systems such as Linux, FreeBSD, and Illumos can also use
        huge pages (also known as <quote>super</quote> pages or
        <quote>large</quote> pages) automatically for normal memory
        allocation, without an explicit request from
        <productname>PostgreSQL</productname>. On Linux, this is called
        <quote>transparent huge pages</quote><indexterm><primary>transparent
        huge pages</primary></indexterm> (THP). That feature has been known to
        cause performance degradation with
        <productname>PostgreSQL</productname> for some users on some Linux
        versions, so its use is currently discouraged (unlike explicit use of
        <varname>huge_pages</varname>).
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-temp-buffers" xreflabel="temp_buffers">
<term><varname>temp_buffers</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>temp_buffers</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
        데이터베이스 각 세션이 사용하는 임시 버퍼의 최대 수를
        설정한다.  임시 테이블에 액세스하는 용도로만 사용되는
        세션 로컬 버퍼가 있다. 
        단위를 지정하지 않으면 블록수로 간주한다.
        블록 크기는 <symbol>BLCKSZ</symbol> 바이트이며, 통상 8kB다.
        기본값은 8메가바이트(<literal>8MB</literal>)이다. 
        (<symbol>BLCKSZ</symbol> 값이 8kB가 아니면, 기본값도 그 값에 비례한다.)
        설정은 개별 세션 내에서 변경할 수 있지만 세션 내 임시 테이블을
        처음 사용하기 전에만 가능하다.  이후에 값을 변경하면 해당 세션에서 효과가 없다.
 </para>

 <para>
세션은 <varname>temp_buffers</varname>에 설정된 한계까지, 필요한 임시 버퍼를 할당한다. 
실제로는 임시 버퍼가 많이 필요 없는 세션에서 큰 값을 설정하는 데 드는 비용은 버퍼 디스크립터 또는 <varname>temp_buffers</varname> 증가별로 약 64바이트에 불과하다. 
그러나 버퍼가 실제로 사용되는 경우에는 8192바이트가 추가로 필요하다(또는 일반적으로 <symbol>BLCKSZ</symbol> 바이트).
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-prepared-transactions" xreflabel="max_prepared_transactions">
<term><varname>max_prepared_transactions</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_prepared_transactions</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
동시에 <quote>준비된</quote> 상태일 수 있는 트랜잭션의 최대 수를 설정한다(<xref
linkend="sql-prepare-transaction"/> 참조).
 </para>

 <para>
준비된 트랜잭션을 사용할 계획이 없으면 이 매개 변수는 0으로 설정하여 준비된 트랜잭션을 생성하는 실수를 방지해야 한다. 
준비된 트랜잭션을 사용하는 경우 <varname>max_prepared_transactions</varname>가 최소한 <xref linkend="guc-max-connections"/> 이상이 되도록 설정하여 세션은 준비된 트랜잭션을 보류시킬 수 있다.
 </para>

 <para>
대기 서버 실행 중에 이 매개 변수를 마스터 서버 값보다 크거나 같게 설정해야 한다. 그렇지 않으면 대기 서버에서 쿼리가 허용되지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-work-mem" xreflabel="work_mem">
<term><varname>work_mem</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>work_mem</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
임시 디스크 파일을 쓰기 전에 내부 정렬 명령 및 해시 테이블에서
사용되는 기본 최대 메모리 양을 지정한다. 
단위를 지정하지 않으면 kB로 간주한다. 
기본값은 4메가바이트이다(<literal>4MB</literal>).  복잡한
쿼리의 경우 몇 가지 정렬 또는 해시 명령이 병렬로 실행될 수 있다. 
각각의 명령은 데이터를 임시 파일에 쓰기 전에 이 값에 지정된 크기만큼 메모리를 사용할 것이다.
또는 실행 중인 여러 세션은 해당 명령을 동시에 실행할 수도 있다.  따라서
사용될 총 메모리는 <varname>work_mem</varname>의 몇배가 될 것이다.
값을 선택할 때 이러한 사실을 유념할 필요가 있다.  정렬 명령은
<literal>ORDER BY</literal>, <literal>DISTINCT</literal> 및 머지 조인에 사용된다. 
해시 테이블은 해시 조인, 해시 기반 집계(aggregation),
<literal>IN</literal> 서브쿼리의 해시 기반 처리에 사용된다.
 </para>

       <para>
        Hash-based operations are generally more sensitive to memory
        availability than equivalent sort-based operations.  The
        memory available for hash tables is computed by multiplying
        <varname>work_mem</varname> by
        <varname>hash_mem_multiplier</varname>.  This makes it
        possible for hash-based operations to use an amount of memory
        that exceeds the usual <varname>work_mem</varname> base
        amount.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-hash-mem-multiplier" xreflabel="hash_mem_multiplier">
      <term><varname>hash_mem_multiplier</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>hash_mem_multiplier</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Used to compute the maximum amount of memory that hash-based
        operations can use.  The final limit is determined by
        multiplying <varname>work_mem</varname> by
        <varname>hash_mem_multiplier</varname>.  The default value is
        1.0, which makes hash-based operations subject to the same
        simple <varname>work_mem</varname> maximum as sort-based
        operations.
       </para>
       <para>
        Consider increasing <varname>hash_mem_multiplier</varname> in
        environments where spilling by query operations is a regular
        occurrence, especially when simply increasing
        <varname>work_mem</varname> results in memory pressure (memory
        pressure typically takes the form of intermittent out of
        memory errors).  A setting of 1.5 or 2.0 may be effective with
        mixed workloads.  Higher settings in the range of 2.0 - 8.0 or
        more may be effective in environments where
        <varname>work_mem</varname> has already been increased to 40MB
        or more.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-maintenance-work-mem" xreflabel="maintenance_work_mem">
<term><varname>maintenance_work_mem</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>maintenance_work_mem</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>VACUUM</command>, <command>CREATE
INDEX</command> 및 <command>ALTER TABLE ADD FOREIGN KEY</command> 같은 유지보수 명령에서 사용되는 최대 메모리 양을 지정한다. 
단위를 지정하지 않으면 kB로 간주한다.
기본값은 64메가바이트이다(<literal>64MB</literal>). 이러한 명령은 데이터베이스 세션에서 한 번에 하나만 실행할 수 있으며, 정상 설치에는 동시 실행되는 명령이 여러 개 있을 수 없다. 
이 값은 <varname>work_mem</varname>보다 훨씬 큰 값으로 설정하는 것이 안전하다. 설정값이 큰 경우에는 vacuuming 및 데이터베이스 덤프 복구 성능이 개선될 수 있다.
 </para>
 <para>
autovacuum 실행 시 이 메모리에서 <xref linkend="guc-autovacuum-max-workers"/>의 배수로 할당할 수 있으므로 기본값을 너무 높게 설정하지 않도록 해야 한다. 
<xref linkend="guc-autovacuum-work-mem"/>을 별도 설정하여 이것을 관리하는 것이 유용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-work-mem" xreflabel="autovacuum_work_mem">
<term><varname>autovacuum_work_mem</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_work_mem</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
각각의 autovacuum worker 프로세스에서 사용되는 최대 메모리 양을 지정한다. 
단위를 지정하지 않으면, kB로 간주한다.
기본값은 <xref linkend="guc-maintenance-work-mem"/> 값을 대신 사용해야 함으로 나타내는 -1이다. 
다른 컨텍스트에서 실행하는 경우 이 설정은 <command>VACUUM</command>의 동작에 효과가 없다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-logical-decoding-work-mem" xreflabel="logical_decoding_work_mem">
      <term><varname>logical_decoding_work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>logical_decoding_work_mem</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Specifies the maximum amount of memory to be used by logical decoding,
        before some of the decoded changes are written to local disk. This
        limits the amount of memory used by logical streaming replication
        connections. It defaults to 64 megabytes (<literal>64MB</literal>).
        Since each replication connection only uses a single buffer of this size,
        and an installation normally doesn't have many such connections
        concurrently (as limited by <varname>max_wal_senders</varname>), it's
        safe to set this value significantly higher than <varname>work_mem</varname>,
        reducing the amount of decoded changes written to disk.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-max-stack-depth" xreflabel="max_stack_depth">
<term><varname>max_stack_depth</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_stack_depth</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버 실행 스택의 최대 안전 깊이를 지정한다. 
이 매개 변수의 이상적인 설정은 커널이 강제로 지정한 안전 마진(safety margin)에서 약간 부족한 실제 스택 크기 제한이다(<literal>ulimit -s</literal>에 의해 설정된 대로, 또는 로컬과 동등). 
모든 루틴이 아니라 잠재적 재귀 루틴 중 중요한 것만 스택 깊이가 검사되기 때문에, 안전 마진(safety margin)이 필요하다.  단위를 지정하지 않으면, kB로 간주한다.
기본 설정은, 기본적으로 적게 잡고 충돌 가능성이 낮은 2메가바이트이다(<literal>2MB</literal>). 그러나, 설정값이 너무 작으면 복합 함수의 실행이 어려울 수 있다. 슈퍼유저만 이 설정을 변경할 수 있다.
 </para>

 <para>
실제 커널 제한보다 <varname>max_stack_depth</varname>를 큰 값으로 설정하면 런어웨이 재귀 함수가 개별 백엔드 프로세스와 충돌할 수 있다. 
<productname>PostgreSQL</productname>이 커널 제한을 결정할 수 있는 플랫폼에서 서버는 이 변수가 불안정한 값으로 설정되는 것을 허용하지 않는다. 
그러나 모든 플랫폼이 정보를 제공하지는 않으므로 값 선택 시 신중을 기해야 한다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-shared-memory-type" xreflabel="shared_memory_type">
      <term><varname>shared_memory_type</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>shared_memory_type</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Specifies the shared memory implementation that the server
        should use for the main shared memory region that holds
        <productname>PostgreSQL</productname>'s shared buffers and other
        shared data.  Possible values are <literal>mmap</literal> (for
        anonymous shared memory allocated using <function>mmap</function>),
        <literal>sysv</literal> (for System V shared memory allocated via
        <function>shmget</function>) and <literal>windows</literal> (for Windows
        shared memory).  Not all values are supported on all platforms; the
        first supported option is the default for that platform.  The use of
        the <literal>sysv</literal> option, which is not the default on any
        platform, is generally discouraged because it typically requires
        non-default kernel settings to allow for large allocations (see <xref
        linkend="sysvipc"/>).
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-dynamic-shared-memory-type" xreflabel="dynamic_shared_memory_type">
<term><varname>dynamic_shared_memory_type</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>dynamic_shared_memory_type</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버가 사용해야 하는 동적 공유 메모리 구현을 지정한다. 
가능한 값은 <literal>posix</literal>(<literal>shm_open</literal>을 사용하여 할당된 POSIX 공유 메모리의 경우), <literal>sysv</literal>(<literal>shmget</literal>을 통해 할당된 System V 공유 메모리의 경우), 
<literal>windows</literal>(Windows 공유 메모리의 경우), <literal>mmap</literal>(데이터 디렉터리에 저장된 메모리 맵 파일을 사용하는 공유 메모리 시뮬레이션). 몇몇 플랫폼에서는 일부 값이 지원되지 않는다. 
첫 번째 지원 옵션은 해당 플랫폼의 기본값이다. 플랫폼에서 기본값이 아닌 <literal>mmap</literal> 옵션의 사용은 일반적으로 권장되지 않는다. 
이유는 운영 체제가 수정된 페이지를 디스크에 반복해서 다시 쓰면서 시스템 I/O 로드가 늘어나기 때문이다. 
그러나, <literal>pg_dynshmem</literal> 디렉터리를 RAM 디스크에 저장하거나 다른 공유 메모리 기능을 사용할 수 없는 경우에는 디버깅용으로 유용하다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
 </sect2>

 <sect2 id="runtime-config-resource-disk">
 <title>디스크</title>

 <variablelist>
 <varlistentry id="guc-temp-file-limit" xreflabel="temp_file_limit">
<term><varname>temp_file_limit</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>temp_file_limit</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
정렬 및 해시 임시 파일 같은 임시 파일 또는 보류된 커서용 저장소 파일에 프로세스가
사용할 수 있는 디스크 공간의 최대 크기를 지정한다. 
이 제한을 초과하는 트랜잭션은 취소된다. 
단위를 지정하지 않으면, kB로 간주한다.
<literal>-1</literal>(기본값)은 무제한을 의미한다. 슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
 <para>
이 설정은 주어진 <productname>PostgreSQL</productname> 프로세스에 의해 동시에 사용되는
모든 임시 파일의 총 공간을 제한한다. 
쿼리 실행 시 은밀하게 사용되는 임시 파일과 달리, 명시적 임시 테이블용으로 사용되는 디스크 공간은 이 제한에 합산되지 <emphasis>않는다</emphasis>는 점에 유의해야 한다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
 </sect2>

 <sect2 id="runtime-config-resource-kernel">
 <title>커널 리소스 사용량</title>

 <variablelist>
 <varlistentry id="guc-max-files-per-process" xreflabel="max_files_per_process">
<term><varname>max_files_per_process</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_files_per_process</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버 하위 프로세스별로 허용된 동시 개방 파일의 최대 수를 설정한다. 기본값은 1000개 파일이다. 
커널이 프로세스별 안전 한계를 강제하는 경우 이 설정은 신경 쓸 필요가 없다. 
그러나 일부 플랫폼(특히, 대부분의 BSD 시스템)에서, 여러 개의 프로세스가 모두 다수의 파일을 열려고 시도하면 커널은 시스템이 실제로 지원하는 것보다 훨씬 더 많은 파일을 개별 프로세스가 여는 것을 허용한다. 
<quote>Too many open files</quote> 실패가 나타난 경우 이 설정을 줄여야 한다. 이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>
 </variablelist>
</sect2>

<sect2 id="runtime-config-resource-vacuum-cost">
 <title>비용 기반 청소 지연</title>

 <para>
<xref linkend="sql-vacuum"/> 및 <xref linkend="sql-analyze"/> 명령 실행 중에는 다양한 I/O 명령을 수행하는 데 드는 예상 비용을 추적하는 내부 카운터가 시스템에서 유지된다. 
누적 비용이 제한값(<varname>vacuum_cost_limit</varname>으로 지정)에 도달하면 <varname>vacuum_cost_delay</varname>에서 지정된 값만큼 명령을 수행하는 프로세스가 잠깐 슬립 상태가 된다. 
그런 다음, 카운터가 리셋되고 실행이 계속된다.
 </para>

 <para>
이 기능으로 관리자는 데이터베이스 동시 작업 시 이러한 명령들이 I/O에 주는 부담을 완화시킬 수 있다. 
<command>VACUUM</command> 및 <command>ANALYZE</command> 같은 유지보수 명령의 신속한 마무리가 바람직하지 않은 상황도 다수 있다. 
그러나, 일반적으로는 이러한 명령 때문에 다른 데이터베이스 명령을 수행 중인 시스템 능력이 저해되지 않게 하는 것이 중요하다. 
비용 기반 vacuum 지연은 관리자가 이것을 수행하는 방법을 제공한다.
 </para>

 <para>
<command>VACUUM</command> 명령을 직접 실행한 경우 기본값에 의해 이 기능이 사용되지 않는다. 
사용하는 것으로 설정하려면 <varname>vacuum_cost_delay</varname> 변수를 0 이외의 값으로 설정해야 한다.
value.
 </para>

 <variablelist>
<varlistentry id="guc-vacuum-cost-delay" xreflabel="vacuum_cost_delay">
 <term><varname>vacuum_cost_delay</varname> (<type>floating point</type>)
 <indexterm>
<primary><varname>vacuum_cost_delay</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 비용 제한을 초과한 경우 프로세스가 슬립하는 시간.
단위를 지정하지 않으면 밀리세컨드로 간주한다. 기본값은,
비용 기반 vacuum 지연 기능을 사용하지 않는 0이다. 
 양수 값은 비용 기반 vacuuming을 사용하는 것으로 설정된다.
</para>

<para>
 비용 기반 vacuuming을 사용하는 경우 <varname>vacuum_cost_delay</varname>는 일반적으로 매우 작으며,
보통 1ms 보다 적은 값을 사용한다.  
<varname>vacuum_cost_delay</varname> 값으로 소수값을 사용할 수 있지만, 
옛날 OS인 경우는 이 계산이 정확하지 않을 수 있다.  이런 OS에서는
이 값을 1ms 이상 지정할 수 있으며, 이 때는 다른 vacuum 비용 관련 설정들을 
바꿀 필요가 있다.  그럼에도 불구하고, <varname>vacuum_cost_delay</varname> 값은
최대한 작은 값을 사용해야한다. 큰 값은 도움이 되지 않는다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-vacuum-cost-page-hit" xreflabel="vacuum_cost_page_hit">
 <term><varname>vacuum_cost_page_hit</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>vacuum_cost_page_hit</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 공유 버퍼 캐시에 있는 버퍼 vacuuming의 예상 비용. 
 이것은 버퍼 풀을 잠그고, 공유 해시 테이블을 조회하고 페이지 내용을 스캔 하는 비용을 나타낸다. 기본값은 1이다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-vacuum-cost-page-miss" xreflabel="vacuum_cost_page_miss">
 <term><varname>vacuum_cost_page_miss</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>vacuum_cost_page_miss</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 디스크에서 읽어온 버퍼를 vacuuming하는 데 드는 예상 비용. 
 이것은 버퍼 풀을 잠그고, 공유 해시 테이블을 조회하고, 디스크에어 원하는 블록을 읽고, 내용을 스캔하는 비용을 나타낸다. 기본값은 10이다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-vacuum-cost-page-dirty" xreflabel="vacuum_cost_page_dirty">
 <term><varname>vacuum_cost_page_dirty</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>vacuum_cost_page_dirty</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 이전에 클린한 블록을 vacuum이 수정하는 경우 예상 비용. 이것은 dirty 블록을 디스크에 다시 쓰는 데 필요한 추가 I/O를 나타낸다. 기본값은 20이다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-vacuum-cost-limit" xreflabel="vacuum_cost_limit">
 <term><varname>vacuum_cost_limit</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>vacuum_cost_limit</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 vacuuming 프로세스를 슬립 시키는 누적 비용. 기본값은 200이다.
</para>
 </listitem>
</varlistentry>
 </variablelist>

 <note>
<para>
 일부 명령은 critical locks을 갖고 있으며 따라서, 이러한 명령은 가능한 한 신속하게 완료해야 한다. 
 해당 명령이 수행되는 중에는 비용 기반 vacuum 지연이 발생하지 않는다. 따라서, 지정된 제한보다 비용이 훨씬 더 많이 누적될 수도 있다. 
 이런 경우 쓸데없이 긴 지연을 방지하기 위해 실제 지연은 최대값이 <varname>vacuum_cost_delay</varname> * 4인 <varname>vacuum_cost_delay</varname> * <varname>accumulated_balance</varname> / <varname>vacuum_cost_limit</varname>으로 계산된다. 
</para>
 </note>
</sect2>

<sect2 id="runtime-config-resource-background-writer">
 <title>Background Writer</title>

 <para>
<firstterm>background writer</firstterm>라는 별도의 서버 프로세스가
있는데, 그 기능은 <quote>dirty</quote>(신규 또는 수정) 공유 버퍼의
쓰기 작업을 실행하는 것이다.  When the number of clean shared buffers appears to be
      insufficient, the background writer writes some dirty buffers to the
      file system and marks them as clean.  This reduces the likelihood
      that server processes handling user queries will be unable to find
      clean buffers and have to write dirty buffers themselves.
그러나, 반복적으로 미기록(dirty)된 페이지가 checkpoint 간격당
한 번만 기록될 수 있는 반면, 동일한 간격에서 미기록된 경우 
background writer가 여러 번 기록할 수 있으므로 background writer는
최종적으로 I/O 로드의 전반적인 증가를 초래한다. 
이 절에서 논의된 매개 변수는 로컬로 필요한 동작을 조절하는 데 이용할 수 있다.
 </para>

 <variablelist>
<varlistentry id="guc-bgwriter-delay" xreflabel="bgwriter_delay">
 <term><varname>bgwriter_delay</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>bgwriter_delay</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 background writer의 작업 라운드 사이의 지연을 지정한다.  각
라운드에서 writer는 몇 개의 dirty 버퍼(다음 매개 변수로 조절 가능)에
대해 쓰기를 실행한다.  그런 다음, <varname>bgwriter_delay</varname> 시간
동안 슬립한 다음, 반복한다.  버퍼 풀에 dirty 버퍼가 없으면, 
<varname>bgwriter_delay</varname>와 무관하게 장기 슬립으로 들어간다. 
단위를 지정하지 않으면 ms로 간주한다.  기본값은
200밀리초이다(<literal>200ms</literal>).  다수의 시스템에서 슬립 지연의
효율적인 설정은 10밀리초이다.  <varname>bgwriter_delay</varname>를 10의
배수가 아닌 다른 값으로 설정하면 10의 배수로 값을 올림하여 설정한 것과
결과가 동일하다.  이 매개 변수는 <filename>postgresql.conf</filename> 파일
또는 서버 명령행 옵션값으로만 설정 가능하다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-bgwriter-lru-maxpages" xreflabel="bgwriter_lru_maxpages">
 <term><varname>bgwriter_lru_maxpages</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>bgwriter_lru_maxpages</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 각 라운드에서 이것보다 큰 버퍼 수는 백그라운드 writer에 의해 쓰기가 되지 않는다. 
 이것을 0으로 설정하면 백그라운드 쓰기가 사용되지 않는다. (별도의 전용 보조 프로세스에 의해 관리되는 해당 checkpoints는 영향을 받지 않는다.) 
 기본값은 100개 버퍼이다. 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
</para>
 </listitem>
</varlistentry>

<varlistentry id="guc-bgwriter-lru-multiplier" xreflabel="bgwriter_lru_multiplier">
 <term><varname>bgwriter_lru_multiplier</varname> (<type>floating point</type>)
 <indexterm>
<primary><varname>bgwriter_lru_multiplier</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 각 라운드에 쓰기 된 dirty 버퍼의 수는 최근 라운드 중에 서버 프로세스가 필요로 했던 새 버퍼 수를 근거로 한다. 
 최근의 평균 요구량은 다음 라운드에서 필요한 버퍼 추정치에 도달하도록 <varname>bgwriter_lru_multiplier</varname>를 곱한다. 
 깨끗하고 재사용 가능한 버퍼 수가 지정된 개수가 될 때까지 dirty 버퍼는 쓰여진다. (그렇더라도 라운드당 <varname>bgwriter_lru_maxpages</varname> 이상의 버퍼는 쓰여지지 않는다.) 
 따라서, 1.0 설정은 정확히 필요한 버퍼 수를 기록하는 <quote>just in time</quote> 정책을 나타낸다. 
 더 큰 값을 설정하면 수요 급증에 대비할 수 있는 반면, 더 작은 값은 쓰기를 서버 프로세스가 처리하도록 일부러 미처리 상태로 방치한다. 기본값은 2.0이다. 
 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
</para>
 </listitem>
</varlistentry>

      <varlistentry id="guc-bgwriter-flush-after" xreflabel="bgwriter_flush_after">
       <term><varname>bgwriter_flush_after</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bgwriter_flush_after</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
         Whenever more than this amount of data has
         been written by the background writer, attempt to force the OS to issue these
         writes to the underlying storage.  Doing so will limit the amount of
         dirty data in the kernel's page cache, reducing the likelihood of
         stalls when an <function>fsync</function> is issued at the end of a checkpoint, or when
         the OS writes data back in larger batches in the background.  Often
         that will result in greatly reduced transaction latency, but there
         also are some cases, especially with workloads that are bigger than
         <xref linkend="guc-shared-buffers"/>, but smaller than the OS's page
         cache, where performance might degrade.  This setting may have no
         effect on some platforms.
         If this value is specified without units, it is taken as blocks,
         that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
         The valid range is between
         <literal>0</literal>, which disables forced writeback, and
         <literal>2MB</literal>.  The default is <literal>512kB</literal> on Linux,
         <literal>0</literal> elsewhere.  (If <symbol>BLCKSZ</symbol> is not 8kB,
         the default and maximum values scale proportionally to it.)
         <symbol>BLCKSZ</symbol> change the default and maximum.)
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line.
        </para>
       </listitem>
      </varlistentry>
 </variablelist>

 <para>
<varname>bgwriter_lru_maxpages</varname> 및 <varname>bgwriter_lru_multiplier</varname> 값을 더 작게 설정하면 백그라운드 writer에 의한 가외 I/O 로드는 줄어들지만, 서버 프로세스가 자체적으로 쓰기를 실행해야 하므로 쿼리 인터랙션이 지연될 가능성이 높다.
 </para>
</sect2>

<sect2 id="runtime-config-resource-async-behavior">
 <title>비동기 동작</title>

 <variablelist>
<varlistentry id="guc-effective-io-concurrency" xreflabel="effective_io_concurrency">
 <term><varname>effective_io_concurrency</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>effective_io_concurrency</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 <productname>PostgreSQL</productname>가 동시에 실행 가능할 것으로 예상하는 동시 디스크 I/O 실행 수를 설정한다. 이 값을 올리면 각 <productname>PostgreSQL</productname> 세션이 병렬 초기화를 시도하는 I/O 실행 수가 늘어난다. 
 허용 범위는 1 ~ 1000, 또는 비동기 I/O 요청의 실행을 비활성화하는 0이다. 현재, 이 설정은 비트맵 힙 스캔에만 영향을 미친다.
</para>

<para>
 일반 하드 디스크인 경우,
 이 설정을 위한 권장 시작점은 데이터베이스에서 사용되는 RAID 0 스트라이프
 또는 RAID 1 미러를 환경 설정하는 개별 드라이브 수이다. 
 (RAID 5의 경우 패리티 드라이브 수는 계산하지 않는다. ) 그러나 동시 세션에서 여러 개의 쿼리가 실행된 상태에서 데이터베이스가 매우 바쁠 경우, 디스크 배열을 busy 상태로 유지하기 위해서는 적은 값도 충분하다. 
 디스크를 busy한 상태로 만들기 위해 필요 이상으로 큰 값을 설정하면 CPU 오버헤드만 가중된다.
 SSD나 기타 메모리 기반 스토리지인 경우는 동시 요청이 빈번할 수 있다,
 이런 경우는 이 값을 수백으로 지정하는 것이 더 효과적이다.
</para>

<para>
 비동기 I/O는 효과적인 <function>posix_fadvise</function> 함수에 따라 달라지며, 이것이
 운영 체제에 없을 수도 있다. 이 함수가 없을 경우 이 매개 변수를 0 이외의
 다른 것으로 설정하면 에러가 발생한다. 
 일부 운영 체제(예: Solaris)에는 함수가 존재하지만 실제로는 아무것도 하지 않는다.
</para>

<para>
         The default is 1 on supported systems, otherwise 0.  This value can
         be overridden for tables in a particular tablespace by setting the
         tablespace parameter of the same name (see
         <xref linkend="sql-altertablespace"/>).
</para>
 </listitem>
</varlistentry>

      <varlistentry id="guc-maintenance-io-concurrency" xreflabel="maintenance_io_concurrency">
       <term><varname>maintenance_io_concurrency</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>maintenance_io_concurrency</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
         Similar to <varname>effective_io_concurrency</varname>, but used
         for maintenance work that is done on behalf of many client sessions.
        </para>
        <para>
         The default is 10 on supported systems, otherwise 0.  This value can
         be overridden for tables in a particular tablespace by setting the
         tablespace parameter of the same name (see
         <xref linkend="sql-altertablespace"/>).
        </para>
       </listitem>
      </varlistentry>

<varlistentry id="guc-max-worker-processes" xreflabel="max_worker_processes">
 <term><varname>max_worker_processes</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>max_worker_processes</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 시스템이 지원할 수 있는 백그라운드 프로세스의 최대 수를 설정한다.  이 매개 변수는
 서버 시작 시에만 설정 가능하다. 기본값은 8.
</para>

<para>
 대기 서버 실행 중에는 이 매개 변수를 마스터 서버 값보다 크거나 같게
 설정해야 한다.  그렇지 않으면 대기 서버에서 쿼리가 허용되지 않는다.
</para>

       <para>
         이 설정값을 바꾼다면,
         <xref linkend="guc-max-parallel-workers"/>,
         <xref linkend="guc-max-parallel-workers-maintenance"/> 값과
         <xref linkend="guc-max-parallel-workers-per-gather"/> 값도 같이 고려해야 한다.
        </para>
 </listitem>
</varlistentry>

      <varlistentry id="guc-max-parallel-workers-per-gather" xreflabel="max_parallel_workers_per_gather">
       <term><varname>max_parallel_workers_per_gather</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_parallel_workers_per_gather</varname> 환경 설정 매개 변수</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
         Sets the maximum number of workers that can be started by a single
         <literal>Gather</literal> or <literal>Gather Merge</literal> node.
         Parallel workers are taken from the pool of processes established by
         <xref linkend="guc-max-worker-processes"/>, limited by
         <xref linkend="guc-max-parallel-workers"/>.  Note that the requested
         number of workers may not actually be available at run time.  If this
         occurs, the plan will run with fewer workers than expected, which may
         be inefficient.
         기본값은 2이며, 0으로 지정하면 병렬 쿼리를 사용하지 않는다.
        </para>

        <para>
         병렬 쿼리는 상당히 많은 자원을 소모할 수 있으며, 그 이유는
         각 작업 프로세스가 시스템에서 추가되는 사용자 세션에 완전히
         분리되어, 거의 동일한 영향을 주기
         때문이다.  <xref linkend="guc-work-mem"/> 설정과 같은 자원
         사용 설정에 대한 값들은 이를 고려해야
         한다.  <varname>work_mem</varname>과 같은 자원 사용의 제한 설정들은
         각 작업자에 따라 개별적으로 적용되며 이는 전체 사용량이 단일
         프로세스보다 훨씬 더 높을 수 있음을 의미한다.  예를 들면,
         4개의 작업자를 사용하는 병렬 쿼리는 CPU 시간, 메모리, I/O
         대역폭으로 5배나 더 많이 사용할 수 있다.
        </para>

        <para>
         병렬 쿼리에 대한 보다 자세한 내용은
         <xref linkend="parallel-query"/>에서 다룬다.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-parallel-workers-maintenance" xreflabel="max_parallel_maintenance_workers">
       <term><varname>max_parallel_maintenance_workers</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_parallel_maintenance_workers</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
         Sets the maximum number of parallel workers that can be
         started by a single utility command.  Currently, the parallel
         utility commands that support the use of parallel workers are
         <command>CREATE INDEX</command> only when building a B-tree index,
         and <command>VACUUM</command> without <literal>FULL</literal>
         option.  Parallel workers are taken from the pool of processes
         established by <xref linkend="guc-max-worker-processes"/>, limited
         by <xref linkend="guc-max-parallel-workers"/>.  Note that the requested
         number of workers may not actually be available at run time.
         If this occurs, the utility operation will run with fewer
         workers than expected.  The default value is 2.  Setting this
         value to 0 disables the use of parallel workers by utility
         commands.
        </para>

        <para>
         Note that parallel utility commands should not consume
         substantially more memory than equivalent non-parallel
         operations.  This strategy differs from that of parallel
         query, where resource limits generally apply per worker
         process.  Parallel utility commands treat the resource limit
         <varname>maintenance_work_mem</varname> as a limit to be applied to
         the entire utility command, regardless of the number of
         parallel worker processes.  However, parallel utility
         commands may still consume substantially more CPU resources
         and I/O bandwidth.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-parallel-workers" xreflabel="max_parallel_workers">
       <term><varname>max_parallel_workers</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_parallel_workers</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
         Sets the maximum number of workers that the system can support for
         parallel operations.  The default value is 8.  When increasing or
         decreasing this value, consider also adjusting
         <xref linkend="guc-max-parallel-workers-maintenance"/> and
         <xref linkend="guc-max-parallel-workers-per-gather"/>.
         Also, note that a setting for this value which is higher than
         <xref linkend="guc-max-worker-processes"/> will have no effect,
         since parallel workers are taken from the pool of worker processes
         established by that setting.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-backend-flush-after" xreflabel="backend_flush_after">
       <term><varname>backend_flush_after</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>backend_flush_after</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
         Whenever more than this amount of data has
         been written by a single backend, attempt to force the OS to issue
         these writes to the underlying storage.  Doing so will limit the
         amount of dirty data in the kernel's page cache, reducing the
         likelihood of stalls when an fsync is issued at the end of a
         checkpoint, or when the OS writes data back in larger batches in the
         background.  Often that will result in greatly reduced transaction
         latency, but there also are some cases, especially with workloads
         that are bigger than <xref linkend="guc-shared-buffers"/>, but smaller
         than the OS's page cache, where performance might degrade.  This
         setting may have no effect on some platforms.
         If this value is specified without units, it is taken as blocks,
         that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
         The valid range is
         between <literal>0</literal>, which disables forced writeback,
         and <literal>2MB</literal>.  The default is <literal>0</literal>, i.e., no
         forced writeback.  (If <symbol>BLCKSZ</symbol> is not 8kB,
         the maximum value scales proportionally to it.)
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-old-snapshot-threshold" xreflabel="old_snapshot_threshold">
       <term><varname>old_snapshot_threshold</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>old_snapshot_threshold</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
         Sets the minimum amount of time that a query snapshot can be used
         without risk of a <quote>snapshot too old</quote> error occurring
         when using the snapshot.  Data that has been dead for longer than
         this threshold is allowed to be vacuumed away.  This can help
         prevent bloat in the face of snapshots which remain in use for a
         long time.  To prevent incorrect results due to cleanup of data which
         would otherwise be visible to the snapshot, an error is generated
         when the snapshot is older than this threshold and the snapshot is
         used to read a page which has been modified since the snapshot was
         built.
        </para>

        <para>
         If this value is specified without units, it is taken as minutes.
         A value of <literal>-1</literal> (the default) disables this feature,
         effectively setting the snapshot age limit to infinity.
         This parameter can only be set at server start.
        </para>

        <para>
         Useful values for production work probably range from a small number
         of hours to a few days.  Small values (such as <literal>0</literal> or
         <literal>1min</literal>) are only allowed because they may sometimes be
         useful for testing.  While a setting as high as <literal>60d</literal> is
         allowed, please note that in many workloads extreme bloat or
         transaction ID wraparound may occur in much shorter time frames.
        </para>

        <para>
         When this feature is enabled, freed space at the end of a relation
         cannot be released to the operating system, since that could remove
         information needed to detect the <quote>snapshot too old</quote>
         condition.  All space allocated to a relation remains associated with
         that relation for reuse only within that relation unless explicitly
         freed (for example, with <command>VACUUM FULL</command>).
        </para>

        <para>
         This setting does not attempt to guarantee that an error will be
         generated under any particular circumstances.  In fact, if the
         correct results can be generated from (for example) a cursor which
         has materialized a result set, no error will be generated even if the
         underlying rows in the referenced table have been vacuumed away.
         Some tables cannot safely be vacuumed early, and so will not be
         affected by this setting, such as system catalogs.  For such tables
         this setting will neither reduce bloat nor create a possibility
         of a <quote>snapshot too old</quote> error on scanning.
        </para>
       </listitem>
      </varlistentry>
 </variablelist>
</sect2>
 </sect1>

 <sect1 id="runtime-config-wal">
<title>Write Ahead 로그</title>

 <para>
이 설정의 조정에 대한 자세한 내용은 <xref linkend="wal-configuration"/>을 참조 바란다.
 </para>

<sect2 id="runtime-config-wal-settings">
 <title>설정</title>
 <variablelist>

 <varlistentry id="guc-wal-level" xreflabel="wal_level">
<term><varname>wal_level</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>wal_level</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
   <varname>wal_level</varname>은 WAL에 기록되는 정보의 양을 결정한다.  기본값은 
   WAL 아카이빙과 대기 서버에서 읽기 전용 쿼리를 사용할 수 있는 
   복제 환경을 구축할 수 있는
   <literal>replica</literal>이다.  <literal>minimal</literal>로 지정하면,
   서버 비정상 종료 뒤 서버를 복구하기 위한 최소한의 정보만 남긴다.
   복구용으로 쓰기 위해 따로 보관하고, 대기 서버에서 읽기 전용 쿼리에 필요한
   정보를 좀 더 추가한다.  마지막으로 <literal>logical</literal>은 논리적 디코딩을
   지원하는 데 필요한 정보를 추가한다.  각 레벨에는 모두 저수준에서
   로깅된 정보가 포함된다. 이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>

 <para>
        <literal>minimal</literal> 수준에서는, 릴레이션을 만들거나
        다시 만들때, 트랜잭션 로그에 세부 정보를 남기지 않는다.  그래서,
        다음 작업들이 다른 수준 보다 빠르게 실행된다 (<xref
        linkend="populate-pitr"/> 참조).  최적화된 작업들:
<simplelist>
         <member><command>ALTER ... SET TABLESPACE</command></member>
         <member><command>CLUSTER</command></member>
         <member><command>CREATE TABLE</command></member>
         <member><command>REFRESH MATERIALIZED VIEW</command>
         (<option>CONCURRENTLY</option> 옵션 없는)</member>
         <member><command>REINDEX</command></member>
         <member><command>TRUNCATE</command></member>
</simplelist>
그러나 최소 WAL에는 베이스 백업 및 WAL 로그로부터 데이터를 재구성하는
데 필요한 정보가 충분하지 않으므로 WAL 아카이빙(<xref linkend="guc-archive-mode"/>)
및 스트리밍 복제를 하려면 <literal>replica</literal> 이상을 사용해야 한다.
 </para>

 <para>
<literal>logical</literal> 레벨에서 <literal>replica</literal>를 사용하는 것과 동일한 정보 및 WAL로부터 논리적 변경 집합을 사용하는 데 필요한 정보가 로깅된다. <literal>logical</literal> 레벨을 사용하면 WAL 볼륨이 증가한다. 
특히 여러 개의 테이블을 <literal>REPLICA IDENTITY FULL</literal>로 환경 설정하고 <command>UPDATE</command> 및 <command>DELETE</command> 문을 여러 개 실행하는 경우 그렇다.
 </para>

       <para>
        9.6 이전 버전에서는 이 설정값으로 <literal>archive</literal>,
        <literal>hot_standby</literal> 두 값을 쓸 수 있었다.  하위 호환성을
        위에 이 설정값을 사용할 수 있으며, 이들은 모두
        <literal>replica</literal>로 처리된다.
       </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-fsync" xreflabel="fsync">
<term><varname>fsync</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>fsync</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 매개 변수가 on인 경우 <productname>PostgreSQL</productname> 서버는 업데이트가 물리적으로 디스크에 기록되었는지를 <function>fsync()</function> 시스템 호출 또는 상응하는 다양한 메서드(<xref linkend="guc-wal-sync-method"/> 참조)를 사용하여 확인하려고 한다. 
이로써 운영 체제 또는 하드웨어 충돌 후에 데이터베이스 클러스터를 일정한 상태로 복구할 수 있다.
 </para>

 <para>
<varname>fsync</varname>를 해제하는 것은 성능상 장점이 있지만, 결과적으로는 정전 또는 시스템 충돌의 경우에 데이터 손상이 복구 불가능할 수 있다. 
따라서 외부 데이터로 전체 데이터베이스를 손쉽게 재생성할 수 있는 경우에만 <varname>fsync</varname>를 해제하는 것이 바람직하다.
 </para>

 <para>
데이터베이스를 사용한 후에 데이터베이스를 폐기 및 재생성하는 데이터 일괄 처리용이거나, 
빈번하게 재생성되고 장애처리(failover)용으로 사용되지 않는 읽기 전용 데이터베이스 클론인 경우에 백업 파일로부터 새 데이터베이스 클러스터를 처음 로딩하는 것을 <varname>fsync</varname>의 해제가 안전한 환경의 예시로 볼 수 있다. 
고성능 하드웨어 단독으로는 <varname>fsync</varname>를 해제하는 합당한 이유가 될 수 없다.
 </para>

 <para>
<varname>fsync</varname>를 해제했다가 다시 설정하는 경우 복구 신뢰도를 위해 커널에서 변경된 모든 버퍼를 내구성이 좋은 저장소로 강제 이동하는 것이 필요하다. 
이것은 클러스터가 셧다운 중이거나 <varname>fsync</varname>가 on일 때 <command>initdb
--sync-only</command>를 실행하거나, <command>sync</command>를 실행하거나, 파일 시스템의 마운트를 해제하거나, 서버를 리부팅함으로써 가능하다.
 </para>

 <para>
여러 가지 상황에서 중요하지 않은 트랜잭션에 대해 <xref linkend="guc-synchronous-commit"/>를 해제하면 데이터 충돌 위험 없이 <varname>fsync</varname>를 해제함으로써 잠재적인 성능상 장점을 다수 얻을 수 있다.
 </para>

 <para>
<varname>fsync</varname>는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정할 수 있다. 이 매개 변수를 해제할 경우 <xref linkend="guc-full-page-writes"/>의 해제도 고려해야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-synchronous-commit" xreflabel="synchronous_commit">
<term><varname>synchronous_commit</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>synchronous_commit</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
       <para>
        클라이언트에게 <quote>success</quote>를 반환하기 전, 디스크에 WAL 값이
        쓰여질 때까지 트랜잭션 커밋을 대기시킬 것인지 여부를 설정하는
        변수이다. <literal>remote_apply</literal>, <literal>on</literal>
        (기본값), <literal>remote_write</literal>, <literal>local</literal>,
        <literal>off</literal> 중 하나로 설정할 수 있다.
       </para>

       <para>
        <varname>synchronous_standby_names</varname> 값이 없을 경우엔
        <literal>on</literal> / <literal>off</literal> 만 의미있으며, 
        <literal>remote_apply</literal>, <literal>remote_write</literal>,
        <literal>local</literal> 모두 <literal>on</literal>으로 처리된다.
        <literal>off</literal> 설정이 아닌 경우, WAL 디스크 쓰기 작업은
        flush가 완료될 때까지 기다린다.
        <literal>off</literal> 로 설정할 경우 클라이언트에게
        success를 반환하는 시점과 서버 crash에 대해 트랜잭션의 안전이 보장되는
        시점 사이에 지연이 발생할 수 있다.  (최장 지연은
        <xref linkend="guc-wal-writer-delay"/>의 3배) 하지만
        <xref linkend="guc-fsync"/> 설정과 달리 이 설정값을 <literal>off</literal>로
        설정해도 DB 불일치가 발생하진 않는다:  OS나 DB crash로 인해 커밋된
        트랜잭션 일부가 손실될 수 있지만, DB는 해당 트랜잭션이 정상적으로
        종료된 것과 같은 상태이다.  따라서 트랜잭션의 내구성보다 성능이
        우선시되는 경우에 <varname>synchronous_commit</varname>을 끄면(off) 유용하다.
        (<xref linkend="wal-async-commit"/> 참조)
       </para>

       <para>
        만약 <xref linkend="guc-synchronous-standby-names"/>가 설정되어있다면,
        이 설정은 대기 서버로 WAL 값이 복제될 때까지 트랜잭션 커밋을 기다릴
        것인지도 제어한다.
       </para>

       <para>
        <literal>remote_apply</literal>로
        설정하면, 대기 서버가 트랜잭션의 커밋 레코드를 받고 그것을 적용시켰다는
        응답이 올 때까지 커밋은 대기한다.  따라서 대기 서버에서 쿼리를 확인할
        수 있다. 
        <literal>on</literal>으로 설정하면, 현재 동기화된
        대기 서버가 트랜잭션의 커밋 레코드를 받았고, 그것을 디스크에
        flush했음을 나타낼 때까지 커밋은 대기한다. 이 경우 대기 서버의 스토리지가
        손상되지 않는 한 트랜잭션은 손실되지 않는다.  
        <literal>remote_write</literal>로 설정된 경우, 대기 서버가 트랜잭션의
        커밋 레코드를 받아서 OS에 기록했다는 응답이 올 때까지 커밋은
        대기한다.  이 설정에선 데이터가 아직 스토리지에 도달하지 않았기 때문에
        대기 서버의 DB 인스턴스가 죽더라도 데이터는 보존된다.  하지만 대기
        서버의 OS 레벨에서 문제가 발생한 경우엔 데이터가 보존되지
        않는다.  마지막으로, <literal>local</literal>로 설정하면
        로컬에선 디스크로 flush될 때까지 기다리지만 복제에선 기다리지
        않는다.  바람직하진 않은 설정이지만 완전성을 위해 제공하고 있다.
       </para>

       <para>
        이 설정은 아무 때나 변경 가능하다; 한 트랜잭션에 대한 동작은
        트랜잭션이 커밋될 때 적용되는 설정에 따른다. 따라서 일부 트랜잭션은
        동기적으로, 다른 트랜잭션은 비동기적으로 커밋하는 것이
        가능하다. 예를 들어, 기본 값이 반대일 때 비동기적으로 단일
        multistatement 트랜잭션을 커밋하려면 세션 단에서 <command>SET LOCAL
        synchronous_commit TO OFF</command>를 수행하면 된다.
       </para>

       <para>
        <xref linkend="synchronous-commit-matrix"/> summarizes the
        capabilities of the <varname>synchronous_commit</varname> settings.
       </para>

       <table id="synchronous-commit-matrix">
        <title>synchronous_commit Modes</title>
        <tgroup cols="5">
         <colspec colname="col1" colwidth="1.5*"/>
         <colspec colname="col2" colwidth="1*"/>
         <colspec colname="col3" colwidth="1*"/>
         <colspec colname="col4" colwidth="1*"/>
         <colspec colname="col5" colwidth="1*"/>
         <thead>
          <row>
           <entry>synchronous_commit setting</entry>
           <entry>local durable commit</entry>
           <entry>standby durable commit after PG crash</entry>
           <entry>standby durable commit after OS crash</entry>
           <entry>standby query consistency</entry>
          </row>
         </thead>

         <tbody>

          <row>
           <entry>remote_apply</entry>
           <entry align="center">&bull;</entry>
           <entry align="center">&bull;</entry>
           <entry align="center">&bull;</entry>
           <entry align="center">&bull;</entry>
          </row>

          <row>
           <entry>on</entry>
           <entry align="center">&bull;</entry>
           <entry align="center">&bull;</entry>
           <entry align="center">&bull;</entry>
           <entry align="center"></entry>
          </row>

          <row>
           <entry>remote_write</entry>
           <entry align="center">&bull;</entry>
           <entry align="center">&bull;</entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
          </row>
         <row>
           <entry>off</entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
           <entry align="center"></entry>
          </row>

         </tbody>
        </tgroup>
       </table>
</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-sync-method" xreflabel="wal_sync_method">
<term><varname>wal_sync_method</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>wal_sync_method</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
디스크에 WAL을 강제로 업데이트할 때 사용되는 메서드. <varname>fsync</varname>가 off인 경우 WAL 파일을 일절 강제로 업데이트하지 않기 때문에 이 설정은 무관하다. 가능한 값은 다음과 같다.
 </para>
 <itemizedlist>
<listitem>
<para>
 <literal>open_datasync</literal> (<function>open()</function> 옵션 <symbol>O_DSYNC</symbol>를 사용하여 WAL 파일 쓰기)
</para>
</listitem>
<listitem>
<para>
 <literal>fdatasync</literal> (커밋마다 <function>fdatasync()</function> 호출)
</para>
</listitem>
<listitem>
<para>
 <literal>fsync</literal> (커밋마다 <function>fsync()</function> 호출)
</para>
</listitem>
<listitem>
<para>
 <literal>fsync_writethrough</literal> (커밋마다 <function>fsync()</function> 호출, 모든 디스크 쓰기 캐시에서 write-through 강제)
</para>
</listitem>
<listitem>
<para>
 <literal>open_sync</literal> (<function>open()</function> 옵션 <symbol>O_SYNC</symbol>를 사용하여 WAL 파일 쓰기)
</para>
</listitem>
 </itemizedlist>
 <para>
<literal>open_</literal>* 옵션도 필요 시 <literal>O_DIRECT</literal>를 사용한다. 이와 같은 선택이 항상 모든 플랫폼에서 가능한 것은 아니다. 
기본값은 플랫폼에서 지원되는 위의 목록에서 첫 번째 메서드이다. 
단, Linux와 FreeBSD에서는 <literal>fdatasync</literal>가 기본값이다. 기본값이 반드시 이상적인 것은 아니다. 
충돌로부터 안전한 환경 설정을 만들거나 성능을 최적화하려면 값을 변경하거나 시스템 환경 설정의 다른 측면을 변경하는 것이 필요할 수도 있다. 
이러한 측면은 <xref linkend="wal-reliability"/>에서 다룬다. 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-full-page-writes" xreflabel="full_page_writes">
<term><varname>full_page_writes</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>full_page_writes</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 매개 변수가 on이면, <productname>PostgreSQL</productname> 서버는 checkpoint 이후의 각 디스크 페이지를 처음 수정하는 도중에 해당 페이지의 전체 내용을 WAL에 기록한다. 
이것은, 운영 체제 충돌 시 진행 중인 페이지 쓰기가 부분적으로만 완료되어 디스크 상의 페이지에 옛날 데이터와 새 데이터가 공존할 수 있기 때문에 필요하다. 
일반적으로 WAL에 저장되는 행 수준(row-level) 변경 데이터는 충돌 후 복구 중에 그러한 페이지를 완전히 복구하는 데 충분하지 않다. 
전체 페이지 이미지를 저장하면 페이지의 올바른 복구가 보장되지만 WAL에 기록해야 하는 데이터량의 증가를 감수해야 한다. 
(WAL 리플레이는 항상 checkpoint에서 시작되므로 checkpoint 이후의 페이지별 첫 번째 변경 중에 해도 충분하다. 
그러므로 전체 페이지 쓰기 비용을 줄이는 한 가지 방법은 checkpoint 간격 매개 변수를 늘리는 것이다.)
 </para>

 <para>
이 매개 변수를 해제하면 정상적인 운영 속도가 빨라지지만 시스템 장애 발생 시 손상된 데이터가 복구 불가능하게 되거나 데이터 손상이 드러나지 않을 수 있다. 
이러한 위험은 규모는 작지만 <varname>fsync</varname>을 해제했을 때와 유사하며, 해당 매개 변수에 대해 권장되는 것과 환경이 동일할 때만 해제해야 한다.
 </para>

 <para>
이 매개 변수를 해제하는 것은 point-in-time recovery(PITR)용 WAL 아카이빙의 사용에는 영향을 미치지 않는다(<xref linkend="continuous-archiving"/> 참조).
 </para>

 <para>
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-log-hints" xreflabel="wal_log_hints">
<term><varname>wal_log_hints</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>wal_log_hints</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 매개 변수가 <literal>on</literal>이면, <productname>PostgreSQL</productname> 서버는 checkpoint 이후의 각 디스크 페이지를 처음 수정하는 도중에, 소위 힌트 비트(hint bits)의 중요하지 않은 수정에 대해서도 해당 페이지의 전체 내용을 WAL에 기록한다.
 </para>

 <para>
데이터 체크섬이 사용으로 설정되면 힌트 비트(hint bit) 업데이트가 항상 WAL 로깅되고 이 설정은 무시된다. 
데이터베이스에서 데이터 체크섬이 사용으로 설정된 경우 이 설정을 사용하여 WAL 로깅이 추가로 얼마나 발생하는지 테스트할 수 있다.
 </para>

 <para>
이 매개 변수는 서버 시작 시에만 설정 가능하다. 기본값은 <literal>off</literal>이다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-wal-compression" xreflabel="wal_compression">
      <term><varname>wal_compression</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_compression</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        이 설정값을 <literal>on</literal> 으로 지정하면, <productname>PostgreSQL</productname>
        서버는 <xref linkend="guc-full-page-writes"/> 설정을 on 으로 
        지정했거나, 베이스 백업을 할 때, WAL에서 페이지 전체 이미지를 
        압축한다. 이 압축된 내용은 WAL 재실행할 경우에 압축을 풀어서 
        반영한다. 기본값은 <literal>off</literal>다.  이 설정은 슈퍼유저만 
        변경할 수 있다.
       </para>

       <para>
        이 설정은 자료 손실 없이 WAL 크기를 줄이는데 사용할 수 있지만,
        압축과 그 해제 작업 비용이 추가로 발생된다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-init-zero" xreflabel="wal_init_zero">
      <term><varname>wal_init_zero</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_init_zero</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        If set to <literal>on</literal> (the default), this option causes new
        WAL files to be filled with zeroes.  On some file systems, this ensures
        that space is allocated before we need to write WAL records.  However,
        <firstterm>Copy-On-Write</firstterm> (COW) file systems may not benefit
        from this technique, so the option is given to skip the unnecessary
        work.  If set to <literal>off</literal>, only the final byte is written
        when the file is created so that it has the expected size.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-recycle" xreflabel="wal_recycle">
      <term><varname>wal_recycle</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_recycle</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        If set to <literal>on</literal> (the default), this option causes WAL
        files to be recycled by renaming them, avoiding the need to create new
        ones.  On COW file systems, it may be faster to create new ones, so the
        option is given to disable this behavior.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-wal-buffers" xreflabel="wal_buffers">
<term><varname>wal_buffers</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_buffers</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
WAL 데이터에 사용되고 아직 디스크에 기록되지 않은 공유 메모리의 합계. 기본 설정 -1은 <xref linkend="guc-shared-buffers"/>의 1/32번째(약 3%)와 동일하게 선택한다. 
<literal>64kB</literal> 이상, WAL 세그먼트 1개 크기 이하여야 하며,
일반적으로 <literal>16MB</literal>이다. 이 값은 자동 선택이 너무 크거나 작은 경우에 직접 선택할 수 있으며, <literal>32kB</literal> 미만의 양의 값은 <literal>32kB</literal>로 처리된다. 
단위를 지정하지 않으면, WAL 블록수로 간주한다. 
<symbol>XLOG_BLCKSZ</symbol> 바이트이다. 통상 8kB.
이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>

 <para>
WAL 버퍼의 내용은 모든 트랜잭션 커밋마다 디스크에 쓰기 되므로 극단적으로 큰 값은 별다른 장점이 없을 가능성이 높다. 
그러나, 이 값을 최소한 몇 메가바이트로 설정하면 여러 클라이언트가 한꺼번에 커밋함으로써 busy한 서버의 쓰기 성능이 개선된다. 
기본 설정 -1에 의해 선택된 자동 튜닝은 대부분의 경우 합당한 결과를 주어야 한다.
 </para>

</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-writer-delay" xreflabel="wal_writer_delay">
<term><varname>wal_writer_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_writer_delay</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
      <para>
        Specifies how often the WAL writer flushes WAL, in time terms.
        After flushing WAL the writer sleeps for the length of time given
        by <varname>wal_writer_delay</varname>, unless woken up sooner
        by an asynchronously committing transaction. If the last flush
        happened less than <varname>wal_writer_delay</varname> ago and less
        than <varname>wal_writer_flush_after</varname> worth of WAL has been
        produced since, then WAL is only written to the operating system, not
        flushed to disk.
        If this value is specified without units, it is taken as milliseconds.
        The default value is 200 milliseconds (<literal>200ms</literal>).  Note that
        on many systems, the effective resolution of sleep delays is 10
        milliseconds; setting <varname>wal_writer_delay</varname> to a value that is
        not a multiple of 10 might have the same results as setting it to the
        next higher multiple of 10.
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-writer-flush-after" xreflabel="wal_writer_flush_after">
      <term><varname>wal_writer_flush_after</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_writer_flush_after</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
      <para>
        Specifies how often the WAL writer flushes WAL, in volume terms.
        If the last flush happened less
        than <varname>wal_writer_delay</varname> ago and less
        than <varname>wal_writer_flush_after</varname> worth of WAL has been
        produced since, then WAL is only written to the operating system, not
        flushed to disk.  If <varname>wal_writer_flush_after</varname> is set
        to <literal>0</literal> then WAL data is always flushed immediately.
        If this value is specified without units, it is taken as WAL blocks,
        that is <symbol>XLOG_BLCKSZ</symbol> bytes, typically 8kB.
        The default is <literal>1MB</literal>.
        이 매개 변수는 <filename>postgresql.conf</filename>
        파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-wal-skip-threshold" xreflabel="wal_skip_threshold">
      <term><varname>wal_skip_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_skip_threshold</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        <varname>wal_level</varname>이 <literal>minimal</literal>이고, 
        릴레이션을 만들거나 다시 쓰기를 하는 트랜잭션이 커밋될 때,
        이 설정값을 초과하는 크기의 자료량을 쓰는 경우는 WAL 기록을 하지
        않는다.  이 설정값보다 적은 자료량이면, WAL에 그 내용을 남기고, 
        그 반대인 경우는 자료를 데이터 파일에 쓰고 직접 fsync 작업을 한다.  저장
        매체의 성능과 동시 사용자 수에 따라 이 값을 조절하면 된다.  설정값에
        단위를 생략하면, kb로 간주한다.  초기값은 2MB이다.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-commit-delay" xreflabel="commit_delay">
<term><varname>commit_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>commit_delay</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>commit_delay</varname>는 WAL 쓰기를 초기화하기 전에 지정한 시간만큼 지연한다.
이것은 시스템 로드가 충분히 커서 주어진 간격 내에 트랜잭션을 추가로
커밋할 준비가 된 경우 단일 WAL 쓰기를 통해 대량의 트랜잭션이 커밋되게
함으로써 그룹 커밋 처리량을 개선할 수 있다.  그러나 이것은 WAL 쓰기별로
대기 시간을 최대 <varname>commit_delay</varname> 값만큼 늘리기도
한다.  커밋할 준비가 된 트랜잭션이 없을 경우 지연은 낭비되는 시간이므로
최소한 <varname>commit_siblings</varname>인 경우만 지연이 수행된다.  쓰기가
곧 시작되는 경우 다른 트랜잭션이 작동된다. 또한 <varname>fsync</varname>가
비활성화되면 지연이 수행되지 않는다. 
If this value is specified without units, it is taken as microseconds.
기본 <varname>commit_delay</varname>는 0이다(지연 없음). 슈퍼유저만 이 설정을 변경할 수 있다.
 </para>

 <para>
9.3 이전의 <productname>PostgreSQL</productname> 릴리스에서 <varname>commit_delay</varname>는 동작이 다르고 효과도 떨어진다. 이것은 모든 WAL 쓰기가 아닌 커밋에만 영향을 주었고 WAL 쓰기가 곧 완료된 경우에도 환경 설정된 지연 시간 동안 대기했다. 
<productname>PostgreSQL</productname> 9.3 초반에, 쓸 준비가 된 첫 번째 프로세스는 환경 설정된 시간 간격을 기다리고, 후속 프로세스는 선행 프로세스의 쓰기 연산이 끝날 때까지 대기한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-commit-siblings" xreflabel="commit_siblings">
<term><varname>commit_siblings</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>commit_siblings</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>commit_delay</varname> 지연을 수행하기 전에 필요한 동시 개방 트랜잭션의 최소 수. 값이 크면, 지연 간격 중에 커밋 준비가 된 다른 트랜잭션이 최소한 하나 이상일 확률이 높다. 기본값은 5개 트랜잭션이다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
 </sect2>

 <sect2 id="runtime-config-wal-checkpoints">
 <title>체크포인트</title>

 <variablelist>
 <varlistentry id="guc-checkpoint-timeout" xreflabel="checkpoint_timeout">
<term><varname>checkpoint_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>checkpoint_timeout</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
자동 WAL checkpoints 간의 최대 시간. 
단위를 지정하지 않으면, 초로 간주한다.
기본값은
5분이다(<literal>5min</literal>). 이 매개 변수를 늘리면 충돌 복구에 필요한 시간을
늘릴 수 있다.  이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는
서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-checkpoint-completion-target" xreflabel="checkpoint_completion_target">
<term><varname>checkpoint_completion_target</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>checkpoint_completion_target</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
checkpoints 간 총 시간 분할로써, checkpoints 완료 목표를 지정한다. 기본값은 0.5이다. 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-checkpoint-flush-after" xreflabel="checkpoint_flush_after">
      <term><varname>checkpoint_flush_after</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_flush_after</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Whenever more than this amount of data has been
        written while performing a checkpoint, attempt to force the
        OS to issue these writes to the underlying storage.  Doing so will
        limit the amount of dirty data in the kernel's page cache, reducing
        the likelihood of stalls when an <function>fsync</function> is issued at the end of the
        checkpoint, or when the OS writes data back in larger batches in the
        background.  Often that will result in greatly reduced transaction
        latency, but there also are some cases, especially with workloads
        that are bigger than <xref linkend="guc-shared-buffers"/>, but smaller
        than the OS's page cache, where performance might degrade.  This
        setting may have no effect on some platforms.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The valid range is
        between <literal>0</literal>, which disables controlled writeback,
        and <literal>2MB</literal>.  The default is <literal>256kB</literal> on
        Linux, <literal>0</literal> elsewhere.  (If <symbol>BLCKSZ</symbol> is not
        8kB, the default and maximum values scale proportionally to it.)
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>


 <varlistentry id="guc-checkpoint-warning" xreflabel="checkpoint_warning">
<term><varname>checkpoint_warning</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>checkpoint_warning</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
WAL 조각 파일을 채움으로써 checkpoints가 여기에 지정된 초보다 
자주 발생한 경우 서버 로그에 메시지를 기록한다
(<varname>max_wal_size</varname>를 증가시키는 것이 권장됨). 
단위를 지정하지 않으면, 초로 간주한다.
기본값은 30초이다(<literal>30s</literal>).  0은
경고를 비활성화한다.  <varname>checkpoint_timeout</varname>가
<varname>checkpoint_warning</varname> 미만이면 경고가 발생하지
않는다.  이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>


     <varlistentry id="guc-max-wal-size" xreflabel="max_wal_size">
      <term><varname>max_wal_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_wal_size</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        체크포인트 작업을 자동으로 진행할 WAL 최대 크기.
        이 값은 유연한 최대값이다.  갑자기 많이 쌓이는 과도한 
        자료량이나, <varname>archive_command</varname> 작업이 계속
        실패하고 있거나, <varname>wal_keep_size</varname> 설정값을
        크게 지정한 경우에는 언제든지 WAL 총 크기는 
        이 값을 초과할 수 있다.
        단위를 지정하지 않으면 MB로 간주한다.
        기본값은 1 GB이다. 이 값이 커지면, 서버가 비정상적으로 
        종료된 뒤 다시 시작하려고 할 때 진행하는 트랜잭션 로그 기반
        복구 작업 시간이 길어 진다.
        이 설정은 <filename>postgresql.conf</filename>에서 지정하거나,
        서버 실행 명령행 옵션으로만 지정할 수 있다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-min-wal-size" xreflabel="min_wal_size">
      <term><varname>min_wal_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_wal_size</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        WAL 조각 파일들은 더 이상 보관할 필요가 없어지면, 
        지워지는 것이 아니라, 앞으로 사용될 파일로 그 이름을 바꾼다.
        이 설정은 이렇게 남겨두는 WAL 최소값을 지정한다.
        앞에서 설명한 것 처럼 배치 작업 같은 것으로 갑자기 많은 
        트랜잭션 로그가 쌓이게 되면 이 값 기준으로 다시 적정 수준의
        디스크 공간을 사용하게 된다.
        단위를 지정하지 않으면 MB로 간주한다.
        기본값은 80 MB이다.
        이 설정은 <filename>postgresql.conf</filename>에서 지정하거나,
        서버 실행 명령행 옵션으로만 지정할 수 있다.
       </para>
      </listitem>
     </varlistentry>

 </variablelist>
 </sect2>

 <sect2 id="runtime-config-wal-archiving">
 <title>아카이브</title>

<variablelist>
 <varlistentry id="guc-archive-mode" xreflabel="archive_mode">
<term><varname>archive_mode</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>archive_mode</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>archive_mode</varname>을 사용하는 것으로 설정하면 완료된 WAL 세그먼트가 <xref linkend="guc-archive-command"/> 설정에 의해 아카이브 저장소로 전달된다. 
<varname>archive_mode</varname> 및 <varname>archive_command</varname>는 별개의 변수이므로 아카이빙 모드를 해지하지 않고도 <varname>archive_command</varname>를 변경할 수 있다. 
이 매개 변수는 서버 시작 시에만 설정 가능하다. <varname>wal_level</varname>이 <literal>minimal</literal>로 설정된 경우 <varname>archive_mode</varname>를 사용으로 설정할 수 없다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-archive-command" xreflabel="archive_command">
<term><varname>archive_command</varname> (<type>string</type>)
<indexterm>
 <primary><varname>archive_command</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
완료된 WAL 파일 세그먼트를 아카이브하기 위해 실행하는 로컬 쉘 명령. string에서 <literal>%p</literal>는 아카이브할 파일의 경로명으로 대체되고 <literal>%f</literal>는 파일명으로만 대체된다. 
(경로명은 서버(예: 클러스터의 데이터 디렉터리)의 작업 디렉터리에 상대적이다.) <literal>%</literal> 문자를 명령에 포함하려면 <literal>%%</literal>를 사용해야 한다. 성공한 경우에만 명령이 0 종료(zero exit) 상태를 리턴하는 것이 중요하다. 
자세한 내용은 <xref linkend="backup-archiving-wal"/>을 참조 바란다.
 </para>
 <para>
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. <varname>archive_mode</varname>가 서버 시작 시에 활성화되지 않은 경우 무시된다. 
<varname>archive_mode</varname>가 사용으로 설정된 상태에서 <varname>archive_command</varname>의 string이 비어 있는 경우(기본값) WAL 아카이빙이 일시적으로 비활성화되지만 서버는 명령이 곧 제시될 것이라는 기대를 갖고 WAL 세그먼트 파일을 계속 누적한다. 
<varname>archive_command</varname>가 true만 리턴하는 명령으로 설정하면(예: <literal>/bin/true</literal>)(Windows에서 <literal>REM</literal>), 아카이빙이 효율적으로 비활성화되지만, 아카이브 복구에 필요한 WAL 파일의 체인이 끊어지므로 특이한 환경에서만 사용되어야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-archive-timeout" xreflabel="archive_timeout">
<term><varname>archive_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>archive_timeout</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<xref linkend="guc-archive-command"/>는 현재 다루고 있는
WAL 조각 파일이 아니라, 트랜잭션 로그 기록을 다 한 WAL
조각 파일을 대상으로 한다.  그러므로, 서버에서는 WAL 트래픽이 발생되지
않는 경우(따라서 여유 시간이 있음) 트랜잭션의 완료 및 아카이브
저장소에서 안전한 기록 사이에 긴 지연이 발생할 수 있다.  데이터가
아카이브되지 않은 채로 방치되지 않게 하기 위해 서버가 새 WAL 조각
파일로 주기적으로 전환되도록 <varname>archive_timeout</varname>을
설정할 수 있다.  이 매개 변수가 0(기본값)보다 큰 경우 마지막 조각 파일로
전환한 이후로 여기서 지정된 시간을 경과할 때마다, 그리고
단일 checkpoint를 비롯한 데이터베이스 작업이 있을 때마다 서버는
새 조각 파일로 전환한다.  (사용하지 않는 데이터베이스라면
checkpoint 작업을 하지 않는다.) 트랜잭션 로그를 모두 채우지 않고,
강제 전환된 WAL 조각 파일도 크기는 같다.  따라서, 
<varname>archive_timeout</varname> 값을
매우 짧게 하는 것은 아카이브 저장소를 부풀게 하므로 현명하지
못하다.  <varname>archive_timeout</varname>을 1분 정도로 설정하는
것이 일반적으로 합당하다.  주 서버의 자료를 보다 빠르게 보조
서버로 복사하려면, 아카이브된 WAL 조각 파일을 사용하는 것보다, 스트리밍
복제 기능을 이용하는 것이 낫다.  이 설정 값에서 단위를 지정하지
않으면 초로 간주한다.  이 변수는 <filename>postgresql.conf</filename>
파일 또는 서버 명령행 옵션으로 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>

  <sect2 id="runtime-config-wal-archive-recovery">

    <title>Archive Recovery</title>

    <indexterm>
     <primary>configuration</primary>
     <secondary>of recovery</secondary>
     <tertiary>of a standby server</tertiary>
    </indexterm>

    <para>
     This section describes the settings that apply only for the duration of
     the recovery.  They must be reset for any subsequent recovery you wish to
     perform.
    </para>

    <para>
     <quote>Recovery</quote> covers using the server as a standby or for
     executing a targeted recovery.  Typically, standby mode would be used to
     provide high availability and/or read scalability, whereas a targeted
     recovery is used to recover from data loss.
    </para>

    <para>
     To start the server in standby mode, create a file called
     <filename>standby.signal</filename><indexterm><primary>standby.signal</primary></indexterm>
     in the data directory.  The server will enter recovery and will not stop
     recovery when the end of archived WAL is reached, but will keep trying to
     continue recovery by connecting to the sending server as specified by the
     <varname>primary_conninfo</varname> setting and/or by fetching new WAL
     segments using <varname>restore_command</varname>.  For this mode, the
     parameters from this section and <xref
     linkend="runtime-config-replication-standby"/> are of interest.
     Parameters from <xref linkend="runtime-config-wal-recovery-target"/> will
     also be applied but are typically not useful in this mode.
    </para>

    <para>
     To start the server in targeted recovery mode, create a file called
     <filename>recovery.signal</filename><indexterm><primary>recovery.signal</primary></indexterm>
     in the data directory.  If both <filename>standby.signal</filename> and
     <filename>recovery.signal</filename> files are created, standby mode
     takes precedence.  Targeted recovery mode ends when the archived WAL is
     fully replayed, or when <varname>recovery_target</varname> is reached.
     In this mode, the parameters from both this section and <xref
     linkend="runtime-config-wal-recovery-target"/> will be used.
    </para>

    <variablelist>
     <varlistentry id="guc-restore-command" xreflabel="restore_command">
      <term><varname>restore_command</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>restore_command</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        The local shell command to execute to retrieve an archived segment of
        the WAL file series. This parameter is required for archive recovery,
        but optional for streaming replication.
        Any <literal>%f</literal> in the string is
        replaced by the name of the file to retrieve from the archive,
        and any <literal>%p</literal> is replaced by the copy destination path name
        on the server.
        (The path name is relative to the current working directory,
        i.e., the cluster's data directory.)
        Any <literal>%r</literal> is replaced by the name of the file containing the
        last valid restart point. That is the earliest file that must be kept
        to allow a restore to be restartable, so this information can be used
        to truncate the archive to just the minimum required to support
        restarting from the current restore. <literal>%r</literal> is typically only
        used by warm-standby configurations
        (see <xref linkend="warm-standby"/>).
        Write <literal>%%</literal> to embed an actual <literal>%</literal> character.
       </para>

       <para>
        It is important for the command to return a zero exit status
        only if it succeeds.  The command <emphasis>will</emphasis> be asked for file
        names that are not present in the archive; it must return nonzero
        when so asked.  Examples:
<programlisting>
restore_command = 'cp /mnt/server/archivedir/%f "%p"'
restore_command = 'copy "C:\\server\\archivedir\\%f" "%p"'  # Windows
</programlisting>
        An exception is that if the command was terminated by a signal (other
        than <systemitem>SIGTERM</systemitem>, which is used as part of a
        database server shutdown) or an error by the shell (such as command
        not found), then recovery will abort and the server will not start up.
       </para>

       <para>
        This parameter can only be set at server start.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-cleanup-command" xreflabel="archive_cleanup_command">
      <term><varname>archive_cleanup_command</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>archive_cleanup_command</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This optional parameter specifies a shell command that will be executed
        at every restartpoint.  The purpose of
        <varname>archive_cleanup_command</varname> is to provide a mechanism for
        cleaning up old archived WAL files that are no longer needed by the
        standby server.
        Any <literal>%r</literal> is replaced by the name of the file containing the
        last valid restart point.
        That is the earliest file that must be <emphasis>kept</emphasis> to allow a
        restore to be restartable, and so all files earlier than <literal>%r</literal>
        may be safely removed.
        This information can be used to truncate the archive to just the
        minimum required to support restart from the current restore.
        The <xref linkend="pgarchivecleanup"/> module
        is often used in <varname>archive_cleanup_command</varname> for
        single-standby configurations, for example:
<programlisting>archive_cleanup_command = 'pg_archivecleanup /mnt/server/archivedir %r'</programlisting>
        Note however that if multiple standby servers are restoring from the
        same archive directory, you will need to ensure that you do not delete
        WAL files until they are no longer needed by any of the servers.
        <varname>archive_cleanup_command</varname> would typically be used in a
        warm-standby configuration (see <xref linkend="warm-standby"/>).
        Write <literal>%%</literal> to embed an actual <literal>%</literal> character in the
        command.
       </para>
       <para>
        If the command returns a nonzero exit status then a warning log
        message will be written.  An exception is that if the command was
        terminated by a signal or an error by the shell (such as command not
        found), a fatal error will be raised.
       </para>
       <para>
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-end-command" xreflabel="recovery_end_command">
      <term><varname>recovery_end_command</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_end_command</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This parameter specifies a shell command that will be executed once only
        at the end of recovery. This parameter is optional. The purpose of the
        <varname>recovery_end_command</varname> is to provide a mechanism for cleanup
        following replication or recovery.
        Any <literal>%r</literal> is replaced by the name of the file containing the
        last valid restart point, like in <xref linkend="guc-archive-cleanup-command"/>.
       </para>
       <para>
        If the command returns a nonzero exit status then a warning log
        message will be written and the database will proceed to start up
        anyway.  An exception is that if the command was terminated by a
        signal or an error by the shell (such as command not found), the
        database will not proceed with startup.
       </para>
       <para>
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

  </sect2>

  <sect2 id="runtime-config-wal-recovery-target">

    <title>Recovery Target</title>

     <para>
      By default, recovery will recover to the end of the WAL log. The
      following parameters can be used to specify an earlier stopping point.
      At most one of <varname>recovery_target</varname>,
      <varname>recovery_target_lsn</varname>, <varname>recovery_target_name</varname>,
      <varname>recovery_target_time</varname>, or <varname>recovery_target_xid</varname>
      can be used; if more than one of these is specified in the configuration
      file, an error will be raised.
      These parameters can only be set at server start.
     </para>

     <variablelist>
     <varlistentry id="guc-recovery-target" xreflabel="recovery_target">
      <term><varname>recovery_target</varname><literal> = 'immediate'</literal>
      <indexterm>
        <primary><varname>recovery_target</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This parameter specifies that recovery should end as soon as a
        consistent state is reached, i.e., as early as possible. When restoring
        from an online backup, this means the point where taking the backup
        ended.
       </para>
       <para>
        Technically, this is a string parameter, but <literal>'immediate'</literal>
        is currently the only allowed value.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-name" xreflabel="recovery_target_name">
      <term><varname>recovery_target_name</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_target_name</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This parameter specifies the named restore point (created with
        <function>pg_create_restore_point()</function>) to which recovery will proceed.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-time" xreflabel="recovery_target_time">
      <term><varname>recovery_target_time</varname> (<type>timestamp</type>)
      <indexterm>
        <primary><varname>recovery_target_time</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This parameter specifies the time stamp up to which recovery
        will proceed.
        The precise stopping point is also influenced by
        <xref linkend="guc-recovery-target-inclusive"/>.
       </para>

       <para>
        The value of this parameter is a time stamp in the same format
        accepted by the <type>timestamp with time zone</type> data type,
        except that you cannot use a time zone abbreviation (unless the
        <xref linkend="guc-timezone-abbreviations"/> variable has been set
        earlier in the configuration file).  Preferred style is to use a
        numeric offset from UTC, or you can write a full time zone name,
        e.g., <literal>Europe/Helsinki</literal> not <literal>EEST</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-xid" xreflabel="recovery_target_xid">
      <term><varname>recovery_target_xid</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_target_xid</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This parameter specifies the transaction ID up to which recovery
        will proceed. Keep in mind
        that while transaction IDs are assigned sequentially at transaction
        start, transactions can complete in a different numeric order.
        The transactions that will be recovered are those that committed
        before (and optionally including) the specified one.
        The precise stopping point is also influenced by
        <xref linkend="guc-recovery-target-inclusive"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-lsn" xreflabel="recovery_target_lsn">
      <term><varname>recovery_target_lsn</varname> (<type>pg_lsn</type>)
      <indexterm>
        <primary><varname>recovery_target_lsn</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This parameter specifies the LSN of the write-ahead log location up
        to which recovery will proceed. The precise stopping point is also
        influenced by <xref linkend="guc-recovery-target-inclusive"/>. This
        parameter is parsed using the system data type
        <link linkend="datatype-pg-lsn"><type>pg_lsn</type></link>.
       </para>
      </listitem>
     </varlistentry>
     </variablelist>

     <para>
       The following options further specify the recovery target, and affect
       what happens when the target is reached:
     </para>

     <variablelist>
     <varlistentry id="guc-recovery-target-inclusive"
                   xreflabel="recovery_target_inclusive">
      <term><varname>recovery_target_inclusive</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>recovery_target_inclusive</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Specifies whether to stop just after the specified recovery target
        (<literal>on</literal>), or just before the recovery target
        (<literal>off</literal>).
        Applies when <xref linkend="guc-recovery-target-lsn"/>,
        <xref linkend="guc-recovery-target-time"/>, or
        <xref linkend="guc-recovery-target-xid"/> is specified.
        This setting controls whether transactions
        having exactly the target WAL location (LSN), commit time, or transaction ID, respectively, will
        be included in the recovery.  Default is <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-timeline"
                   xreflabel="recovery_target_timeline">
      <term><varname>recovery_target_timeline</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>recovery_target_timeline</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Specifies recovering into a particular timeline.  The value can be a
        numeric timeline ID or a special value.  The value
        <literal>current</literal> recovers along the same timeline that was
        current when the base backup was taken.  The
        value <literal>latest</literal> recovers
        to the latest timeline found in the archive, which is useful in
        a standby server.  <literal>latest</literal> is the default.
       </para>

       <para>
        You usually only need to set this parameter
        in complex re-recovery situations, where you need to return to
        a state that itself was reached after a point-in-time recovery.
        See <xref linkend="backup-timelines"/> for discussion.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-target-action"
                   xreflabel="recovery_target_action">
      <term><varname>recovery_target_action</varname> (<type>enum</type>)
      <indexterm>
        <primary><varname>recovery_target_action</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Specifies what action the server should take once the recovery target is
        reached. The default is <literal>pause</literal>, which means recovery will
        be paused. <literal>promote</literal> means the recovery process will finish
        and the server will start to accept connections.
        Finally <literal>shutdown</literal> will stop the server after reaching the
        recovery target.
       </para>
       <para>
        The intended use of the <literal>pause</literal> setting is to allow queries
        to be executed against the database to check if this recovery target
        is the most desirable point for recovery.
        The paused state can be resumed by
        using <function>pg_wal_replay_resume()</function> (see
        <xref linkend="functions-recovery-control-table"/>), which then
        causes recovery to end. If this recovery target is not the
        desired stopping point, then shut down the server, change the
        recovery target settings to a later target and restart to
        continue recovery.
       </para>
       <para>
        The <literal>shutdown</literal> setting is useful to have the instance ready
        at the exact replay point desired.  The instance will still be able to
        replay more WAL records (and in fact will have to replay WAL records
        since the last checkpoint next time it is started).
       </para>
       <para>
        Note that because <filename>recovery.signal</filename> will not be
        removed when <varname>recovery_target_action</varname> is set to <literal>shutdown</literal>,
        any subsequent start will end with immediate shutdown unless the
        configuration is changed or the <filename>recovery.signal</filename>
        file is removed manually.
       </para>
       <para>
        This setting has no effect if no recovery target is set.
        If <xref linkend="guc-hot-standby"/> is not enabled, a setting of
        <literal>pause</literal> will act the same as <literal>shutdown</literal>.
        If the recovery target is reached while a promotion is ongoing,
        a setting of <literal>pause</literal> will act the same as
        <literal>promote</literal>.
       </para>
       <para>
        In any case, if a recovery target is configured but the archive
        recovery ends before the target is reached, the server will shut down
        with a fatal error.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect2>

 </sect1>

 <sect1 id="runtime-config-replication">
<title>복제</title>

<para>
 이 설정은 내장 <firstterm>streaming replication</firstterm> 기능의 동작을 제어한다(<xref linkend="streaming-replication"/> 참조). 서버는 마스터 서버거나 대기 서버다. 
 마스터 서버는 데이터를 전송할 수 있고, 대기 서버는 언제나 복제된 데이터의 수신자이다. cascading replication(<xref linkend="cascading-replication"/> 참조)을 사용하는 경우 대기 서버는 수신자 겸 전송자일 수 있다. 
 매개 변수는 주로 전송 및 대기 서버에 대한 것이며, 일부 매개 변수는 마스터 서버에서만 의미가 있다. 클러스터 간에 설정은 필요 시 별 문제 없이 다르게 할 수 있다.
</para>

<sect2 id="runtime-config-replication-sender">
 <title>전송 서버들</title>

 <para>
이 매개 변수는 복제 데이터를 하나 이상의 대기 서버로 전송하는 서버에 설정할 수 있다. 마스터는 항상 전송 서버 이므로 이 매개 변수를 언제나 마스터에 설정해야 한다. 
이 매개 변수의 역할 및 의미는 대기 서버가 마스터로 된 이후에 변경되지 않는다.
 </para>

 <variablelist>
<varlistentry id="guc-max-wal-senders" xreflabel="max_wal_senders">
 <term><varname>max_wal_senders</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>max_wal_senders</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
 <para>
  대기 서버 또는 스트리밍 베이스 백업 클라이언트로부터의 동시 연결 최대
  수를 지정한다(예: 동시에 실행 중인 WAL 전송자 프로세스의 최대
  수).  기본값은 <literal>10</literal>이다. 복제를 비활성화 하려면
  <literal>0</literal>이다.  스트리밍 클라이언트의 연결이
  갑작스럽게 끊어지면 타임아웃이 될 때까지 고아 연결 슬롯이
  생기므로, 예상되는 클라이언트의 최대 수보다 이 매개 변수를 약간 더
  크게 설정하여 연결이 끊어진 클라이언트가 즉시 재연결될 수 있도록 해야
  한다.  이 매개 변수는 서버 시작 시에만 설정 가능하다.  또한 대기
  서버로부터의 연결이 가능하도록 <varname>wal_level</varname>은
  <literal>replica</literal>와 같거나 크게 설정해야 한다.
 </para>

      <para>
         대기 서버를 사용한다면, 대기 서버에서의 이 설정값은 
         주 서버의 설정값과 같거나 보다 커야한다.  그렇지 않으면, 
         대기 서버에서 쿼리 사용을 할 수 없게 된다.
      </para>
 </listitem>
</varlistentry>

<varlistentry id="guc-max-replication-slots" xreflabel="max_replication_slots">
 <term><varname>max_replication_slots</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>max_replication_slots</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
<para>
 서버가 지원할 수 있는 복제 슬롯의 최대 수를 지정한다(<xref linkend="streaming-replication-slots"/> 참조). 기본값은 10이다. 이 매개 변수는 서버 시작 시에만 설정 가능하다. 
 복제 슬롯의 사용이 가능하도록 <varname>wal_level</varname>은 <literal>replica</literal>와 같거나 크게 설정해야 한다. 현재 존재하는 복제 슬롯 수보다 작은 값으로 설정하면 서버가 시작되지 않는다.
</para>

        <para>
         On the subscriber side, specifies how many replication origins (see
         <xref linkend="replication-origins"/>) can be tracked simultaneously,
         effectively limiting how many logical replication subscriptions can
         be created on the server. Setting it a lower value than the current
         number of tracked replication origins (reflected in
         <link linkend="view-pg-replication-origin-status">pg_replication_origin_status</link>,
         not <link linkend="catalog-pg-replication-origin">pg_replication_origin</link>)
         will prevent the server from starting.
        </para>
 </listitem>
</varlistentry>

      <varlistentry id="guc-wal-keep-size" xreflabel="wal_keep_size">
       <term><varname>wal_keep_size</varname> (<type>integer</type>)
 <indexterm>
<primary><varname>wal_keep_size</varname> 환경 설정 매개 변수</primary>
 </indexterm>
 </term>
 <listitem>
 <para>
대기 서버가 streaming replication을 위해 과거 로그 파일을 가져와야
하는 경우 <filename>pg_wal</filename> 디렉터리에 저장되는 과거 로그 조각 파일의 
최소 크기 지정한다.  전송 서버에 연결된 대기 서버가 
<varname>wal_keep_size</varname> 메가바이트에 휠씬 못 미치면
전송 서버는 대기 서버에 의해 필요한 만큼 WAL 세그먼트를 삭제하고,
이때 복제 연결이 중단된다.  다운스트림 연결도 결과적으로 실패한다.
(단, 대기 서버는 WAL 아카이빙이 사용 중인 경우 
아카이브에서 세그먼트를 가져와서 복구할 수 있다.)
 </para>

 <para>
이것은, <filename>pg_wal</filename>에 저장되는 최소 세그먼트 
크기를 지정한다.  시스템은 WAL 아카이브용으로 또는
checkpoint에서 복구용으로 세그먼트를 좀 더 보유해야 할 수 있다. 
<varname>wal_keep_size</varname>가 0(기본값)인 경우 시스템은 
대기 서버를 위한 추가 세그먼트를 유지하지 않으므로, 대기
서버에서 사용 가능한 예전 WAL 세그먼트의 수는 이전
checkpoint의 위치 및 WAL 아카이빙의 상태 함수이다. 
설정값에 단위를 지정하지 않으면, 메가바이트다.
이 매개 변수는 <filename>postgresql.conf</filename> 파일 
또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 </listitem>
</varlistentry>

      <varlistentry id="guc-max-slot-wal-keep-size" xreflabel="max_slot_wal_keep_size">
       <term><varname>max_slot_wal_keep_size</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_slot_wal_keep_size</varname> configuration parameter</primary>
       </indexterm>
       </term>
       <listitem>
       <para>
        Specify the maximum size of WAL files
        that <link linkend="streaming-replication-slots">replication
        slots</link> are allowed to retain in the <filename>pg_wal</filename>
        directory at checkpoint time.
        If <varname>max_slot_wal_keep_size</varname> is -1 (the default),
        replication slots may retain an unlimited amount of WAL files.  Otherwise, if
        restart_lsn of a replication slot falls behind the current LSN by more
        than the given size, the standby using the slot may no longer be able
        to continue replication due to removal of required WAL files. You
        can see the WAL availability of replication slots
        in <link linkend="view-pg-replication-slots">pg_replication_slots</link>.
       </para>
       </listitem>
      </varlistentry>

 <varlistentry id="guc-wal-sender-timeout" xreflabel="wal_sender_timeout">
<term><varname>wal_sender_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_sender_timeout</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
지정한 시간 이상 작동되지 않은 복제 연결이 중단된다.  이것은
전송 서버가 대기 서버 충돌 또는 네트워크 중단을 검출할 때
유용하다. 
단위를 지정하지 않으면 밀리세컨드로 간주한다.
초기값은 60초다.
0 으로 지정하면, 이 기능이 비활성화 된다.
 </para>
       <para>
        With a cluster distributed across multiple geographic
        locations, using different values per location brings more flexibility
        in the cluster management. A smaller value is useful for faster
        failure detection with a standby having a low-latency network
        connection, and a larger value helps in judging better the health
        of a standby if located on a remote location, with a high-latency
        network connection.
       </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-track-commit-timestamp" xreflabel="track_commit_timestamp">
      <term><varname>track_commit_timestamp</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_commit_timestamp</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        트랜잭션 커밋 시간을 기록한다.
        이 설정은 <filename>postgresql.conf</filename>에서 지정하거나,
        서버 실행 명령행 옵션으로만 지정할 수 있다.
        기본값은 <literal>off</literal>.
       </para>
      </listitem>
     </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-replication-master">
 <title>마스터 서버</title>

 <para>
이 매개 변수는 복제 데이터를 하나 이상의 대기 서버로 전송하는 마스터/운영 서버에 설정할 수 있다. 
이 매개 변수 외에, <xref linkend="guc-wal-level"/>은 마스터 서버에 적절하게 설정되어야 하고 옵션으로 wal 아카이빙도 활성화될 수 있다(<xref linkend="runtime-config-wal-archiving"/> 참조). 
사용자가 대기 서버가 마스터가 될 가능성에 대비하여 이 매개 변수를 설정하고 싶어 하더라도 대기 서버의 이 매개 변수 값은 아무 상관이 없다.
 </para>

<variablelist>

 <varlistentry id="guc-synchronous-standby-names" xreflabel="synchronous_standby_names">
<term><varname>synchronous_standby_names</varname> (<type>string</type>)
<indexterm>
 <primary><varname>synchronous_standby_names</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<xref linkend="synchronous-replication"/>에 설명된 대로 <firstterm>동기 복제</firstterm>를 지원할 수 있는
대기 서버 이름 목록을 지정한다. 활성 대기 서버는 하나 이상을 지정할 수 있다;
커밋 대기 중인 트랜잭션은 이 대기 서버들이 데이터 수신을 확인한 후에 진행이 허용된다. 
동기 대기 서버는 이 목록에서 지정한 순서 대로 연결되어 있고 실시간으로 데이터를
스트리밍 전달하여 복제한다.  (<link 
linkend="monitoring-pg-stat-replication-view">
<structname>pg_stat_replication</structname></link>
뷰에서 <literal>streaming</literal> 상태로 표시됨). 
동기 대기 서버가 어떤 이유로든 연결이 끊어진 경우
지정한 우선 순위에 따라 그 다음으로 높은 대기 서버로 즉시 대체된다.
대기 서버 이름을 2개 이상 지정하면 매우 높은 고가용성을 달성할 수 있다.
 </para>

       <para>
        The name of a standby server for this purpose is the
        <varname>application_name</varname> setting of the standby, as set in the
        standby's connection information.  In case of a physical replication
        standby, this should be set in the <varname>primary_conninfo</varname>
        setting; the default is the setting of <xref linkend="guc-cluster-name"/>
        if set, else <literal>walreceiver</literal>.
        For logical replication, this can be set in the connection
        information of the subscription, and it defaults to the
        subscription name.  For other replication stream consumers,
        consult their documentation.
       </para>

 <para>
        대기 서버 목록은 다음 형태로 지정한다:
<synopsis>
[FIRST] <replaceable class="parameter">num_sync</replaceable> ( <replaceable class="parameter">standby_name</replaceable> [, ...] )
ANY <replaceable class="parameter">num_sync</replaceable> ( <replaceable class="parameter">standby_name</replaceable> [, ...] )
<replaceable class="parameter">standby_name</replaceable> [, ...]
</synopsis>
        where <replaceable class="parameter">num_sync</replaceable> is
        the number of synchronous standbys that transactions need to
        wait for replies from,
        and <replaceable class="parameter">standby_name</replaceable>
        is the name of a standby server.
        <literal>FIRST</literal> and <literal>ANY</literal> specify the method to choose
        synchronous standbys from the listed servers.
       </para>
       <para>
        The keyword <literal>FIRST</literal>, coupled with
        <replaceable class="parameter">num_sync</replaceable>, specifies a
        priority-based synchronous replication and makes transaction commits
        wait until their WAL records are replicated to
        <replaceable class="parameter">num_sync</replaceable> synchronous
        standbys chosen based on their priorities. For example, a setting of
        <literal>FIRST 3 (s1, s2, s3, s4)</literal> will cause each commit to wait for
        replies from three higher-priority standbys chosen from standby servers
        <literal>s1</literal>, <literal>s2</literal>, <literal>s3</literal> and <literal>s4</literal>.
        The standbys whose names appear earlier in the list are given higher
        priority and will be considered as synchronous. Other standby servers
        appearing later in this list represent potential synchronous standbys.
        If any of the current synchronous standbys disconnects for whatever
        reason, it will be replaced immediately with the next-highest-priority
        standby. The keyword <literal>FIRST</literal> is optional.
       </para>
       <para>
        The keyword <literal>ANY</literal>, coupled with
        <replaceable class="parameter">num_sync</replaceable>, specifies a
        quorum-based synchronous replication and makes transaction commits
        wait until their WAL records are replicated to <emphasis>at least</emphasis>
        <replaceable class="parameter">num_sync</replaceable> listed standbys.
        For example, a setting of <literal>ANY 3 (s1, s2, s3, s4)</literal> will cause
        each commit to proceed as soon as at least any three standbys of
        <literal>s1</literal>, <literal>s2</literal>, <literal>s3</literal> and <literal>s4</literal>
        reply.
       </para>
       <para>
        <literal>FIRST</literal> and <literal>ANY</literal> are case-insensitive. If these
        keywords are used as the name of a standby server,
        its <replaceable class="parameter">standby_name</replaceable> must
        be double-quoted.
       </para>
       <para>
        The third syntax was used before <productname>PostgreSQL</productname>
        version 9.6 and is still supported. It's the same as the first syntax
        with <literal>FIRST</literal> and
        <replaceable class="parameter">num_sync</replaceable> equal to 1.
        For example, <literal>FIRST 1 (s1, s2)</literal> and <literal>s1, s2</literal> have
        the same meaning: either <literal>s1</literal> or <literal>s2</literal> is chosen
        as a synchronous standby.
       </para>
       <para>
        The special entry <literal>*</literal> matches any standby name.
       </para>
       <para>
        There is no mechanism to enforce uniqueness of standby names.  In case
        of duplicates one of the matching standbys will be considered as
        higher priority, though exactly which one is indeterminate.
       </para>
       <note>
        <para>
         Each <replaceable class="parameter">standby_name</replaceable>
         should have the form of a valid SQL identifier, unless it
         is <literal>*</literal>.  You can use double-quoting if necessary.  But note
         that <replaceable class="parameter">standby_name</replaceable>s are
         compared to standby application names case-insensitively, whether
         double-quoted or not.
        </para>
       </note>

 <para>
동기 대기 서버 이름이 여기서 지정되지 않으면 동기 복제는 활성화되지 않고 트랜잭션 커밋은 복제를 기다리지 않는다. 이것은 기본 환경 설정이다. 
동기 복제가 활성화되더라도 개별 트랜잭션은 <xref linkend="guc-synchronous-commit"/> 매개 변수를 <literal>local</literal> 또는 <literal>off</literal>로 설정함으로써 복제를 기다리지 않도록 환경 설정할 수 있다.
 </para>
 <para>
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-vacuum-defer-cleanup-age" xreflabel="vacuum_defer_cleanup_age">
<term><varname>vacuum_defer_cleanup_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>vacuum_defer_cleanup_age</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
지정한 수 만큼의 트랜잭션에 대해서만 남기고, 나머지 트랜잭션으로 발생한
폐기 처분 된 로우(dead row)를 <command>VACUUM</command> 및 <acronym>HOT</acronym> 업데이트가
정리하도록 한다.
기본값은 0개 트랜잭션이다. 
이 설정은 트랜잭션 처리가 끝나면, 즉시 폐기 처분 된 로우는 
정리 대상이 됨을 의미한다.
사용자는 <xref linkend="hot-standby"/>에 설명된 대로 핫 스탠바이가
지원하는 운영 서버에서 이 값을 0이 아닌 다른 값으로 설정하고 싶을 수도 있다. 
이것은 행의 조기 클린업에 의한 충돌 없이 대기 서버에서 쿼리가 완료되는
시간적 여유를 허용한다.  그러나, 운영 서버에서 발생한 쓰기 트랜잭션
수에 관해서 값이 평가되므로, 대기 서버 쿼리에 대해 얼마만큼의 유예 시간이
가능한지를 예측하기는 어렵다.  이 매개 변수는 <filename>postgresql.conf</filename> 파일
또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
이런 대기 서버의 충돌 문제를 피하는 다른 방법으로
<varname>hot_standby_feedback</varname> 설정을 활성화 하는 방법도 고려해 볼만 하다.
 </para>

       <para>
        <varname>old_snapshot_threshold</varname> 설정이 활성화 되어 있다면, 
        이 설정이 0 이상이어도, 폐기 처분 된 로우에 대한 
        정리 작업은 진행됨으로 그 로우들을 보호하지는 못한다.
       </para>

</listitem>
 </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-replication-standby">
 <title>대기 서버</title>

 <para>
이 설정은 복제 데이터를 수신하는 
<link linkend="standby-server-operation">대기 서버</link>
의 동작을 제어한다. 마스터 서버의 값은 무관하다.
 </para>

<variablelist>

       <varlistentry id="guc-primary-conninfo" xreflabel="primary_conninfo">
        <term><varname>primary_conninfo</varname> (<type>string</type>)
        <indexterm>
          <primary><varname>primary_conninfo</varname> configuration parameter</primary>
        </indexterm>
        </term>
        <listitem>
         <para>
          Specifies a connection string to be used for the standby server
          to connect with a sending server. This string is in the format
          described in <xref linkend="libpq-connstring"/>. If any option is
          unspecified in this string, then the corresponding environment
          variable (see <xref linkend="libpq-envars"/>) is checked. If the
          environment variable is not set either, then
          defaults are used.
         </para>
         <para>
          The connection string should specify the host name (or address)
          of the sending server, as well as the port number if it is not
          the same as the standby server's default.
          Also specify a user name corresponding to a suitably-privileged role
          on the sending server (see
          <xref linkend="streaming-replication-authentication"/>).
          A password needs to be provided too, if the sender demands password
          authentication.  It can be provided in the
          <varname>primary_conninfo</varname> string, or in a separate
          <filename>~/.pgpass</filename> file on the standby server (use
          <literal>replication</literal> as the database name).
          Do not specify a database name in the
          <varname>primary_conninfo</varname> string.
         </para>
         <para>
          This parameter can only be set in the <filename>postgresql.conf</filename>
          file or on the server command line.
          If this parameter is changed while the WAL receiver process is
          running, that process is signaled to shut down and expected to
          restart with the new setting (except if <varname>primary_conninfo</varname>
          is an empty string).
          This setting has no effect if the server is not in standby mode.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry id="guc-primary-slot-name" xreflabel="primary_slot_name">
        <term><varname>primary_slot_name</varname> (<type>string</type>)
        <indexterm>
          <primary><varname>primary_slot_name</varname> configuration parameter</primary>
        </indexterm>
        </term>
        <listitem>
         <para>
          Optionally specifies an existing replication slot to be used when
          connecting to the sending server via streaming replication to control
          resource removal on the upstream node
          (see <xref linkend="streaming-replication-slots"/>).
          This parameter can only be set in the <filename>postgresql.conf</filename>
          file or on the server command line.
          If this parameter is changed while the WAL receiver process is running,
          that process is signaled to shut down and expected to restart with the
          new setting.
          This setting has no effect if <varname>primary_conninfo</varname> is not
          set or the server is not in standby mode.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry id="guc-promote-trigger-file" xreflabel="promote_trigger_file">
        <term><varname>promote_trigger_file</varname> (<type>string</type>)
        <indexterm>
          <primary><varname>promote_trigger_file</varname> configuration parameter</primary>
        </indexterm>
        </term>
        <listitem>
         <para>
          Specifies a trigger file whose presence ends recovery in the
          standby.  Even if this value is not set, you can still promote
          the standby using <command>pg_ctl promote</command> or calling
          <function>pg_promote()</function>.
          This parameter can only be set in the <filename>postgresql.conf</filename>
          file or on the server command line.
         </para>
        </listitem>
       </varlistentry>

 <varlistentry id="guc-hot-standby" xreflabel="hot_standby">
<term><varname>hot_standby</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>hot_standby</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<xref linkend="hot-standby"/>에 설명된 대로 복구 중에 사용자가 쿼리를 연결하고 실행할 수 있는지를 지정한다. 
기본값은 <literal>on</literal>이다. 이 매개 변수는 서버 시작 시에만 설정 가능하다. 
복구 중 또는 대기 서버 모드에서만 효과가 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-standby-archive-delay" xreflabel="max_standby_archive_delay">
<term><varname>max_standby_archive_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_standby_archive_delay</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
핫 스탠바이가 작동 중이면 <xref linkend="hot-standby-conflict"/>에서 설명된 대로 이 매개 변수는 적용 직전의 WAL 항목과 충돌하는 대기 서버 쿼리를 취소하기 전에 대기 서버가 기다려야 하는 시간을 결정한다. 
WAL 데이터를 WAL 아카이브에서 읽어오는 경우(따라서 현재가 아닌 경우) <varname>max_standby_archive_delay</varname>가 적용된다. 
설정값에 단위를 지정하지 않으면 밀리세컨드로 간주한다.  기본값은 30초이다. 
-1 값은 쿼리 충돌이 완료될 때까지 대기 서버가 무한정 대기하도록 허용한다. 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
취소 전 쿼리를 실행할 수 있는 시간 길이와 <varname>max_standby_archive_delay</varname>는 동일하지 않는 점에 유의해야 한다. 오히려 이것은 WAL 세그먼트의 데이터를 적용하는 것이 허용된 최대 총 시간이다. 
따라서 WAL 세그먼트 초반에 어떤 쿼리 때문에 상당한 지연이 발생한 경우 후속 충돌 쿼리는 유예 시간이 훨씬 짧아진다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-standby-streaming-delay" xreflabel="max_standby_streaming_delay">
<term><varname>max_standby_streaming_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_standby_streaming_delay</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
핫 스탠바이가 작동 중이면 <xref linkend="hot-standby-conflict"/>에서 설명된 대로 이 매개 변수는 적용 직전의 WAL 항목과 충돌하는 대기 서버 쿼리를 취소하기 전에 대기 서버가 기다려야 하는 시간을 결정한다. 
WAL 데이터를 스트리밍 복제를 통해 수신하는 경우 <varname>max_standby_streaming_delay</varname>가 적용된다. 
설정값에 단위를 지정하지 않으면 밀리세컨드로 간주한다.  기본값은 30초이다. 
-1 값은 쿼리 충돌이 완료될 때까지 대기 서버가 무한정 대기하도록 허용한다. 
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
취소 전 쿼리를 실행할 수 있는 시간 길이와 <varname>max_standby_streaming_delay</varname>는 동일하지 않은 점에 유의해야 한다. 오히려 이것은 운영 서버로부터 수신했던 WAL데이터를 적용하는 것이 허용된 최대 총 시간이다. 
따라서 어떤 쿼리 때문에 상당한 지연이 발생한 경우 후속 충돌 쿼리는 대기 서버가 다시 따라잡을 때까지 유예 시간이 훨씬 짧아진다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-wal-receiver-create-temp-slot" xreflabel="wal_receiver_create_temp_slot">
      <term><varname>wal_receiver_create_temp_slot</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_receiver_create_temp_slot</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Specifies whether the WAL receiver process should create a temporary replication
        slot on the remote instance when no permanent replication slot to use
        has been configured (using <xref linkend="guc-primary-slot-name"/>).
        The default is off.  This parameter can only be set in the
        <filename>postgresql.conf</filename> file or on the server command line.
        If this parameter is changed while the WAL receiver process is running,
        that process is signaled to shut down and expected to restart with
        the new setting.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-wal-receiver-status-interval" xreflabel="wal_receiver_status_interval">
<term><varname>wal_receiver_status_interval</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_receiver_status_interval</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
<para>
 대기 서버의 WAL 수신자 프로세스가 복제 프로세스에 대한 정보를 운영 서버 또는 업스트림 스탠바이로 전송하는 최소 빈도를 지정한다.
  이것은 <link linkend="monitoring-pg-stat-replication-view">
       <structname>pg_stat_replication</structname></link> 뷰를 사용하여 볼 수 있다. 
 대기 서버는 작성된 마지막 트랜잭션 로그 위치, 디스크에 기록한 마지막 위치 및 적용된 마지막 위치를 알려 준다. 이 매개 변수의 값은 리포트 지점간 최대 시간 간격이다. 
 업데이트는 쓰기 또는 플러시(flush) 위치가 변경될 때마다 전송되거나
최소한 이 매개 변수가 지정한 빈도로 전송된다.  따라서 적용 위치는
실제 위치보다 약간 뒤처질 수 있다. 
설정값에 단위를 지정하지 않으면, 초로 간주한다.
기본값은 10초다.
이 매개 변수를 0으로 설정하면 상태 업데이트가 완전히 비활성화된다.
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는
서버 커맨드 라인에서만 설정 가능하다.
</para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-hot-standby-feedback" xreflabel="hot_standby_feedback">
<term><varname>hot_standby_feedback</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>hot_standby_feedback</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
핫 스탠바이가 대기 서버에서 현재 실행 중인 쿼리에 대해 운영 서버 또는 업스트림 스탠바이로 피드백을 전송할 것인지를 지정한다. 
이 매개 변수는 클린업 레코드에 의해 야기된 쿼리 취소를 없애는 데 사용할 수 있지만 일부 작업 부하의 경우 운영 서버에서 데이터베이스 팽창을 초래할 수 있다. 
피드백 메시지는 <varname>wal_receiver_status_interval</varname>당 한 번 이상 전송되지 않는다. 기본값은 <literal>off</literal>이다. 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
케스케이드형 복제를 사용 중인 경우 운영 서버에 도달할 때까지 피드백이 상류로 전달된다. 상류 전달 외에, 대기 서버는 수신하는 피드백을 다른 용도로 사용하지 않는다.
 </para>
       <para>
        This setting does not override the behavior of
        <varname>old_snapshot_threshold</varname> on the primary; a snapshot on the
        standby which exceeds the primary's age threshold can become invalid,
        resulting in cancellation of transactions on the standby.  This is
        because <varname>old_snapshot_threshold</varname> is intended to provide an
        absolute limit on the time which dead rows can contribute to bloat,
        which would otherwise be violated because of the configuration of a
        standby.
       </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-receiver-timeout" xreflabel="wal_receiver_timeout">
<term><varname>wal_receiver_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_receiver_timeout</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
지정된 시간 이상 작동되지 않은 복제 연결이 중단된다.  이것은
대기 서버가 프라이머리 노드 충돌 또는 네트워크 중단을 검출할 때 유용하다. 
설정값에 단위를 지정하지 않으면 밀리세컨드로 간주한다.
기본값은 60초다.
0 값은 시스템 타임아웃 메커니즘을 비활성화한다.  이
매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버
커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-wal-retrieve-retry-interval" xreflabel="wal_retrieve_retry_interval">
      <term><varname>wal_retrieve_retry_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_retrieve_retry_interval</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        스트리밍 복제 로그나, 로컬 <filename>pg_wal</filename> 
        디렉터리나, WAL 아카이브로 쌓이는 트랜잭션 로그가 없을 때, 
        복제 작업을 다시 진행하기 위해서 기다리는 최대 시간을 지정한다.
        설정값에 단위를 지정하지 않으면, 밀리세컨드로 간주한다.
        기본값은 5초다.
        이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드
        라인에서만 설정 가능하다.
       </para>
       <para>
        이 설정은 대기 서버가 복구 작업을 
        진행할 때 새 WAL 자료를 기다리는 시간을 제어하는데 유용하다.
        예를 들어, 아카이브 기반 복구 작업에서 
        이 시간을 줄여서 보다 민첩하게 새로운 WAL 로그 자료를 
        반영할 수 있다.  또는 트랜잭션 량이 그리 많지 않은 시스템에서는
        이 값을 늘려 필요한 WAL 아카이브 조각들을 요청하는 작업을 
        좀 더 줄일 수 있다.  예를 들어 이런 요청 작업 자체가 과금 대상이 
        되는 클라우드 환경에서는 이 값을 적절히 조절해서 
        이용 요금을 최적화 할 수 있을 것이다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-recovery-min-apply-delay" xreflabel="recovery_min_apply_delay">
      <term><varname>recovery_min_apply_delay</varname> (<type>integer</type>)
      <indexterm>
        <primary><varname>recovery_min_apply_delay</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        By default, a standby server restores WAL records from the
        sending server as soon as possible. It may be useful to have a time-delayed
        copy of the data, offering opportunities to correct data loss errors.
        This parameter allows you to delay recovery by a specified amount
        of time.  For example, if
        you set this parameter to <literal>5min</literal>, the standby will
        replay each transaction commit only when the system time on the standby
        is at least five minutes past the commit time reported by the master.
        If this value is specified without units, it is taken as milliseconds.
        The default is zero, adding no delay.
       </para>
       <para>
        It is possible that the replication delay between servers exceeds the
        value of this parameter, in which case no delay is added.
        Note that the delay is calculated between the WAL time stamp as written
        on master and the current time on the standby. Delays in transfer
        because of network lag or cascading replication configurations
        may reduce the actual wait time significantly. If the system
        clocks on master and standby are not synchronized, this may lead to
        recovery applying records earlier than expected; but that is not a
        major issue because useful settings of this parameter are much larger
        than typical time deviations between servers.
       </para>
       <para>
        The delay occurs only on WAL records for transaction commits.
        Other records are replayed as quickly as possible, which
        is not a problem because MVCC visibility rules ensure their effects
        are not visible until the corresponding commit record is applied.
       </para>
       <para>
        The delay occurs once the database in recovery has reached a consistent
        state, until the standby is promoted or triggered. After that the standby
        will end recovery without further waiting.
       </para>
       <para>
        This parameter is intended for use with streaming replication deployments;
        however, if the parameter is specified it will be honored in all cases
        except crash recovery.

        <varname>hot_standby_feedback</varname> will be delayed by use of this feature
        which could lead to bloat on the master; use both together with care.

        <warning>
         <para>
          Synchronous replication is affected by this setting when <varname>synchronous_commit</varname>
          is set to <literal>remote_apply</literal>; every <literal>COMMIT</literal>
          will need to wait to be applied.
         </para>
        </warning>
       </para>
       <para>
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-replication-subscriber">
     <title>Subscribers</title>

     <para>
      These settings control the behavior of a logical replication subscriber.
      Their values on the publisher are irrelevant.
     </para>

     <para>
      Note that <varname>wal_receiver_timeout</varname>,
      <varname>wal_receiver_status_interval</varname> and
      <varname>wal_retrieve_retry_interval</varname> configuration parameters
      affect the logical replication workers as well.
     </para>

     <variablelist>

     <varlistentry id="guc-max-logical-replication-workers" xreflabel="max_logical_replication_workers">
      <term><varname>max_logical_replication_workers</varname> (<type>int</type>)
      <indexterm>
       <primary><varname>max_logical_replication_workers</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Specifies maximum number of logical replication workers. This includes
        both apply workers and table synchronization workers.
       </para>
       <para>
        Logical replication workers are taken from the pool defined by
        <varname>max_worker_processes</varname>.
       </para>
       <para>
        The default value is 4.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-sync-workers-per-subscription" xreflabel="max_sync_workers_per_subscription">
      <term><varname>max_sync_workers_per_subscription</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_sync_workers_per_subscription</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Maximum number of synchronization workers per subscription. This
        parameter controls the amount of parallelism of the initial data copy
        during the subscription initialization or when new tables are added.
       </para>
       <para>
        Currently, there can be only one synchronization worker per table.
       </para>
       <para>
        The synchronization workers are taken from the pool defined by
        <varname>max_logical_replication_workers</varname>.
       </para>
       <para>
        The default value is 2.
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
 </sect1>

 <sect1 id="runtime-config-query">
<title>쿼리 플랜</title>

<sect2 id="runtime-config-query-enable">
 <title>플래너 방법 환경 설정</title>

<para>
 이 환경 설정 매개 변수는 쿼리 옵티마이저에 의해 선택된 쿼리 플랜에 영향을 주는 대략적인 방법을 제공한다. 
 특정 쿼리에 대한 옵티마이저에 의해 선택된 기본 플랜이 최적이 아닌 경우 <emphasis>임시</emphasis> 솔루션이 이 환경 설정 매개 변수 중 하나를 사용하여 옵티마이저가 다른 플랜을 선택하게 강제할 수 있다. 
 옵티마이저가 선택한 플랜의 수준을 개선하는 더 나은 방법은 플래너 비용 상수를 조절하고(<xref linkend="runtime-config-query-constants"/> 참조), <xref linkend="sql-analyze"/>를 수동으로 실행하고, <xref
 linkend="guc-default-statistics-target"/> 환경 설정 매개 변수 늘리고, <command>ALTER TABLE SET
 STATISTICS</command>를 사용하여 특정 칼럼에 대해 수집된 통계량을 늘리는 것이다.
</para>

 <variablelist>
 <varlistentry id="guc-enable-bitmapscan" xreflabel="enable_bitmapscan">
<term><varname>enable_bitmapscan</varname> (<type>boolean</type>)
<indexterm>
 <primary>bitmap scan</primary>
</indexterm>
<indexterm>
 <primary><varname>enable_bitmapscan</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 bitmap-scan plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-enable-gathermerge" xreflabel="enable_gathermerge">
      <term><varname>enable_gathermerge</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_gathermerge</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Enables or disables the query planner's use of gather
        merge plan types. The default is <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-enable-hashagg" xreflabel="enable_hashagg">
<term><varname>enable_hashagg</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_hashagg</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 hashed aggregation plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-hashjoin" xreflabel="enable_hashjoin">
<term><varname>enable_hashjoin</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_hashjoin</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 hash-join plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-enable-incremental-sort" xreflabel="enable_incremental_sort">
      <term><varname>enable_incremental_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_incremental_sort</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Enables or disables the query planner's use of incremental sort steps.
        The default is <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-enable-indexscan" xreflabel="enable_indexscan">
<term><varname>enable_indexscan</varname> (<type>boolean</type>)
<indexterm>
 <primary>index scan</primary>
</indexterm>
<indexterm>
 <primary><varname>enable_indexscan</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 index-scan plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-indexonlyscan" xreflabel="enable_indexonlyscan">
<term><varname>enable_indexonlyscan</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_indexonlyscan</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 index-only-scan plan types 사용을 활성화 또는 비활성화한다
(<xref linkend="indexes-index-only-scans"/> 참조).  기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-material" xreflabel="enable_material">
<term><varname>enable_material</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_material</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 materialization의 사용을 활성화 또는 비활성화한다. materialization을 완전히 억제하는 것은 어렵지만 이 변수를 해제하면 정확도가 요구되는 경우 외에는 플래너의 materialize 노드 삽입이 방지된다. 기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-mergejoin" xreflabel="enable_mergejoin">
<term><varname>enable_mergejoin</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_mergejoin</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 merge-join plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-nestloop" xreflabel="enable_nestloop">
<term><varname>enable_nestloop</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_nestloop</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 nested-loop join plans 사용을 활성화 또는 비활성화한다. 
nested-loop joins를 완전히 억제하는 것은 어렵지만 이 변수를 해제하면 사용 가능한 다른 방법이 있는 경우 플래너가 하나를 사용하는 것이 방지된다. 기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-enable-parallel-append" xreflabel="enable_parallel_append">
      <term><varname>enable_parallel_append</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_parallel_append</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Enables or disables the query planner's use of parallel-aware
        append plan types. The default is <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-parallel-hash" xreflabel="enable_parallel_hash">
      <term><varname>enable_parallel_hash</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>enable_parallel_hash</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Enables or disables the query planner's use of hash-join plan
        types with parallel hash. Has no effect if hash-join plans are not
        also enabled. The default is <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-partition-pruning" xreflabel="enable_partition_pruning">
      <term><varname>enable_partition_pruning</varname> (<type>boolean</type>)
       <indexterm>
        <primary><varname>enable_partition_pruning</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Enables or disables the query planner's ability to eliminate a
        partitioned table's partitions from query plans.  This also controls
        the planner's ability to generate query plans which allow the query
        executor to remove (ignore) partitions during query execution.  The
        default is <literal>on</literal>.
        See <xref linkend="ddl-partition-pruning"/> for details.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-partitionwise-join" xreflabel="enable_partitionwise_join">
      <term><varname>enable_partitionwise_join</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_partitionwise_join</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        쿼리 실행 계획기가 파티션와이즈 조인을 사용할지를 지정한다.
        파티션와이즈 조인이란 각 짝이 맞는 하위 파티션 테이블들 끼리
        조인 작업을 하는 것을 말한다.  현재 버전에서의 파티션와이즈
        조인은 조인 조건에 모든 파티션 키를 사용하는 경우에만 
        작동한다.  각 조인 칼럼의 자료형도 같아야하며, 하위 파티션
        집합도 각각 짝이 맞아야한다.  파티션와이즈 조인 계획 짜는
        작업은 보다 많은 CPU 자원과 메모리를 사용하기 때문에, 
        기본값은 <literal>off</literal>다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-partitionwise-aggregate" xreflabel="enable_partitionwise_aggregate">
      <term><varname>enable_partitionwise_aggregate</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_partitionwise_aggregate</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Enables or disables the query planner's use of partitionwise grouping
        or aggregation, which allows grouping or aggregation on a partitioned
        tables performed separately for each partition.  If the <literal>GROUP
        BY</literal> clause does not include the partition keys, only partial
        aggregation can be performed on a per-partition basis, and
        finalization must be performed later.  Because partitionwise grouping
        or aggregation can use significantly more CPU time and memory during
        planning, the default is <literal>off</literal>.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-enable-seqscan" xreflabel="enable_seqscan">
<term><varname>enable_seqscan</varname> (<type>boolean</type>)
<indexterm>
 <primary>sequential scan</primary>
</indexterm>
<indexterm>
 <primary><varname>enable_seqscan</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 sequential scan plan types 사용을 활성화 또는 비활성화한다. 
sequential scans를 완전히 억제하는 것은 어렵지만 이 변수를 해제하면 사용 가능한 다른 방법이 있는 경우 플래너가 하나를 사용하는 것이 방지된다. 기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-sort" xreflabel="enable_sort">
<term><varname>enable_sort</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_sort</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 explicit sort steps 사용을 활성화 또는 비활성화한다. 
explicit sorts를 완전히 억제하는 것은 어렵지만 이 변수를 해제하면 사용 가능한 다른 방법이 있는 경우 플래너가 하나를 사용하는 것이 방지된다. 기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-enable-tidscan" xreflabel="enable_tidscan">
<term><varname>enable_tidscan</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>enable_tidscan</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 플래너의 <acronym>TID</acronym> scan plan types 사용을 활성화 또는 비활성화한다. 기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
 </sect2>
 <sect2 id="runtime-config-query-constants">
 <title>플래너 비용 상수</title>

<para>
 이 절에서 설명하는 <firstterm>cost</firstterm> 변수는 임의의 규모로 계산된다. 동일한 계수로 상향 또는 하향되는 상대적인 값만 플래너의 선택으로 바뀌지 않는다. 기본적으로, 이러한 비용 변수는 순차적 페이지 가져오기 비용을 근거로 한다. 
 즉, <varname>seq_page_cost</varname>는 인습적으로 <literal>1.0</literal>으로 설정되며, 다른 비용 변수는 그것을 기준으로 설정된다. 그러나 사용자가 원한다면 특정 머신에서 밀리초 단위의 실제 실행 시간 같이 다른 스케일을 사용할 수도 있다.
</para>

 <note>
<para>
 아쉽게도 비용 변수에 대한 이상적인 값을 결정하는 제대로 정의된(well-defined) 방법은 없다. 특정한 설치가 수신하는 전체 쿼리 믹스에 대한 평균으로 처리하는 것이 최선이다. 
 이것은 몇 가지 경험에 비추어 값을 변경하는 것은 매우 위험할 수 있음을 의미한다.
</para>
 </note>

 <variablelist>

 <varlistentry id="guc-seq-page-cost" xreflabel="seq_page_cost">
<term><varname>seq_page_cost</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>seq_page_cost</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
플래너가 예상한, 순차 가져오기 시리즈의 일부분인 디스크 페이지 가져오기 비용을 설정한다. 기본값은 1.0이다. 
이 값은 동일한 이름의 테이블스페이스 매개 변수 설정에 의해 특수한 테이블스페이스의 테이블과 인덱스를 오버라이드할 수 있다(<xref linkend="sql-altertablespace"/> 참조).
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-random-page-cost" xreflabel="random_page_cost">
<term><varname>random_page_cost</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>random_page_cost</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
플래너가 예상한, 비순차적으로 가져온 디스크 페이지의 처리 비용을 설정한다. 기본값은 4.0이다. 
이 값은 동일한 이름의 테이블스페이스 매개 변수 설정에 의해 특수한 테이블스페이스의 테이블과 인덱스를 오버라이드할 수 있다(<xref linkend="sql-altertablespace"/> 참조).
 </para>

 <para>
이 값을 <varname>seq_page_cost</varname>에 비례하여 줄이면 시스템이 인덱스 스캔 쪽으로 치우치게 된다. 이 값을 늘리면 인덱스 스캔이 좀 더 비싸진다. 
양쪽 값을 함께 늘리거나 줄여서 CPU 비용에 비례하여 디스크 I/O 비용의 중요도를 변경할 수 있다. 이것은 이후의 매개 변수에서 설명된다.
 </para>

 <para>
기계적 디스크 저장소에 대한 랜덤 액세스는 일반적으로 순차 액세스보다 4배 이상 비싸다. 
그러나 인덱싱된 읽기 같이 디스크에 대한 랜덤 액세스 대부분은 캐시에서 일어나므로 작은 기본값이 사용된다(4.0). 
랜덤 읽기의 90%는 캐싱되는 것으로 예상되는 반면, 기본값은 순차보다 모델링 랜덤 액세스가 40배 느린 것으로 생각될 수 있다.
 </para>

 <para>
사용자의 작업 부하에서 90%의 캐시율이 잘못된 가정인 경우 random_page_cost를
늘려서 랜덤 저장소 읽기의 실제 비용이 반영되도록 할 수 있다.  그에 따라,
총 서버 메모리보다 데이터베이스가 작아서 데이터가 완전히 캐시되는
경우 random_page_cost를 줄이는 것이 적절할 수 있다.  SSD 디스크
같이 랜덤 읽기 비용이 시퀀스에 비해 상대적으로 낮은 저장소는
더 낮은 random_page_cost 값으로 지정하는 것이 더 좋을 것이다.
예, <literal>1.1</literal>
 </para>

 <tip>
<para>
 <varname>random_page_cost</varname>를 <varname>seq_page_cost</varname> 미만으로 설정하는 것이 시스템에서 허용되더라도 실제로는 그렇게 하는 것이 합리적이지 않다. 
 단, 데이터베이스 전체가 RAM에 캐치되는 경우에는 시퀀스 밖 페이지를 손대는 것에 대한 패널티가 없으므로 동일하게 설정하는 것은 괜찮다. 
 또한 과도하게 캐시되는 데이터베이스에서 RAM에 이미 있는 페이지를 가져오는 비용이 일반적인 상태의 것보다 훨씬 적으므로 사용자는 CPU 매개 변수에 비례하여 양쪽 값을 줄여야 한다. 
</para>
 </tip>
</listitem>
 </varlistentry>

 <varlistentry id="guc-cpu-tuple-cost" xreflabel="cpu_tuple_cost">
<term><varname>cpu_tuple_cost</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>cpu_tuple_cost</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
플래너가 예상한 쿼리 도중 각 행의 처리 비용을 설정한다. 기본값은 0.01이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-cpu-index-tuple-cost" xreflabel="cpu_index_tuple_cost">
<term><varname>cpu_index_tuple_cost</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>cpu_index_tuple_cost</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
플래너가 예상한 인덱스 스캔 도중 각 인덱스 항목의 처리 비용을 설정한다. 기본값은 0.005이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-cpu-operator-cost" xreflabel="cpu_operator_cost">
<term><varname>cpu_operator_cost</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>cpu_operator_cost</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
플래너가 예상한, 쿼리 도중 실행된 각 연산자 또는 함수의 처리 비용을 설정한다. 기본값은 0.0025이다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-parallel-setup-cost" xreflabel="parallel_setup_cost">
      <term><varname>parallel_setup_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>parallel_setup_cost</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        병렬 작업 프로세스의 실행 비용에 대한 플래너 추정치. 기본 값은 1000.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-parallel-tuple-cost" xreflabel="parallel_tuple_cost">
      <term><varname>parallel_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>parallel_tuple_cost</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        병렬 작업 프로세스가 다른 프로세스에게 하나의 튜플을 전송하는
        플래너의 비용 추정치. 기본 값은 0.1. 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-min-parallel-table-scan-size" xreflabel="min_parallel_table_scan_size">
      <term><varname>min_parallel_table_scan_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_parallel_table_scan_size</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Sets the minimum amount of table data that must be scanned in order
        for a parallel scan to be considered.  For a parallel sequential scan,
        the amount of table data scanned is always equal to the size of the
        table, but when indexes are used the amount of table data
        scanned will normally be less.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default is 8 megabytes (<literal>8MB</literal>).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-min-parallel-index-scan-size" xreflabel="min_parallel_index_scan_size">
      <term><varname>min_parallel_index_scan_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_parallel_index_scan_size</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Sets the minimum amount of index data that must be scanned in order
        for a parallel scan to be considered.  Note that a parallel index scan
        typically won't touch the entire index; it is the number of pages
        which the planner believes will actually be touched by the scan which
        is relevant.  This parameter is also used to decide whether a
        particular index can participate in a parallel vacuum.  See
        <xref linkend="sql-vacuum"/>.
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default is 512 kilobytes (<literal>512kB</literal>).
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-effective-cache-size" xreflabel="effective_cache_size">
<term><varname>effective_cache_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>effective_cache_size</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
단일 쿼리에 사용할 수 있는 디스크 캐시의 효율적인 크기에 대한 플래너의 가정을 설정한다. 이것은 인덱스를 사용하는 비용 추정에 반영된다. 
값이 클수록 인덱스 스캔이 사용될 가능성이 높다. 값이 작을수록 순차 스캔이 사용될 가능성이 높다. 
이 매개 변수를 설정하는 경우 <productname>PostgreSQL</productname>의 공유 버퍼와, <productname>PostgreSQL</productname> 데이터 파일에 사용되는 커널의 디스크 캐시 부분을 모두 고려해야 한다. 자료가 두 영역에 같이 있을 수 있기 때문이다.
또한 사용 가능한 공간을 공유해야 하므로 서로 다른 테이블에 대해 예상되는 동시 쿼리 수도 고려해야 한다. 
이 매개 변수는 <productname>PostgreSQL</productname>에 의해 할당된 공유 메모리 크기에는 효과가 없으며, 커널 디스크 캐시도 예약하지 않는다. 
추정용으로만 사용된다. 또한 시스템은 디스크 캐시에 쿼리 간 데이터가 잔류할 것이라고 가정하지 않는다. 
        If this value is specified without units, it is taken as blocks,
        that is <symbol>BLCKSZ</symbol> bytes, typically 8kB.
        The default is 4 gigabytes (<literal>4GB</literal>).
        (If <symbol>BLCKSZ</symbol> is not 8kB, the default value scales
        proportionally to it.)
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-jit-above-cost" xreflabel="jit_above_cost">
      <term><varname>jit_above_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>jit_above_cost</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Sets the query cost above which JIT compilation is activated, if
        enabled (see <xref linkend="jit"/>).
        Performing <acronym>JIT</acronym> costs planning time but can
        accelerate query execution.
        Setting this to <literal>-1</literal> disables JIT compilation.
        The default is <literal>100000</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-inline-above-cost" xreflabel="jit_inline_above_cost">
      <term><varname>jit_inline_above_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>jit_inline_above_cost</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Sets the query cost above which JIT compilation attempts to inline
        functions and operators.  Inlining adds planning time, but can
        improve execution speed.  It is not meaningful to set this to less
        than <varname>jit_above_cost</varname>.
        Setting this to <literal>-1</literal> disables inlining.
        The default is <literal>500000</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-optimize-above-cost" xreflabel="jit_optimize_above_cost">
      <term><varname>jit_optimize_above_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>jit_optimize_above_cost</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Sets the query cost above which JIT compilation applies expensive
        optimizations.  Such optimization adds planning time, but can improve
        execution speed.  It is not meaningful to set this to less
        than <varname>jit_above_cost</varname>, and it is unlikely to be
        beneficial to set it to more
        than <varname>jit_inline_above_cost</varname>.
        Setting this to <literal>-1</literal> disables expensive optimizations.
        The default is <literal>500000</literal>.
       </para>
      </listitem>
     </varlistentry>

 </variablelist>

</sect2>
 <sect2 id="runtime-config-query-geqo">
 <title>유전 쿼리 최적화</title>

 <para>
유전 쿼리 최적화(Genetic Query Optimization, GEQO)는 경험적 추론 방법 검색을 사용하여
최적의 쿼리 실행계획을 선택하는 알고리즘이다. 
이것은 최적의 실행 계획을 찾는 비용이 많이 드는 일반 알고리즘보다
적은 비용으로, 복잡한 쿼리(다수의 관계 조인)의 실행 계획을 짜는 시간을 줄인다.
자세한 내용은 <xref linkend="geqo"/>을 참조 바란다.
 </para>

 <variablelist>

 <varlistentry id="guc-geqo" xreflabel="geqo">
<term><varname>geqo</varname> (<type>boolean</type>)
<indexterm>
 <primary>유전 쿼리 최적화</primary>
</indexterm>
<indexterm>
 <primary>GEQO</primary>
 <see>genetic query optimization</see>
</indexterm>
<indexterm>
 <primary><varname>geqo</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
모든 쿼리에 대해서 이 기능을 사용할지 지정한다.
기본값은 on이다. 
보통은 운영 중 해제하지 않는 것이 최선이며
<varname>geqo_threshold</varname> 변수는 좀 더 세분화된 GEQO 제어를 제공한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-geqo-threshold" xreflabel="geqo_threshold">
<term><varname>geqo_threshold</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>geqo_threshold</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
지정한 만큼의 <literal>FROM</literal> 항목 이상일 때, 
GEQO 기능을 사용한다.
(<literal>FULL OUTER JOIN</literal> 구문은 하나의 <literal>FROM</literal> 항목으로 계산된다.) 기본값은 12이다. 
단순 쿼리의 경우는 일반적으로 정규, 소모성 검색 실행계획기를 사용하는 것이 낫지만,
테이블이 다수 있는 쿼리의 경우 소모성 검색은 너무 오래 걸리며,
차선의 실행계획을 선택하는 것보다 더 오래 걸릴 수도 있다. 
따라서 쿼리 크기에 대한 임계값은 GEQO 사용 관리에 편리한 방법이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-geqo-effort" xreflabel="geqo_effort">
<term><varname>geqo_effort</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>geqo_effort</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
GEQO에서 작업할 최적 쿼리 실행 계획을 찾는 시간과 
품질을 조정하는 값이다.
이 변수는 1 ~ 10 사이의 정수형이여야 한다. 
기본값은 5이다. 값이 클수록 실행 계획을 짜는 시간이 늘어나지만,
효율적인 쿼리 실행 계획이 선택될 가능성도 높아진다.
 </para>

 <para>
<varname>geqo_effort</varname>가 직접 하는 일은 실제로 없다.
GEQO 동작에 영향을 미치는 다른 변수에 대한 기본 값을 계산하는 데에만 이용된다(아래에 설명). 
원한다면 그 대신 다른 매개 변수를 직접 설정할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-geqo-pool-size" xreflabel="geqo_pool_size">
<term><varname>geqo_pool_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>geqo_pool_size</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
GEQO에서 사용되는 풀 크기를 제어한다. 풀 크기는 만드는 실행 계획 종류의 수이다.
이것은 최소 2 이상의 유용한 값이어야 하며, 일반적으로 100 ~ 1000이다.
0(기본값)으로 설정되면 적정값이 <varname>geqo_effort</varname>
값과 쿼리에서 사용하는 테이블 수를 고려하여 자동 계산된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-geqo-generations" xreflabel="geqo_generations">
<term><varname>geqo_generations</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>geqo_generations</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
알고리즘 반복 숫자이자, GEQO에서 사용되는 생성 수를 제어한다.
이것은 최소 1 이상이어야 하며, 유용한 값은 풀 크기와 동일한 범위 내이다. 
0(기본값)으로 설정되면 적정값이 <varname>geqo_pool_size</varname> 값에 따른다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-geqo-selection-bias" xreflabel="geqo_selection_bias">
<term><varname>geqo_selection_bias</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>geqo_selection_bias</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
GEQO에 의해 사용되는 선택 편향 관련 작업을 제어한다.
선택 편향이란 자연 선택 기준값이 된다. 값은 1.50 ~ 2.00일 수 있으며, 기본값 2.00.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-geqo-seed" xreflabel="geqo_seed">
<term><varname>geqo_seed</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>geqo_seed</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
조인 순서 검색 공간의 랜덤 경로를 선택하기 위해 
GEQO에 의한 난수 발생기의 기본값을 제어한다.
값은 0(기본값) ~ 1일 수 있다. 
값을 변경하면 탐색할 조인 경로 집합이 바뀌고 결과적으로
발견된 최상의 경로가 좋을 수도 있고 나쁠 수도 있다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>
 <sect2 id="runtime-config-query-other">
 <title>실행 계획기 관련 기타 옵션들</title>

 <variablelist>

 <varlistentry id="guc-default-statistics-target" xreflabel="default_statistics_target">
<term><varname>default_statistics_target</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>default_statistics_target</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>ALTER TABLE
SET STATISTICS</command>를 통해 설정된 칼럼 특정 타겟 없이, 테이블 칼럼에 대한 기본 통계 타겟을 설정한다. 
큰 값을 설정하면 <command>ANALYZE</command>를 수행하는 데 필요한 시간이 늘어나지만 플래너 평가 수준을 높일 수 있다. 기본값은 100이다. <productname>PostgreSQL</productname> 쿼리 플래너에 의한 통계 사용에 대한 내용은 <xref linkend="planner-stats"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-constraint-exclusion" xreflabel="constraint_exclusion">
<term><varname>constraint_exclusion</varname> (<type>enum</type>)
<indexterm>
 <primary>constraint exclusion</primary>
</indexterm>
<indexterm>
 <primary><varname>constraint_exclusion</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
쿼리 최적화를 위해 쿼리 플래너의 테이블 제약 조건을 제어한다. 
<varname>constraint_exclusion</varname>의 허용 값은 <literal>on</literal>(모든 테이블에 대해 제약 조건 검사), <literal>off</literal>(제약 조건 검사 안함)
및 <literal>partition</literal> (상속 자식 테이블 
및 <literal>UNION ALL</literal> 하위 쿼리에 대해서만 제약 조건 검사)이다. 
<literal>partition</literal>은 기본 설정이다. 
        이 설정은 옛부터 사용했던 상속 테이블 성능을 높이는데 가끔 사용된다.
</para>

 <para>
이 매개 변수가 이것을 특정 테이블에 대해 허용하면 플래너가 쿼리 조건을 테이블의 <literal>CHECK</literal> 제약 조건과 비교하고 제약 조건에 위배되는 테이블을 검색하는 것은 생략한다. 
예를 들면:

<programlisting>
CREATE TABLE parent(key integer, ...);
CREATE TABLE child1000(check (key between 1000 and 1999)) INHERITS(parent);
CREATE TABLE child2000(check (key between 2000 and 2999)) INHERITS(parent);
...
SELECT * FROM parent WHERE key = 2400;
</programlisting>

제약 조건 배제가 활성화되면 이 <command>SELECT</command>는 성능 개선을 위해 <structname>child1000</structname>을 일절 스캔하지 않는다.
 </para>

 <para>
현재, 제약 조건 배제는 옛부터 사용했던 
상속 기반 테이블 파티션에 주로 사용되는 경우에만 기본값으로
활성화된다.  모든 테이블에 대해 활성화되며, 간단한 쿼리에도 눈에 띄게
플래닝 오버헤드가 가중되어 간단한 쿼리의 장점이 상쇄된다. 
전통적인 상속 기반 파티션된 테이블이 없을 경우 전적으로 해제하는 것이 좋다.
(Note that the equivalent feature for
        partitioned tables is controlled by a separate parameter,
        <xref linkend="guc-enable-partition-pruning"/>.)
 </para>

 <para>
제약 사항 배제 기반 파티셔닝에 대한 자세한
내용은 <xref linkend="ddl-partitioning-constraint-exclusion"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-cursor-tuple-fraction" xreflabel="cursor_tuple_fraction">
<term><varname>cursor_tuple_fraction</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>cursor_tuple_fraction</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
검색할 커서 행의 분할에 대한 플래너의 추정치를 설정한다. 기본값은 0.1이다. 
값이 작을수록 플래너가 커서에 대해 <quote>fast start</quote> 플랜을 사용하도록 유도되고, 그러면 전체 행을 가져오느라 시간이 오래 걸리는 와중에 처음 몇 개의 행만 빠르게 검색된다. 
값이 클수록 총 예상 시간이 중요해진다. 최대 설정 1.0에서는 커서가 정확히 일반 쿼리처럼 플랜되어 총 예상 시간만 고려되고, 첫 번째 행을 얼마나 빨리 가져오는지는 고려하지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-from-collapse-limit" xreflabel="from_collapse_limit">
<term><varname>from_collapse_limit</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>from_collapse_limit</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
결과로 나온 <literal>FROM</literal> 목록에 이 숫자만큼의 항목이 없을 경우 플래너가 하위 쿼리를 상위 쿼리에 병합한다. 값이 작을수록 플래닝 시간은 짧아지지만 하위 쿼리 플랜이 나올 수 있다. 
기본값은 8이다. 자세한 내용은 <xref linkend="explicit-joins"/>을 참조 바란다.
 </para>

 <para>
이 값을 <xref linkend="guc-geqo-threshold"/> 이상으로 설정하면 geqo 플래너의 사용이 트리거되어 결과적으로 최적화되지 않은 플랜이 된다. <xref linkend="runtime-config-query-geqo"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-jit" xreflabel="jit">
      <term><varname>jit</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Determines whether <acronym>JIT</acronym> compilation may be used by
        <productname>PostgreSQL</productname>, if available (see <xref
        linkend="jit"/>).
        The default is <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-join-collapse-limit" xreflabel="join_collapse_limit">
<term><varname>join_collapse_limit</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>join_collapse_limit</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
결과 목록이 이 항목에 미치지 못할 경우 플래너는 명시적 <literal>JOIN</literal> 구문(<literal>FULL JOIN</literal> 제외)을 <literal>FROM</literal> 항목으로 재작성한다. 값이 작을수록 플래닝 시간은 짧아지지만 하위 쿼리 플랜이 나올 수 있다.
 </para>

 <para>
기본적으로 이 변수는 <varname>from_collapse_limit</varname>와 동일하게 설정되며, 대부분의 사용에 적합하다. 1로 설정하면 명시적 <literal>JOIN</literal>의 재정렬이 방지된다. 따라서 이 쿼리에서 지정된 명시적 조인 순서는 관계가 조인되는 실제 순서가 된다. 
쿼리 플래너가 항상 최적의 조인 순서를 선택하는 것은 아니므로 고급 사용자는 이 변수를 임시로 1로 선택한 다음, 원하는 조인 순서를 명시적으로 지정할 수 있다. 자세한 내용은 <xref linkend="explicit-joins"/>을 참조 바란다.
 </para>

 <para>
이 값을 <xref linkend="guc-geqo-threshold"/> 이상으로 설정하면 GEQO 플래너의 사용이 트리거되어 결과적으로 최적화되지 않은 플랜이 된다. 
<xref linkend="runtime-config-query-geqo"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-parallel-leader-participation" xreflabel="parallel_leader_participation">
      <term>
       <varname>parallel_leader_participation</varname> (<type>boolean</type>)
       <indexterm>
        <primary>
         <varname>parallel_leader_participation</varname> configuration
         parameter
        </primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        Allows the leader process to execute the query plan under
        <literal>Gather</literal> and <literal>Gather Merge</literal> nodes
        instead of waiting for worker processes.  The default is
        <literal>on</literal>.  Setting this value to <literal>off</literal>
        reduces the likelihood that workers will become blocked because the
        leader is not reading tuples fast enough, but requires the leader
        process to wait for worker processes to start up before the first
        tuples can be produced.  The degree to which the leader can help or
        hinder performance depends on the plan type, number of workers and
        query duration.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-force-parallel-mode" xreflabel="force_parallel_mode">
      <term><varname>force_parallel_mode</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>force_parallel_mode</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        병렬 쿼리의 사용은 더 이상 성능 향상이 기대되지 않는 쿼리를 테스트하는
        목적으로 사용될 수 있다. <varname>force_parallel_mode</varname> 값은
        <literal>off</literal> (성능 향상이 예상될 경우에만 병렬 처리 사용),
        <literal>on</literal> (안전하다고 생각되는 경우에 모든 쿼리에 병렬 처리 사용),
        <literal>regress</literal> (<literal>on</literal>과 같지만 아래 설명과 같이 추가 설정
        가능)이 사용 가능하다. 
       </para>

       <para>
        <literal>on</literal>이면, 안전할 경우 모든 쿼리의 실행 계획 상단에
        <literal>Gather</literal> 노드가 추가되며 병렬 작업자의 내부에 쿼리가
        실행된다. (이 값이 <literal>on</literal>이면)병렬 작업자가 작동 가능하지
        않거나 사용이 불가능 할 때라도, 병렬처리에서 서브 트랜잭션 시작과
        같은 금지된 작업은 플래너가 쿼리가 실패할 것이라고 생각되지 않는
        한 사용하지 못한다.  이 옵션이 설정되었을 때, 작업이 실패하거나
        예상치 못한 결과가 발생할 경우 쿼리에 의해 사용되는 몇몇 함수는
        <literal>PARALLEL UNSAFE</literal>(또는
         <literal>PARALLEL RESTRICTED</literal> ) 옵션을 지정해야할 필요가 있다.
       </para>

       <para>
        <literal>regress</literal>는 <literal>on</literal>의 기능과 함께 추가적인 효과가
        있으며, 자동화된 회귀 테스트를 원활히 할 목적을 사용한다.  병렬 작업자의
        메시지는 context 라인에 그것이 가리키는 것을 포함하지만 <literal>regress</literal>로
        설정할 경우 병렬 작업이 실행하지 않은 것처럼 출력된다.  이 설정으로
        <literal>Gather</literal> 노드가 추가한 실행계획을 <literal>EXPLAIN</literal>  출력에
        숨겨 병렬처리가 <literal>off</literal>된 것처럼 출력 값이 동일하다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-plan-cache_mode" xreflabel="plan_cache_mode">
      <term><varname>plan_cache_mode</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>plan_cache_mode</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Prepared statements (either explicitly prepared or implicitly
        generated, for example by PL/pgSQL) can be executed using custom or
        generic plans.  Custom plans are made afresh for each execution
        using its specific set of parameter values, while generic plans do
        not rely on the parameter values and can be re-used across
        executions.  Thus, use of a generic plan saves planning time, but if
        the ideal plan depends strongly on the parameter values then a
        generic plan may be inefficient.  The choice between these options
        is normally made automatically, but it can be overridden
        with <varname>plan_cache_mode</varname>.
        The allowed values are <literal>auto</literal> (the default),
        <literal>force_custom_plan</literal> and
        <literal>force_generic_plan</literal>.
        This setting is considered when a cached plan is to be executed,
        not when it is prepared.
        For more information see <xref linkend="sql-prepare"/>.
       </para>
      </listitem>
     </varlistentry>

 </variablelist>
</sect2>
 </sect1>

 <sect1 id="runtime-config-logging">
<title>에러 리포팅 및 로깅</title>

<indexterm zone="runtime-config-logging">
 <primary>server 로그</primary>
</indexterm>

<sect2 id="runtime-config-logging-where">
 <title>Where To 로그</title>

 <indexterm zone="runtime-config-logging-where">
<primary>where to 로그</primary>
 </indexterm>

     <indexterm>
       <primary>current_logfiles</primary>
       <secondary>log_destination 환경 설정 매개 변수</secondary>
     </indexterm>

 <variablelist>

 <varlistentry id="guc-log-destination" xreflabel="log_destination">
<term><varname>log_destination</varname> (<type>string</type>)
<indexterm>
 <primary><varname>log_destination</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<productname>PostgreSQL</productname>은 <systemitem>stderr</systemitem> 및 <systemitem>csvlog</systemitem>, 
<systemitem>syslog</systemitem>를 비롯한 서버 메시지를 로깅하는 몇 가지 메서드를 지원한다. 
Windows의 경우, <systemitem>eventlog</systemitem>로 지원한다. 원하는 로그 대상 목록을 쉼표로 구분하여 이 매개 변수를 설정한다. 
기본값은 <systemitem>stderr</systemitem>로만 로깅하는 것이다. 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
<systemitem>csvlog</systemitem>가 <varname>log_destination</varname>에 포함된 경우 로그 항목은 프로그램으로 로그를 로딩하기 편리한 <quote>comma separated value</quote>(CSV) 형식으로 출력된다. 
자세한 내용은 <xref linkend="runtime-config-logging-csvlog"/>을 참조 바란다. 
CSV 형식 로그 출력을 사용으로 설정하려면 <xref linkend="guc-logging-collector"/>를 사용으로 설정해야 한다.
 </para>

       <para>
        When either <systemitem>stderr</systemitem> or
        <systemitem>csvlog</systemitem> are included, the file
        <filename>current_logfiles</filename> is created to record the location
        of the log file(s) currently in use by the logging collector and the
        associated logging destination. This provides a convenient way to
        find the logs currently in use by the instance. Here is an example of
        this file's content:
<programlisting>
stderr log/postgresql.log
csvlog log/postgresql.csv
</programlisting>

        <filename>current_logfiles</filename> is recreated when a new log file
        is created as an effect of rotation, and
        when <varname>log_destination</varname> is reloaded.  It is removed when
        neither <systemitem>stderr</systemitem>
        nor <systemitem>csvlog</systemitem> are included
        in <varname>log_destination</varname>, and when the logging collector is
        disabled.
       </para>

 <note>
<para>
 대부분의 Unix 시스템에서 <varname>log_destination</varname> 옵션의 <application>syslog</application>를 사용하려면 <systemitem>syslog</systemitem> 데몬의 환경 설정을 변경해야 한다. 
 <productname>PostgreSQL</productname>은 <application>syslog</application> 기능 <literal>LOCAL0</literal> ~ <literal>LOCAL7</literal>(<xref
 linkend="guc-syslog-facility"/> 참조)로 로깅할 수 있지만 대부분의 플랫폼에서 기본값 <application>syslog</application> 환경 설정은 모든 해당 메시지를 취소한다. 
 이것이 작동되게 하려면 다음과 같은 문장을,
<programlisting>
local0.*/var/log/postgresql
</programlisting>
 <application>syslog</application> 데몬의 환경 설정 파일에 추가해야 할 수 있다.
</para>
<para>
 Windows에서 <varname>log_destination</varname>의 <literal>eventlog</literal> 옵션을 사용하는 경우 이벤트 소스와 라이브러리를 운영 체제에 등록해서 Windows 이벤트 뷰어가 이벤트 로그 메시지를 명확하게 표시하도록 해야 한다. 
 자세한 내용은 <xref linkend="event-log-registration"/>을 참조 바란다.
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-logging-collector" xreflabel="logging_collector">
<term><varname>logging_collector</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>logging_collector</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 이 매개 변수는 <systemitem>stderr</systemitem>로 전송된 로그 메시지를 캡처하여 로그 파일로 리다이렉트하는 <firstterm>logging collector</firstterm> 백그라운드 프로세스를 활성화한다. 
 일부 메시지 유형은 <application>syslog</application> 출력에 나타나지 않을 수 있으므로 <application>syslog</application>에 로깅하는 것보다 이 방법은 대체로 유용하다. 
 (공통된 예시 중 한 가지는 동적 링커 실패 메시지이고, 또 다른 예시는 <varname>archive_command</varname> 같은 스크립트에서 생성된 에러 메시지이다.) 이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>

 <note>
<para>
 logging collector를 사용하지 않고 <systemitem>stderr</systemitem>에 로깅하는 것이 가능하다. 서버의 <systemitem>stderr</systemitem>가 다이렉트된 곳이면 어디든 로그 메시지가 출력된다. 
 그러나, 해당 메서드는 로그 파일을 로테이션하는 편리한 방법을 제공하지 않으므로 로그 양이 적을 때만 적당하다. 
 또한 logging collector를 사용하지 않는 일부 플랫폼은 복수 프로세스가 동일한 로그 파일에 동시에 쓰기 때문에 서로가 덮어쓰기 되므로 결과적으로 로그 출력이 왜곡되거나 분실된다.
</para>
 </note>

 <note>
<para>
logging collector는 메시지 분실을 방지하는 용도로 고안되었다. 이것은 부하가 매우 심한 경우에, 컬렉터가 뒤처졌을 경우 서버 프로세스가 추가 로그 메시지의 전송을 시도하면서 차단이 일어날 수 있다. 
반대로, 기록할 수 없을 때는 <application>syslog</application>가 메시지를 드롭하는데, 이것은 이러한 상황에서 일부 메시지를 로깅하는 데는 실패했지만 시스템의 나머지는 블로킹하지 않음을 의미한다.
</para>
 </note>

</listitem>
 </varlistentry>

 <varlistentry id="guc-log-directory" xreflabel="log_directory">
<term><varname>log_directory</varname> (<type>string</type>)
<indexterm>
 <primary><varname>log_directory</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>logging_collector</varname>를 사용으로 설정하면 이 매개 변수는 로그 파일이 생성되는 디렉터리를 결정한다. 절대 경로 또는 클러스터 데이터 디렉터리에 대한 상대 경로로 설정할 수 있다. 
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 기본값은 <literal>log</literal>이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-filename" xreflabel="log_filename">
<term><varname>log_filename</varname> (<type>string</type>)
<indexterm>
 <primary><varname>log_filename</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>logging_collector</varname>를 사용으로 설정하면 이 매개 변수는 생성된 로그 파일의 파일 이름을 설정한다. 
값은 <function>strftime</function> 패턴으로 처리되므로, <literal>%</literal> 이스케이프를 사용하여 시간에 따라 바뀌는 파일 이름을 지정할 수 있다. (시간대 의존적 <literal>%</literal> 이스케이프가 있을 경우 <xref linkend="guc-log-timezone"/>에서 지정된 시간대로 계산된다.) 
지원되는 <literal>%</literal> 이스케이프는 Open Group의 <ulink
url="https://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html">strftime
</ulink> 규격에 등재된 것과 유사하다. 시스템의 <systemitem>strftime</systemitem>이 직접 사용되지는 않으므로 플랫폼 특정(비표준) 확장자가 효력이 없다. 기본값은 <literal>postgresql-%Y-%m-%d_%H%M%S.log</literal>이다.
 </para>
 <para>
이스케이프 없이 파일 이름을 지정하면 로그 로테이션 유틸리티를 사용하여 결국에는 전체 파일이 채워지는 것을 방지하는 계획을 세워야 한다. 
8.4 이전 릴리스에서, <literal>%</literal> 이스케이프가 사용되지 않으면 <productname>PostgreSQL</productname>은 새 로그 파일 생성 시간 epoch를 추가했었는데, 이 기능은 사라졌다. 
 </para>
 <para>
<varname>log_destination</varname>에서 CSV 형식 출력을 사용으로 설정한 경우 타임스탬프 로그 파일 이름 뒤에 <literal>.csv</literal>가 추가되어 CSV 형식 출력 파일 이름이 만들어진다. (<varname>log_filename</varname>이 <literal>.log</literal>로 끝나는 경우 접미사가 대신 사용된다.)
 </para>
 <para>
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-file-mode" xreflabel="log_file_mode">
<term><varname>log_file_mode</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>log_file_mode</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
Unix 시스템에서, 이 매개 변수는 <varname>logging_collector</varname>가 사용으로 설정된 경우 로그 파일에 대한 권한을 설정한다. (Microsoft Windows에서 이 매개 변수는 무시된다.) 
매개 변수 값은, <function>chmod</function> 및 <function>umask</function> 시스템 쉘에서 수용되는 형식으로 지정된 숫자 형식이어야 한다. (관례적인 8진수 형식을 사용하려면 <literal>0</literal>(영)으로 시작되는 숫자여야 한다.)
 </para>
 <para>
기본 권한은, 서버 소유자만 로그 파일을 읽거나 쓸 수 있는 <literal>0600</literal>이다. 일반적으로 유용한 다른 설정은, 소유자 그룹의 멤버가 파일을 읽을 수 있는 <literal>0640</literal>이다. 
그러나, 해당 설정을 사용하려면 클러스터 데이터 디렉터리 바깥에서도 파일을 저장하도록 <xref linkend="guc-log-directory"/>를 변경해야 한다. 
로그 파일에 중요한 데이터가 포함되어 있을 수도 있으므로 어떤 경우든 로그 파일을 누구나 읽을 수 있게 하는 것은 현명하지 못하다.
 </para>
 <para>
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-rotation-age" xreflabel="log_rotation_age">
<term><varname>log_rotation_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>log_rotation_age</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>logging_collector</varname>를 사용으로 설정하면 이 매개 변수는 개별 로그 파일의 최대 수명을 결정한다. 여기서 지정된 분 시간이 경과된 후 새로운 로그 파일이 생성된다. 
설정값에 단위를 지정하지 않으면 분으로 간주한다.
기본값은 24시간이다.
시간을 기준으로 새 로그 파일을 생성하지 않으려면 0으로 설정한다.  이
매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-rotation-size" xreflabel="log_rotation_size">
<term><varname>log_rotation_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>log_rotation_size</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>logging_collector</varname>를 사용으로 설정하면 이 매개 변수는 개별 로그 파일의 최대 크기를 결정한다. 여기서 지정된 킬로바이트가 로그 파일에 방출된 후 새로운 
로그 파일이 생성된다. 
설정값에 단위를 지정하지 않으면, kb로 간주한다.
기본값은 10MB다.
크기를 기준으로 새 로그 파일을 생성하지 않으려면 0으로 설정한다. 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-truncate-on-rotation" xreflabel="log_truncate_on_rotation">
<term><varname>log_truncate_on_rotation</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_truncate_on_rotation</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>logging_collector</varname>가 사용으로 설정된 경우 이 매개 변수에 의해 <productname>PostgreSQL</productname>가 이름이 동일한 기존 로그 파일에 추가하는 것이 아니라 파일을 비운다(덮어쓰기). 
단, 비우기는 서버 시작 시 또는 크기 기준 로테이션이 아니라 시간 기준 로테이션에 의해 새 파일이 열린 경우에만 실행된다. off인 경우에는 모든 경우에 기존 파일이 추가된다. 
예를 들면, <literal>postgresql-%H.log</literal> 같은 <varname>log_filename</varname>과 함께 이 설정을 사용하면 24시간마다 로그 파일을 생성하고 주기적으로 덮어쓰기 된다. 
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
예: 7일간 로그를 유지하고, 1일 1로그 파일의 이름을 <literal>server_log.Mon</literal>, <literal>server_log.Tue</literal> 등으로 명명하고, 마지막 주의 로그를 이 주의 로그로 자동 덮어쓰기 하려면 <varname>log_filename</varname>은 <literal>server_log.%a</literal>로 설정하고, 
<varname>log_truncate_on_rotation</varname>은 <literal>on</literal>으로 설정하고, <varname>log_rotation_age</varname>는 <literal>1440</literal>으로 설정해야 한다.
 </para>
 <para>
예: 24시간 로그를 유지하고, 1시간당 1개 로그 파일을 생성하되, 로그 파일 크기가 1GB를 초과하면 곧장 로테이션되게 하려면 <varname>log_filename</varname>은 <literal>server_log.%H%M</literal>으로 설정하고, <varname>log_truncate_on_rotation</varname>은 <literal>on</literal>으로 설정하고, 
<varname>log_rotation_age</varname>는 <literal>60</literal>으로 설정하고, <varname>log_rotation_size</varname>는 <literal>1000000</literal>으로 설정해야 한다. <varname>log_filename</varname> 파일에서 <literal>%M</literal>을 포함하면 크기 구동 로테이션으로 시간의 초기 파일 이름과는 다른 파일 이름이 선택되도록 할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-syslog-facility" xreflabel="syslog_facility">
<term><varname>syslog_facility</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>syslog_facility</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<application>syslog</application>에 로깅하도록 설정된 경우 이 매개 변수는 사용할 <application>syslog</application> <quote>facility</quote>를 결정한다.
<literal>LOCAL2</literal>, <literal>LOCAL3</literal>, <literal>LOCAL4</literal>,
<literal>LOCAL5</literal>, <literal>LOCAL6</literal>, <literal>LOCAL7</literal> 중에서 선택할 수 있으며, 기본값은 <literal>LOCAL0</literal>이다. 
시스템의 <application>syslog</application> 데몬에 관한 문서를 참조하기 바란다. 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-syslog-ident" xreflabel="syslog_ident">
<term><varname>syslog_ident</varname> (<type>string</type>)
<indexterm>
 <primary><varname>syslog_ident</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
 <listitem>
<para>
 <application>syslog</application>에 로깅하도록 설정된 경우 이 매개 변수는 <application>syslog</application> 로그에서 <productname>PostgreSQL</productname> 메시지를 식별하기 위해 사용되는 프로그램 이름을 결정한다. 기본값은 <literal>postgres</literal>이다. 
 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
</para>
 </listitem>
</varlistentry>

      <varlistentry id="guc-syslog-sequence-numbers" xreflabel="syslog_sequence_numbers">
       <term><varname>syslog_sequence_numbers</varname> (<type>boolean</type>)
        <indexterm>
         <primary><varname>syslog_sequence_numbers</varname> configuration parameter</primary>
        </indexterm>
       </term>

       <listitem>
        <para>
         When logging to <application>syslog</application> and this is on (the
         default), then each message will be prefixed by an increasing
         sequence number (such as <literal>[2]</literal>).  This circumvents
         the <quote>--- last message repeated N times ---</quote> suppression
         that many syslog implementations perform by default.  In more modern
         syslog implementations, repeated message suppression can be configured
         (for example, <literal>$RepeatedMsgReduction</literal>
         in <productname>rsyslog</productname>), so this might not be
         necessary.  Also, you could turn this off if you actually want to
         suppress repeated messages.
        </para>

        <para>
         This parameter can only be set in the <filename>postgresql.conf</filename>
         file or on the server command line.
        </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-syslog-split-messages" xreflabel="syslog_split_messages">
      <term><varname>syslog_split_messages</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>syslog_split_messages</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        When logging to <application>syslog</application> is enabled, this parameter
        determines how messages are delivered to syslog.  When on (the
        default), messages are split by lines, and long lines are split so
        that they will fit into 1024 bytes, which is a typical size limit for
        traditional syslog implementations.  When off, PostgreSQL server log
        messages are delivered to the syslog service as is, and it is up to
        the syslog service to cope with the potentially bulky messages.
       </para>

       <para>
        If syslog is ultimately logging to a text file, then the effect will
        be the same either way, and it is best to leave the setting on, since
        most syslog implementations either cannot handle large messages or
        would need to be specially configured to handle them.  But if syslog
        is ultimately writing into some other medium, it might be necessary or
        more useful to keep messages logically together.
       </para>

       <para>
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-event-source" xreflabel="event_source">
<term><varname>event_source</varname> (<type>string</type>)
<indexterm>
 <primary><varname>event_source</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<application>event log</application>에 로깅하도록 설정된 경우 이 매개 변수는 syslog 로그에서 <productname>PostgreSQL</productname> 메시지를 식별하기 위해 사용되는 프로그램 이름을 결정한다. 기본값은 <literal>PostgreSQL</literal>이다. 
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

</variablelist>
</sect2>
 <sect2 id="runtime-config-logging-when">
 <title>When To 로그</title>

 <variablelist>

 <varlistentry id="guc-log-min-messages" xreflabel="log_min_messages">
<term><varname>log_min_messages</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>log_min_messages</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버 로그에 기록할 <link linkend="runtime-config-severity-levels">메시지 레벨</link>을
제어한다. 유효 값은 <literal>DEBUG5</literal> 및 <literal>DEBUG4</literal>,
<literal>DEBUG3</literal>, <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
<literal>INFO</literal>, <literal>NOTICE</literal>, <literal>WARNING</literal>,
<literal>ERROR</literal>, <literal>LOG</literal>, <literal>FATAL</literal>, and
<literal>PANIC</literal>이다. 각 레벨에는 후속되는 모든 레벨이 포함된다. 
후속 레벨일수록 메시지가 로그에 적게 전송된다. 기본값은 <literal>WARNING</literal>이다. <literal>LOG</literal>는 여기서 <xref linkend="guc-client-min-messages"/>와는 다른 랭크를 갖는다. 슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-min-error-statement" xreflabel="log_min_error_statement">
<term><varname>log_min_error_statement</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>log_min_error_statement</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
에러 상태를 유발한 SQL 문이 서버 로그에 기록되는 것을 제어한다. 메시지가 
지정된 <link linkend="runtime-config-severity-levels">심각도</link> 이상일 경우 현재 SQL 문이 로그 항목에 포함된다. 
유효 값은 <literal>DEBUG5</literal> 및 
<literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
<literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
<literal>INFO</literal>, <literal>NOTICE</literal>,
<literal>WARNING</literal>, <literal>ERROR</literal>,
<literal>LOG</literal>,
<literal>FATAL</literal>, <literal>PANIC</literal>이다. 기본값은, 
에러, 로그 메시지, 심각한 에러 또는 패닉을 유발한 
문(statement)을 로깅하는 <literal>ERROR</literal>이다. 
실패 문의 로깅을 효율적으로 해제하려면 이 매개 
변수를 <literal>PANIC</literal>으로 설정해야 한다. 슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-min-duration-statement" xreflabel="log_min_duration_statement">
<term><varname>log_min_duration_statement</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>log_min_duration_statement</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
 <listitem>
<para>
 최소한 지정된 시간 이상 쿼리가 실행된 경우 처리 시간과 
그 구문을 로깅되게 한다.  
예를 들어, <literal>250ms</literal>로 설정하면 250ms 이상 실행된 
모든 SQL 문이 로깅된다.  이 매개 변수를 활성화하면 애플리케이션에서 최적화되지
않은 쿼리를 찾아내는 데 도움이 된다. 
설정값에 단위를 지정하지 않으면, 밀리세컨드로 간주한다.
이것을 0으로 설정하면 모든 모든 쿼리가 로깅된다.  <literal>-1</literal>
(기본값)은 이 기능을 비활성화
한다.  슈퍼유저만 이 설정을 변경할 수 있다.
</para>

        <para>
         This overrides <xref linkend="guc-log-min-duration-sample"/>,
         meaning that queries with duration exceeding this setting are not
         subject to sampling and are always logged.
        </para> 

<para>
 확장 쿼리 프로토콜을 사용하는 클라이언트의 경우 Parse, Bind 및 Execute 단계의 지속 시간이 각각 로깅된다.
</para>

 <note>
<para>
 이 옵션을 <xref linkend="guc-log-statement"/>와 함께 사용하면 로그 메시지 지속 시간에 <varname>log_statement</varname>가 반복되지 않으므로 문의 텍스트가 로깅되지 않는다. 
 <application>syslog</application>를 사용하지 않는 경우 프로세스 ID 또는 세션 ID를 사용하여 문 메시지를 나중의 지속 시간 메시지에 연결할 수 있는 <xref linkend="guc-log-line-prefix"/>를 사용하여 PID 또는 세션 ID를 로깅하는 것이 좋다.
</para>
 </note>
 </listitem>
</varlistentry>

     <varlistentry id="guc-log-min-duration-sample" xreflabel="log_min_duration_sample">
      <term><varname>log_min_duration_sample</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_min_duration_sample</varname> configuration parameter</primary>
      </indexterm>
      </term>
       <listitem>
        <para>
         Allows sampling the duration of completed statements that ran for
         at least the specified amount of time.  This produces the same
         kind of log entries as
         <xref linkend="guc-log-min-duration-statement"/>, but only for a
         subset of the executed statements, with sample rate controlled by
         <xref linkend="guc-log-statement-sample-rate"/>.
         For example, if you set it to <literal>100ms</literal> then all
         SQL statements that run 100ms or longer will be considered for
         sampling.  Enabling this parameter can be helpful when the
         traffic is too high to log all queries.
         If this value is specified without units, it is taken as milliseconds.
         Setting this to zero samples all statement durations.
         <literal>-1</literal> (the default) disables sampling statement
         durations. Only superusers can change this setting.
        </para>

        <para>
         This setting has lower priority
         than <varname>log_min_duration_statement</varname>, meaning that
         statements with durations
         exceeding <varname>log_min_duration_statement</varname> are not
         subject to sampling and are always logged.
        </para>

        <para>
         Other notes for <varname>log_min_duration_statement</varname>
         apply also to this setting.
        </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-statement-sample-rate" xreflabel="log_statement_sample_rate">
      <term><varname>log_statement_sample_rate</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>log_statement_sample_rate</varname> configuration parameter</primary>
      </indexterm>
      </term>
       <listitem>
        <para>
         Determines the fraction of statements with duration exceeding
         <xref linkend="guc-log-min-duration-sample"/> that will be logged.
         Sampling is stochastic, for example <literal>0.5</literal> means
         there is statistically one chance in two that any given statement
         will be logged.
         The default is <literal>1.0</literal>, meaning to log all sampled
         statements.
         Setting this to zero disables sampled statement-duration logging,
         the same as setting
         <varname>log_min_duration_sample</varname> to
         <literal>-1</literal>.
         Only superusers can change this setting.
        </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-log-transaction-sample-rate" xreflabel="log_transaction_sample_rate">
      <term><varname>log_transaction_sample_rate</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>log_transaction_sample_rate</varname> configuration parameter</primary>
      </indexterm>
      </term>
       <listitem>
        <para>
         Sets the fraction of transactions whose statements are all logged,
         in addition to statements logged for other reasons.  It applies to
         each new transaction regardless of its statements' durations.
         Sampling is stochastic, for example <literal>0.1</literal> means
         there is statistically one chance in ten that any given transaction
         will be logged.
         <varname>log_transaction_sample_rate</varname> can be helpful to
         construct a sample of transactions.
         The default is <literal>0</literal>, meaning not to log
         statements from any additional transactions.  Setting this
         to <literal>1</literal> logs all statements of all transactions.
         Only superusers can change this setting.
        </para>
       <note>
        <para>
         Like all statement-logging options, this option can add significant
         overhead.
        </para>
       </note>
       </listitem>
     </varlistentry>

 </variablelist>

<para>
 <xref linkend="runtime-config-severity-levels"/>은 <productname>PostgreSQL</productname>에서 사용되는 메시지 심각도 레벨을 설명한다. 
 로깅 출력이 <systemitem>syslog</systemitem> 또는 Windows의 <systemitem>eventlog</systemitem>에 전송되는 경우 심각도 레벨은 표에 나타난 대로 해석된다.
</para>

<table id="runtime-config-severity-levels">
 <title>메시지 심각도 레벨</title>
 <tgroup cols="4">
      <colspec colname="col1" colwidth="1*"/>
      <colspec colname="col2" colwidth="2*"/>
      <colspec colname="col3" colwidth="1*"/>
      <colspec colname="col4" colwidth="1*"/>
<thead>
 <row>
<entry>심각도</entry>
<entry>용도</entry>
<entry><systemitem>syslog</systemitem></entry>
<entry><systemitem>eventlog</systemitem></entry>
 </row>
</thead>

<tbody>
 <row>
<entry><literal>DEBUG1 .. DEBUG5</literal></entry>
<entry>개발자를 위한 상세 정보를 제공한다.</entry>
<entry><literal>DEBUG</literal></entry>
<entry><literal>INFORMATION</literal></entry>
 </row>

 <row>
<entry><literal>INFO</literal></entry>
<entry><command>VACUUM VERBOSE</command>로부터 출력 같은 사용자가 암시적으로 요청한 정보를 제공한다.</entry>
<entry><literal>INFO</literal></entry>
<entry><literal>INFORMATION</literal></entry>
 </row>

 <row>
<entry><literal>NOTICE</literal></entry>
<entry>긴 식별자 잘라내기에 대한 공지 같이 사용자에게 유익한 정보가 제공된다.</entry>
<entry><literal>NOTICE</literal></entry>
<entry><literal>INFORMATION</literal></entry>
 </row>

 <row>
<entry><literal>WARNING</literal></entry>
<entry>트랜잭션 블록 외부로 <command>COMMIT</command> 같은 문제의 가능성이 있는 경고를 제공한다.</entry>
<entry><literal>NOTICE</literal></entry>
<entry><literal>WARNING</literal></entry>
 </row>

 <row>
<entry><literal>ERROR</literal></entry>
<entry>현재 명령이 중단된 원인이 되는 에러를 알려준다.</entry>
<entry><literal>WARNING</literal></entry>
<entry><literal>ERROR</literal></entry>
 </row>

 <row>
<entry><literal>LOG</literal></entry>
<entry>checkpoint 작업 같이 관리자가 관심 있어 할 정보를 알려준다.</entry>
<entry><literal>INFO</literal></entry>
<entry><literal>INFORMATION</literal></entry>
 </row>

 <row>
<entry><literal>FATAL</literal></entry>
<entry>현재 세션이 중단된 원인이 되는 에러를 알려준다.</entry>
<entry><literal>ERR</literal></entry>
<entry><literal>ERROR</literal></entry>
 </row>

 <row>
<entry><literal>PANIC</literal></entry>
<entry>모든 데이터베이스 세션이 중단된 원인이 되는 에러를 알려준다.</entry>
<entry><literal>CRIT</literal></entry>
<entry><literal>ERROR</literal></entry>
 </row>
</tbody>
 </tgroup>
</table>

</sect2>
 <sect2 id="runtime-config-logging-what">
 <title>What To 로그</title>

 <variablelist>

 <varlistentry id="guc-application-name" xreflabel="application_name">
<term><varname>application_name</varname> (<type>string</type>)
<indexterm>
 <primary><varname>application_name</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<varname>application_name</varname>은 <symbol>NAMEDATALEN</symbol> 글자 수(표준 빌드에서 64자) 이내의 string일 수 있다. 이것은 일반적으로 서버 연결 시 애플리케이션에 의해 설정된다. 이름은 <structname>pg_stat_activity</structname> 뷰에 표시되고 CSV 로그 항목에 포함된다. 
<xref linkend="guc-log-line-prefix"/> 매개 변수를 통해 일반 로그 항목에 포함될 수도 있다. 인쇄 가능한 ASCII 문자만 <varname>application_name</varname> 값으로 사용된다. 다른 문자는 물음표(<literal>?</literal>)로 대체된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>debug_print_parse</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>debug_print_parse</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<term><varname>debug_print_rewritten</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>debug_print_rewritten</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<term><varname>debug_print_plan</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>debug_print_plan</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 매개 변수는 다양한 디버깅 출력을 활성화한다. 설정된 경우 결과로 나온 파싱 트리, 쿼리 재작성 출력 또는 실행된 각 쿼리별로 실행 플랜이 인쇄된다. 
이 메시지는 <literal>LOG</literal> 메시지 수준으로 출력되므로 기본적으로 서버 로그에 나타나지만 클라이언트로 전송되지는 않는다. <xref linkend="guc-client-min-messages"/> 및/또는 <xref linkend="guc-log-min-messages"/>를 조절하여 변경할 수 있다. 이 매개 변수의 기본값은 off이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>debug_pretty_print</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>debug_pretty_print</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
설정된 경우, <varname>debug_pretty_print</varname>는 <varname>debug_print_parse</varname>, <varname>debug_print_rewritten</varname> 또는 <varname>debug_print_plan</varname>에 의해 생성된 메시지를 들여쓰기 한다. 
따라서 가독성이 증가하는 대신, off로 설정된 경우의 <quote>compact</quote> 형식보다 출력이 길어진다. 기본값은 on이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-checkpoints" xreflabel="log_checkpoints">
<term><varname>log_checkpoints</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_checkpoints</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
checkpoints 및 restartpoints가 서버 로그에 로깅되게 한다. 일부 통계는 작성된 버퍼 수 및 작성할 때 소요된 시간을 비롯한 로그 메시지에 포함된다. 
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 기본값은 off이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-connections" xreflabel="log_connections">
<term><varname>log_connections</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_connections</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버로의 각 연결 시도 및 성공한 클라이언트 인증 완료가 로깅되게 한다. 이 매개 변수는 세션 시작 후에는 변경할 수 없다. 기본값은 off이다.
 </para>

 <note>
<para>
 <application>psql</application> 같은 일부 클라이언트 프로그램은 패스워드가 필수인지 판단하면서 2번 연결을 시도하므로<quote>connection received</quote> 메시지가 중복되어 나타나도 문제를 뜻하지는 않는다. 
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-disconnections" xreflabel="log_disconnections">
<term><varname>log_disconnections</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_disconnections</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 세션을 중단할 때 외에는 <varname>log_connections</varname>와 유사하게 서버 로그에 한 줄을 출력하고 세션의 지속 시간을 포함한다. 기본값은 off이다. 이 매개 변수는 세션 시작 후에는 변경할 수 없다.
 </para>
</listitem>
 </varlistentry>


 <varlistentry id="guc-log-duration" xreflabel="log_duration">
<term><varname>log_duration</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_duration</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
완료된 모든 문의 지속 시간이 로깅 되게 한다. 기본값은 <literal>off</literal>이다. 슈퍼유저만 이 설정을 변경할 수 있다.
 </para>

 <para>
확장 쿼리 프로토콜을 사용하는 클라이언트의 경우 Parse, Bind 및 Execute 단계의 지속 시간이 각각 로깅된다.
 </para>

 <note>
<para>
 <varname>log_duration</varname>과 <xref linkend="guc-log-min-duration-statement"/>를 0으로 설정하는 것의 차이는 <varname>log_min_duration_statement</varname>를 초과하면 쿼리 텍스트가 강제로 로깅되지만, 이 옵션은 그렇지 않다는 것이다. 
 따라서 <varname>log_duration</varname>이 <literal>on</literal>으로 
설정되고 <varname>log_min_duration_statement</varname>가 양의 값을 갖는 경우
모든 지속 시간이 로깅되지만 쿼리 텍스트는 임계값을 초과하는 문인 경우에만 포함된다. 
 이러한 동작은 고부하 설치에서 통계를 수집할 때 유용하다.
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-error-verbosity" xreflabel="log_error_verbosity">
<term><varname>log_error_verbosity</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>log_error_verbosity</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
로깅된 각 메시지에 대해 서버 로그에 작성되는 상세 내역을 제어한다. 유효 값은, 각각 메시지에 표시되는 필드를 나타내는 <literal>TERSE</literal> 및 
<literal>DEFAULT</literal>, <literal>VERBOSE</literal>이다. 
<literal>TERSE</literal>는 <literal>DETAIL</literal> 및 <literal>HINT</literal>,
<literal>QUERY</literal>, <literal>CONTEXT</literal> 에러 정보의 로깅을 제외한다. 
<literal>VERBOSE</literal> 출력은 <symbol>SQLSTATE</symbol> 에러 코드(<xref linkend="errcodes-appendix"/> 참고) 및 소스 코드 파일 이름, 함수 이름 및 에러 발생 줄 번호를 포함한다. 
슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-hostname" xreflabel="log_hostname">
<term><varname>log_hostname</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_hostname</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
기본적으로, 연결 로그 메시지는 연결 호스트의 IP 주소만 표시한다. 이 매개 변수를 활성화하면 호스트 이름도 로깅된다. 
호스트 이름 설정에 따라 이것이 상당한 성능 패널티를 부과할 수도 있다. 
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-line-prefix" xreflabel="log_line_prefix">
<term><varname>log_line_prefix</varname> (<type>string</type>)
<indexterm>
 <primary><varname>log_line_prefix</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 이것은 각 로그 줄의 처음에 출력되는 <function>printf</function> 스타일 string이다. <literal>%</literal> 문자는 <quote>이스케이프 시퀀스</quote>로 시작되며 아래 요약된 상태 정보로 대체된다. 미인식 이스케이프는 무시된다. 
 다른 문자는 로그 줄에 직접 복사된다. 
 일부 이스케이프는 세션 프로세스에 의해 인식만 된고, 메인 서버 프로세스 같은 백그라운드 프로세스에 의해 빈 것으로 처리된다. 
 상태 정보는 % 뒤, 옵션 앞에 숫자 리터럴을 지정함으로써 왼쪽 또는 오른쪽에 정렬될 수 있다. 
 음의 값은 최소 너비를 갖도록 상태 정보를 오른쪽에서 공백으로 채우고, 양의 값은 왼쪽에서 공백으로 채운다. 
 패딩(padding)은 로그 파일의 가독성을 늘릴 때 유용하다. 
 </para>
 <para>
 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
 기본값은 <literal>'%m [%p] '</literal> 이며 로그 기록 시간과 해당 프로세스 ID다.
 </para>
 <informaltable>
<tgroup cols="3">
 <thead>
<row>
 <entry>Escape</entry>
 <entry>Effect</entry>
 <entry>Session only</entry>
 </row>
</thead>
 <tbody>
<row>
 <entry><literal>%a</literal></entry>
 <entry>어플리케이션 이름</entry>
 <entry>yes</entry>
</row>
<row>
 <entry><literal>%u</literal></entry>
 <entry>사용자 이름</entry>
 <entry>yes</entry>
</row>
<row>
 <entry><literal>%d</literal></entry>
 <entry>데이터베이스 이름</entry>
 <entry>yes</entry>
</row>
<row>
 <entry><literal>%r</literal></entry>
 <entry>원격 호스트 이름 또는 IP 주소 및 원격 포트</entry>
 <entry>yes</entry>
</row>
<row>
 <entry><literal>%h</literal></entry>
 <entry>원격 호스트 이름 또는 IP 주소</entry>
 <entry>yes</entry>
</row>
            <row>
             <entry><literal>%b</literal></entry>
             <entry>백엔드 종류</entry>
             <entry>no</entry>
            </row>
<row>
 <entry><literal>%p</literal></entry>
 <entry>프로세스 ID</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%t</literal></entry>
 <entry>밀리초 없는 타임스탬프</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%m</literal></entry>
 <entry>밀리초 있는 타임스탬프</entry>
 <entry>no</entry>
</row>
<row>
             <entry><literal>%n</literal></entry>
             <entry>밀리초를 포함한 타임스탬프 (Unix epoch 형태)</entry>
             <entry>no</entry>
            </row>
<row>
 <entry><literal>%i</literal></entry>
 <entry>명령 태그: 세션의 현재 명령 유형</entry>
 <entry>yes</entry>
</row>
<row>
 <entry><literal>%e</literal></entry>
 <entry>SQLSTATE 에러 코드</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%c</literal></entry>
 <entry>세션 ID: 아래 참조</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%l</literal></entry>
 <entry>1부터 시작하는 각 세션 또는 프로세스의 로그 줄 번호</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%s</literal></entry>
 <entry>프로세스 시작 타임스탬프</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%v</literal></entry>
 <entry>가상 트랜잭션 ID(backendID/localXID)</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%x</literal></entry>
 <entry>트랜잭션 ID(아무것도 할당되지 않은 경우 0)</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%q</literal></entry>
 <entry>출력은 하지 않지만 이 시점에서 중단을 위한 비 세션 프로세스를 표시하며, 세션 프로세스에 의해 무시된다.</entry>
 <entry>no</entry>
</row>
<row>
 <entry><literal>%%</literal></entry>
 <entry>리터럴 <literal>%</literal></entry>
 <entry>no</entry>
</row>
 </tbody>
</tgroup>
 </informaltable>
         <para>
          The backend type corresponds to the column
          <structfield>backend_type</structfield> in the view
          <link linkend="monitoring-pg-stat-activity-view">
          <structname>pg_stat_activity</structname></link>,
          but additional types can appear
          in the log that don't show in that view.
         </para>

         <para>
 <literal>%c</literal> 이스케이프는 점으로 구분된 4바이트
16진수(선행 0 없음) 2개로 환경 설정되는 의사 고유(quasi-unique)세션을
인쇄한다.  숫자는 프로세스 시작 시간 및 프로세스 ID이므로 해당 항목의
인쇄 공간 절약 방법으로 <literal>%c</literal>를 사용할 수도 있다.  예를
들면, <literal>pg_stat_activity</literal>의 세션 식별자를 생성하려면
아래 쿼리를 사용한다.
<programlisting>
SELECT to_hex(EXTRACT(EPOCH FROM backend_start)::integer) || '.' ||
 to_hex(pid)
FROM pg_stat_activity;
</programlisting>

 </para>

 <tip>
<para>
 <varname>log_line_prefix</varname>에 비어 있지 않은 값을 설정하면 보통은 마지막 문자가 공백이 되도록 해서 로그 줄의 나머지와 육안상 구분이 되게 해야 한다. 
 문장 부호를 사용할 수도 있다.
</para>
 </tip>

 <tip>
<para>
 <application>Syslog</application>는 자체 타임스탬프와 프로세스 ID 정보를 생성하므로 <application>syslog</application>에 로깅하는 경우 사용자는 이러한 이스케이프를 포함하는 것을 원하지 않을 수도 있다.
</para>
 </tip>

       <tip>
        <para>
         The <literal>%q</literal> escape is useful when including information that is
         only available in session (backend) context like user or database
         name.  For example:
<programlisting>
log_line_prefix = '%m [%p] %q%u@%d/%a '
</programlisting>
        </para>
       </tip>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-lock-waits" xreflabel="log_lock_waits">
<term><varname>log_lock_waits</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_lock_waits</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
잠금 획득을 위해 세션이 <xref linkend="guc-deadlock-timeout"/> 이상 대기한 경우 로그 메시지를 생성할 것인지를 제어한다. 
잠금 대기가 성능 저하의 원인이 되는지를 판단할 때 유용하다. 기본값은 <literal>off</literal>이다.
이 설정은 슈퍼유저만 바꿀 수 있다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-log-parameter-max-length" xreflabel="log_parameter_max_length">
      <term><varname>log_parameter_max_length</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_parameter_max_length</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        If greater than zero, each bind parameter value logged with a
        non-error statement-logging message is trimmed to this many bytes.
        Zero disables logging of bind parameters for non-error statement logs.
        <literal>-1</literal> (the default) allows bind parameters to be
        logged in full.
        If this value is specified without units, it is taken as bytes.
        Only superusers can change this setting.
       </para>

       <para>
        This setting only affects log messages printed as a result of
        <xref linkend="guc-log-statement"/>,
        <xref linkend="guc-log-duration"/>, and related settings.  Non-zero
        values of this setting add some overhead, particularly if parameters
        are sent in binary form, since then conversion to text is required.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-parameter-max-length-on-error" xreflabel="log_parameter_max_length_on_error">
      <term><varname>log_parameter_max_length_on_error</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_parameter_max_length_on_error</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        If greater than zero, each bind parameter value reported in error
        messages is trimmed to this many bytes.
        Zero (the default) disables including bind parameters in error
        messages.
        <literal>-1</literal> allows bind parameters to be printed in full.
        If this value is specified without units, it is taken as bytes.
       </para>

       <para>
        Non-zero values of this setting add overhead, as
        <productname>PostgreSQL</productname> will need to store textual
        representations of parameter values in memory at the start of each
        statement, whether or not an error eventually occurs.  The overhead
        is greater when bind parameters are sent in binary form than when
        they are sent as text, since the former case requires data
        conversion while the latter only requires copying the string.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-log-statement" xreflabel="log_statement">
<term><varname>log_statement</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>log_statement</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
로깅할 SQL 문을 제어한다. 유효 값은 <literal>none</literal>(off), <literal>ddl</literal>,
<literal>mod</literal>, <literal>all</literal>(모든 문)이다. <literal>ddl</literal>은
<command>CREATE</command> 및 <command>ALTER</command>, 
<command>DROP</command> 문 같은 모든 데이터 정의 문을 로깅한다.  <literal>mod</literal>는
모든 <literal>ddl</literal> 문과 <command>INSERT</command> 및
<command>UPDATE</command>, <command>DELETE</command>, <command>TRUNCATE</command>,
<command>COPY FROM</command>같은 데이터 수정 문을 로깅한다.  <command>PREPARE</command>
및 <command>EXECUTE</command>, <command>EXPLAIN ANALYZE</command>문도 포함된
명령이 적절한 타입인 경우 로깅된다.  확장 쿼리 프로토콜을 사용하는
클라이언트의 경우 Execute 메시지를 수신하면 로깅이 발생되고, Bind
매개 변수의 값이 포함된다(작은따옴표를 겹쳐서 사용).
 </para>

 <para>
기본값은 none이다. 슈퍼유저만 이 설정을 변경할 수 있다.
The default is <literal>none</literal>. Only superusers can change this
setting.
 </para>

 <note>
<para>
 기본 파싱이 완료되어 문 타입이 결정된 후에만 로그 메시지가 발생되므로 <varname>log_statement</varname> = <literal>all</literal> 설정에 의해서도 간단한 구문 에러가 포함된 문은 로깅되지 않는다. 
 확장 쿼리 프로토콜의 경우 이 설정은 Execute 단계 전에 실패한 문을 로깅하지 않는다(예: 파싱 분석 또는 플래닝 도중). 
 해당 문을 로깅하려면 <varname>log_min_error_statement</varname>를 <literal>ERROR</literal>(또는 그 이상)로 설정해야 한다.
</para>
 </note>
</listitem>
 </varlistentry>

     <varlistentry id="guc-log-replication-commands" xreflabel="log_replication_commands">
      <term><varname>log_replication_commands</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_replication_commands</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Causes each replication command to be logged in the server log.
        See <xref linkend="protocol-replication"/> for more information about
        replication command. The default value is <literal>off</literal>.
        Only superusers can change this setting.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-log-temp-files" xreflabel="log_temp_files">
<term><varname>log_temp_files</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>log_temp_files</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
임시 파일 이름과 크기의 로깅을 제어한다.  정렬, 해시 및 임시 쿼리
결과를 위해 임시 파일을 생성할 수 있다.  이 설정이 활성화하면,  각 임시 파일이
만들어졌다 삭제될 때 로그를 남긴다.
0 값은 모든 임시 파일 정보를 로깅하고, 양의 값은 크기가 
지정된 킬로바이트 이상일 때만 로깅된다. 
단위를 지정하지 않으면 kb로 간주한다.
기본값은, 해당 로깅이 비활성화되는 -1이다. 슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-timezone" xreflabel="log_timezone">
<term><varname>log_timezone</varname> (<type>string</type>)
<indexterm>
 <primary><varname>log_timezone</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버 로그에 작성되는 타임스탬프에 사용할 시간대를 설정한다. <xref linkend="guc-timezone"/>과 달리, 이 값은 클러스터 차원(cluster-wide)의 값이므로 모든 세션이 일관되게 타임스탬프를 알려준다. 
내장 기본값은 <literal>GMT</literal>이지만, 일반적으로 <filename>postgresql.conf</filename>에 오버라이드되고 <application>initdb</application>는 시스템 환경에 해당되는 곳에 설정을 설치한다. 
자세한 내용은 <xref linkend="datatype-timezones"/>을 참조 바란다. 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>
 <sect2 id="runtime-config-logging-csvlog">
 <title>CSV 형식 로그 출력 사용</title>

 <para>
<varname>log_destination</varname> 목록에서 <literal>csvlog</literal>를 포함하면 로그 파일을 데이터베이스 테이블에 편리하게 가져올 수 있다. 
이 옵션은 쉼표로 구분된 값(<acronym>CSV</acronym>) 형식으로 로그 줄을 출력하며, 밀리초의 타임스탬프, 사용자 이름, 데이터베이스 이름, 프로세스 ID, 클라이언트 호스트:포트 번호, 세션 ID, 세션별 줄 번호, 명령 태그, 세션 시작 시간, 
가상 트랜잭션 ID, 일반 트랜잭션 ID, 에러 심각도, SQLSTATE 코드, 에러 메시지, 에러 메시지 상세, 힌트, 에러 유발 내부 쿼리(있을 경우), 에러 위치의 문자 카운트, 에러 문맥, 
에어 유발 사용자 쿼리(있을 경우 및 <varname>log_min_error_statement</varname>에서 활성화된 경우), 에러 위치의 문자 카운트, PostgreSQL 소스 코드에서 에러의 위치(<varname>log_error_verbosity</varname>가 <literal>verbose</literal>로 설정된 경우), 응용프로그램 이름과 백엔드 종류 칼럼으로 
환경 설정되어 있다. CSV 형식 로그 파일 출력을 저장하기 위한 샘플 테이블 정의는 다음과 같다.
<programlisting>
CREATE TABLE postgres_log
(
log_time timestamp(3) with time zone,
user_name text,
database_name text,
process_id integer,
connection_from text,
session_id text,
session_line_num bigint,
command_tag text,
session_start_time timestamp with time zone,
virtual_transaction_id text,
transaction_id bigint,
error_severity text,
sql_state_code text,
message text,
detail text,
hint text,
internal_query text,
internal_query_pos integer,
context text,
query text,
query_pos integer,
location text,
application_name text,
backend_type text,
PRIMARY KEY (session_id, session_line_num)
);
</programlisting>
 </para>

 <para>
로그 파일을 이 테이블로 가져오려면 <command>COPY FROM</command> 명령을 사용해야 한다.
<programlisting>
COPY postgres_log FROM '/full/path/to/logfile.csv' WITH csv;
</programlisting>
        It is also possible to access the file as a foreign table, using
        the supplied <xref linkend="file-fdw"/> module.
 </para>

 <para>
 CSV 로그 파일 가져오기를 단순화하려면 몇 가지 작업이 필요하다.
 <orderedlist>
 <listitem>
 <para>
로그 파일에 대한 일관되고, 예측 가능한 네이밍 체계를 제공하려면 <varname>log_filename</varname> 및 <varname>log_rotation_age</varname>를 설정해야 한다. 
이로써 사용자는 파일 이름과 개별 로그 파일이 완료되는 시점을 예상할 수 있으므로 
가져오기에 대한 대비를 할 수 있다.
 </para>
</listitem>

<listitem>
 <para>
<varname>log_rotation_size</varname>를 0으로 설정하면 로그 파일 이름을 예상하기 어려워지므로 크기 기반 로그 파일 로테이션이 비활성화된다.
 </para>
</listitem>

<listitem>
<para>
 오래된 로그 데이터가 새 데이터와 동일한 파일에 혼재되지 않게 하려면 <varname>log_truncate_on_rotation</varname>을 <literal>on</literal>으로 설정해야 한다.
</para>
</listitem>

<listitem>
<para>
 위의 테이블 정의에는 프라이머리 키 규격이 포함되어 있다. 이것은 동일한 정보를 두 번 가져오는 실수를 방지하는 데 유용하다. 
 <command>COPY</command> 명령은 한 번에 가져올 모든 데이터를 커밋하므로 에러 발생 시 가져오기 전체가 실패하게 된다. 
 로그 파일을 일부만 가져오고, 나중에 완료 시 다시 파일을 가져오는 경우 프라이머리 키 위반 때문에 가져오기가 실패할 수 있다. 
 가져오기 전에 로그가 완료되고 닫힐 때까지 기다려야 한다. 
 이 절차는 또한 기록이 아직 완료되지 않은 일부 라인을 가져오는 실수를 함으로써 <command>COPY</command>가 실패하게 되는 사태를 방지한다.
</para>
</listitem>
</orderedlist>
</para>

</sect2>

  <sect2> 
    <title>프로세스 제목</title>

    <para>
     서버 프로세스들의 상태가 바뀔 때, 프로세스 이름을 어떻게
     표시할지 설정한다.  이 프로세스 이름은 일반적으로
     <application>ps</application> 명령이나, 윈도우즈인 경우, 
     <application>프로세스 탐색기</application> 프로그램에서 볼 수 있다.
     자세한 내용은 <xref linkend="monitoring-ps"/> 참조.
    </para>

 <variablelist>
     <varlistentry id="guc-cluster-name" xreflabel="cluster_name">
      <term><varname>cluster_name</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>cluster_name</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Sets a name that identifies this database cluster (instance) for
        various purposes.  The cluster name appears in the process title for
        all server processes in this cluster.  Moreover, it is the default
        application name for a standby connection (see <xref
        linkend="guc-synchronous-standby-names"/>.)
       </para>

       <para>
        클러스터 이름을 포함해서 보여준다.
        클러스터 이름은 <symbol>NAMEDATALEN</symbol> (기본 빌드 초기값은
        64 문자열) 길이의 임의 문자열이다. <varname>cluster_name</varname>
        값으로 출력될 수 있는 ASCII 문자만 사용할 수 있다.
        그 외 문자에 대해서는 물음표(<literal>?</literal>)로 치환되어
        보여진다.  이 값으로 빈 문자열(<literal>''</literal>)(기본값)을 지정하면, 
        보여주지 않는다.  이 설정값은 서버 시작 할 때만 
        지정할 수 있다.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-update-process-title" xreflabel="update_process_title">
<term><varname>update_process_title</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>update_process_title</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
새 SQL 명령이 서버에서 수신될 때마다 프로세스 제목 업데이트를 활성화한다. 
대부분의 운영체제에서는 기본값이 <literal>on</literal>이다.
프로세스 제목은 일반적으로 <command>ps</command> 명령으로 보거나 <application>프로세스 탐색기</application>를
사용하여 Windows에서 볼 수 있다.  하지만, 윈도우즈인 경우, 
해당 갱신 작업에 비용이 많이 들어 기본값을 <literal>off</literal>로 했다.
슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>
 </variablelist>
 </sect2>
 </sect1>

 <sect1 id="runtime-config-statistics">
<title>실시간 통계</title>

<sect2 id="runtime-config-statistics-collector">
 <title>쿼리 및 인덱스 통계 수집기</title>

 <para>
이 매개 변수는 서버 차원(server-wide)의 통계 수집 기능을 제어한다. 
통계 수집이 활성화되면 생성된 데이터는 <structname>pg_stat</structname> 및 <structname>pg_statio</structname> 계열 시스템 뷰를 통해 액세스할 수 있다. 
자세한 내용은 <xref linkend="monitoring"/>을 참조 바란다.
 </para>

 <variablelist>

 <varlistentry id="guc-track-activities" xreflabel="track_activities">
<term><varname>track_activities</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>track_activities</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
각 세션에서 현재 실행 중인 명령의 실행이 시작될 때 해당 명령에 대한 정보 수집을 활성화한다. 
이 매개 변수의 기본값은 on이다. 
활성화된 경우에도 이 정보가 모든 사용자에게 보이는 것은 아니며, 슈퍼유저 및 리포트되는 세션의 소유자에게만 표시되므로 보안 위험을 나타내서는 안 된다. 
슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-track-activity-query-size" xreflabel="track_activity_query_size">
<term><varname>track_activity_query_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>track_activity_query_size</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
 각각의 활성 세션에 대해 현재 실행 중인 명령을 추적하기 위해 <structname>pg_stat_activity</structname>.<structfield>query</structfield> 필드에 사용할 메모리 크기를 지정한다.
설정값에 단위를 지정하지 않으면 바이트로 간주한다.
 기본값은 1024바이트다. 이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-track-counts" xreflabel="track_counts">
<term><varname>track_counts</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>track_counts</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터베이스 작업에 대한 통계 수집을 활성화한다. 
autovacuum은 수집된 정보를 필요로 하므로 이 매개 변수의 기본값은 on이다. 
슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-track-io-timing" xreflabel="track_io_timing">
<term><varname>track_io_timing</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>track_io_timing</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터베이스 I/O 호출의 타이밍을 활성화한다. 
운영 체제에 현재 시간을 반복해서 쿼리함으로써 일부 플랫폼에서는 상당한 오버헤드가 발생되므로 이 매개 변수는 기본적으로 off이다. 
사용자 시스템에서 타이밍 오버헤드를 측정하기 위해 <xref linkend="pgtesttiming"/> 도구를 사용할 수 있다. 
I/O 타이밍 정보는 BUFFERS 옵션이 사용되는 경우 및 <xref linkend="pgstatstatements"/>에 의해 <xref linkend="sql-explain"/> 출력에서 <link linkend="monitoring-pg-stat-database-view">
        <structname>pg_stat_database</structname></link> 뷰에 표시된다. 
슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-track-functions" xreflabel="track_functions">
<term><varname>track_functions</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>track_functions</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
함수 호출 횟수 및 사용된 시간의 추적을 활성화한다. 
프로시저 언어 함수 <literal>all</literal>만 추적하기 위해 <literal>pl</literal>를 지정하면 SQL 및 C 언어 함수도 추적한다. 
기본값은, 함수 통계 추적을 비활성화하는 <literal>none</literal>이다. 
슈퍼유저만 이 설정을 변경할 수 있다.
 </para>

 <note>
<para>
 호출 쿼리에 간단하게 <quote>inlined</quote>되는 SQL 언어 함수는 이 설정과 무관하게 추적되지 않는다.
</para>
 </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-stats-temp-directory" xreflabel="stats_temp_directory">
<term><varname>stats_temp_directory</varname> (<type>string</type>)
<indexterm>
 <primary><varname>stats_temp_directory</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
임시 통계 데이터를 저장할 디렉터리를 설정한다. 디렉터리에 대한 상대 경로이거나 절대 경로일 수 있다. 
기본값은 <filename>pg_stat_tmp</filename>이다. RAM 기본 파일 시스템에서 이것을 지정하면 물리적 I/O 요구 사항이 줄어들고 성능 개선으로 이어질 수 있다. 
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-statistics-monitor">
 <title>통계 모니터링</title>
 <variablelist>

 <varlistentry>
<term><varname>log_statement_stats</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_statement_stats</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<term><varname>log_parser_stats</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_parser_stats</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<term><varname>log_planner_stats</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_planner_stats</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<term><varname>log_executor_stats</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_executor_stats</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
각 쿼리에 대해 각 모듈의 성능 통계를 서버 로그에 출력한다. 이것은 Unix <function>getrusage()</function> 운영 체제 기능과 유사한 대략적인 프로파일링 방법이다. 
<varname>log_statement_stats</varname>는 총 문 통계를 리포트하고, 그 외의 것은 모듈별 통계를 알려준다. 
<varname>log_statement_stats</varname>는 모듈별 옵션과 함께 활성화될 수 없다. 이 옵션은 모두 기본적으로 비활성화된다. 슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>

</sect2>
 </sect1>

 <sect1 id="runtime-config-autovacuum">
<title>자동 Vacuuming</title>

<indexterm>
 <primary>autovacuum</primary>
 <secondary>환경 설정 매개 변수</secondary>
</indexterm>

 <para>
이 설정은 <firstterm>autovacuum</firstterm> 기능의 동작을 제어한다. 자세한 내용은 <xref linkend="autovacuum"/>을 참조 바란다.
이 설정들의 대부분은 각 테이블 별로 각각 설정할 수도 있다;
<xref linkend="sql-createtable-storage-parameters"/> 참조.
 </para>

<variablelist>

 <varlistentry id="guc-autovacuum" xreflabel="autovacuum">
<term><varname>autovacuum</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>autovacuum</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버가 autovacuum 런처 데몬을 실행해야 하는지를 제어한다. 
기본값은 on이지만, autovacuum이 작동되게 하려면 <xref linkend="guc-track-counts"/>도 활성화해야 한다. 
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
 <para>
이 매개 변수가 비활성화된 경우 필요시 시스템이 autovacuum 프로세스를 실행하여 트랜잭션 ID 랩어라운드를 방지한다. 자세한 내용은 <xref
linkend="vacuum-for-wraparound"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-log-autovacuum-min-duration" xreflabel="log_autovacuum_min_duration">
<term><varname>log_autovacuum_min_duration</varname> (<type>integer</type>)
<indexterm>
       <primary><varname>log_autovacuum_min_duration</varname></primary>
       <secondary>configuration parameter</secondary>
</indexterm>
</term>
<listitem>
 <para>
지정된 시간 보다 더 걸린 autovacuum에 의해 실행된 각각의 액션이 로깅되게 한다. 
0으로 설정하면 모든 autovacuum 액션이 로깅된다. <literal>-1</literal> (기본값)은
autovacuum 로그 남기기를 비활성화한다. 
설정값에 단위를 지정하지 않으면 밀리세컨드로 간주한다.
예를 들면, 이것을 <literal>250ms</literal>로 설정한 경우 250ms 이상 지속되는 모든 자동 vacuums 및 분석이 로깅된다. 
또한 이 매개 변수가 <literal>-1</literal> 이외의 다른 값으로 설정된 경우 잠금 충돌이나,
같은 작업 시간에 테이블 삭제 작업이 있는 경우 autovacuum 액션을 건너뛰면 메시지가 로깅된다. 
이 매개 변수를 활성화하면 autovacuum 작업을 추적하는 데 도움이 된다. 
이 설정은 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-max-workers" xreflabel="autovacuum_max_workers">
<term><varname>autovacuum_max_workers</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_max_workers</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
한 번에 실행할 수 있는 autovacuum 프로세스(autovacuum 제외)의 최대 수를 지정한다. 기본값은 3이다. 
이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-naptime" xreflabel="autovacuum_naptime">
<term><varname>autovacuum_naptime</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_naptime</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
주어진 데이터베이스에서 autovacuum 실행 사이의 최소 지연을 지정한다. 
각 라운드에서 데몬은 데이터베이스를 검사하고 필요 시 해당 데이터베이스 테이블에 대해 <command>VACUUM</command> 및 <command>ANALYZE</command> 명령을 실행한다. 
설정값에 단위가 없으면, 초로 간주한다.
기본값은 1분이다(<literal>1min</literal>). 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-threshold" xreflabel="autovacuum_vacuum_threshold">
<term><varname>autovacuum_vacuum_threshold</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_vacuum_threshold</varname></primary>
 <secondary>configuration parameter</secondary>
</indexterm>
</term>
<listitem>
 <para>
임의의 테이블에서 <command>VACUUM</command>을 트리거하는 데 필요한 업데이트 또는 삭제된 튜플의 최소 수를 지정한다. 
기본값은 50튜플이다. 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
이 설정은 저장소 매개 변수를 변경함으로써 개별 테이블에 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-insert-threshold" xreflabel="autovacuum_vacuum_insert_threshold">
      <term><varname>autovacuum_vacuum_insert_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_insert_threshold</varname></primary>
       <secondary>configuration parameter</secondary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Specifies the number of inserted tuples needed to trigger a
        <command>VACUUM</command> in any one table.
        The default is 1000 tuples.  If -1 is specified, autovacuum will not
        trigger a <command>VACUUM</command> operation on any tables based on
        the number of inserts.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line;
        but the setting can be overridden for individual tables by
        changing table storage parameters.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-autovacuum-analyze-threshold" xreflabel="autovacuum_analyze_threshold">
<term><varname>autovacuum_analyze_threshold</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_analyze_threshold</varname></primary>
 <secondary>configuration parameter</secondary>
</indexterm>
</term>
<listitem>
 <para>
임의의 테이블에서 <command>ANALYZE</command>을 트리거하는 데 필요한 삽입, 업데이트 또는 삭제된 튜플의 최소 수를 지정한다. 
기본값은 50튜플이다. 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
이 설정은 저장소 매개 변수를 변경함으로써 개별 테이블에 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-scale-factor" xreflabel="autovacuum_vacuum_scale_factor">
<term><varname>autovacuum_vacuum_scale_factor</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>autovacuum_vacuum_scale_factor</varname></primary>
 <secondary>configuration parameter</secondary>
</indexterm>
</term>
<listitem>
 <para>
<command>VACUUM</command>의 트리거 여부를 결정할 때 <varname>autovacuum_vacuum_threshold</varname>에 추가할 테이블 크기의 부분을 지정한다. 
기본값은 0.2이다(테이블 크기의 20%). 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
이 설정은 저장소 매개 변수를 변경함으로써 개별 테이블에 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-insert-scale-factor" xreflabel="autovacuum_vacuum_insert_scale_factor">
      <term><varname>autovacuum_vacuum_insert_scale_factor</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_insert_scale_factor</varname></primary>
       <secondary>configuration parameter</secondary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Specifies a fraction of the table size to add to
        <varname>autovacuum_vacuum_insert_threshold</varname>
        when deciding whether to trigger a <command>VACUUM</command>.
        The default is 0.2 (20% of table size).
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line;
        but the setting can be overridden for individual tables by
        changing table storage parameters.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-autovacuum-analyze-scale-factor" xreflabel="autovacuum_analyze_scale_factor">
<term><varname>autovacuum_analyze_scale_factor</varname> (<type>floating point</type>)
<indexterm>
 <primary><varname>autovacuum_analyze_scale_factor</varname></primary>
 <secondary>configuration parameter</secondary>
</indexterm>
</term>
<listitem>
 <para>
<command>ANALYZE</command>의 트리거 여부를 결정할 때 <varname>autovacuum_analyze_threshold</varname>에 추가할 테이블 크기의 부분을 지정한다. 
기본값은 0.1이다(테이블 크기의 10%). 이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
이 설정은 저장소 매개 변수를 변경함으로써 개별 테이블에 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-freeze-max-age" xreflabel="autovacuum_freeze_max_age">
<term><varname>autovacuum_freeze_max_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_freeze_max_age</varname></primary>
 <secondary>configuration parameter</secondary>
</indexterm>
</term>
<listitem>
 <para>
테이블 내 트랜잭션 ID 랩어라운드를 방지하기 위해 <command>VACUUM</command> 명령을 강제로 실행하기 전에 테이블의 <structname>pg_class</structname>.<structfield>relfrozenxid</structfield> 필드가 도달할 수 있는 연령(트랜잭션에서)을 지정한다. 
autovacuum이 달리 비활성화된 경우에도 시스템은 랩어라운드를 방지하기 위해 autovacuum 프로세스를 실행한다는 점에 유의해야 한다.
 </para>

 <para>
Vacuum은 pg_xact 서브 디렉터리에서 오래된 파일도 제거하는데, 이는 기본값이 2억 트랜잭션으로 상대적으로 낮기 때문이다. 
이 매개 변수는 서버 시작 시에만 설정할 수 있지만 저장소 매개 변수를 변경함으로써 개별 테이블에 대한 설정을 줄일 수 있다. 자세한 내용은 23.1.5절을 참조 바란다.
Vacuum also allows removal of old files from the
<filename>pg_xact</filename> subdirectory, which is why the default
is a relatively low 200 million transactions.
This parameter can only be set at server start, but the setting
can be reduced for individual tables by
changing storage parameters.
For more information see <xref linkend="vacuum-for-wraparound"/>.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-multixact-freeze-max-age" xreflabel="autovacuum_multixact_freeze_max_age">
<term><varname>autovacuum_multixact_freeze_max_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_multixact_freeze_max_age</varname></primary>
 <secondary>configuration parameter</secondary>
</indexterm>
</term>
<listitem>
 <para>
테이블 내 multixact ID 랩어라운드를 방지하기 위해 <command>VACUUM</command> 명령을 강제하기 전에 테이블의 <structname>pg_class</structname>.<structfield>relminmxid</structfield> 필드가 도달할 수 있는 연령(multixacts에서)을 지정한다. 
autovacuum이 달리 비활성화된 경우에도 시스템은 랩어라운드를 방지하기 위해 autovacuum 프로세스를 실행한다는 점에 유의해야 한다.
 </para>

 <para>
Vacuuming multixacts는 <filename>pg_multixact/members</filename> 및 <filename>pg_multixact/offsets</filename> 서브 디렉터리에서 오래된 파일도 제거하는데, 이는 기본값이 4억 multixacts로 상대적으로 낮기 때문이다. 
이 매개 변수는 서버 시작 시에만 설정할 수 있지만 저장소 매개 변수를 변경함으로써 개별 테이블에 대한 설정을 줄일 수 있다. 자세한 내용은 <xref linkend="vacuum-for-multixact-wraparound"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-cost-delay" xreflabel="autovacuum_vacuum_cost_delay">
<term><varname>autovacuum_vacuum_cost_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_vacuum_cost_delay</varname></primary>
 <secondary>configuration parameter</secondary>
</indexterm>
</term>
<listitem>
 <para>
자동 <command>VACUUM</command> 명령에 사용되는 비용 지연 값을 지정한다. -1을 지정하면 일반 <xref linkend="guc-vacuum-cost-delay"/> 값이 사용된다. 
설정값에 단위가 없으면 밀리세컨드로 간주한다.
기본값은 2ms다.
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
이 설정은 저장소 매개 변수를 변경함으로써 개별 테이블에 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-autovacuum-vacuum-cost-limit" xreflabel="autovacuum_vacuum_cost_limit">
<term><varname>autovacuum_vacuum_cost_limit</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>autovacuum_vacuum_cost_limit</varname></primary>
 <secondary>configuration parameter</secondary>
</indexterm>
</term>
<listitem>
 <para>
자동 <command>VACUUM</command> 명령에 사용되는 비용 제한 값을 지정한다. 
-1을 지정하면(기본값) 일반 <xref linkend="guc-vacuum-cost-limit"/> 값이 사용된다. 
실행 중인 autovacuum workers가 하나 이상 있을 경우 각 worker 제한의 합계가 이 변수의 제한값을 초과하지 않도록 값이 비례 분배된다. 
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다. 
이 설정은 저장소 매개 변수를 변경함으로써 개별 테이블에 오버라이드할 수 있다.
 </para>
</listitem>
 </varlistentry>

</variablelist>
 </sect1>

 <sect1 id="runtime-config-client">
<title>클라이언트 연결 기본값</title>

<sect2 id="runtime-config-client-statement">
 <title>문 동작</title>
 <variablelist>

 <varlistentry id="guc-client-min-messages" xreflabel="client_min_messages">
<term><varname>client_min_messages</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>client_min_messages</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
클라이언트로 전송할 <link linkend="runtime-config-severity-levels">메시지 레벨</link>을 제어한다. 유효 값은 <literal>DEBUG5</literal> 및 
<literal>DEBUG4</literal>, <literal>DEBUG3</literal>, <literal>DEBUG2</literal>, 
<literal>DEBUG1</literal>, <literal>LOG</literal>, <literal>NOTICE</literal>, 
<literal>WARNING</literal>, <literal>ERROR</literal>, <literal>FATAL</literal>, 
<literal>PANIC</literal>이다. 각 레벨에는 후속되는 모든 레벨이 포함된다. 
후속 레벨일수록 메시지가 적게 전송된다. 기본값은 <literal>NOTICE</literal>이다. <literal>LOG</literal>는 여기서 <xref linkend="guc-log-min-messages"/>와는 다른 랭크를 갖는다.
 </para>
       <para>
        <literal>INFO</literal> level messages are always sent to the client.
       </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-search-path" xreflabel="search_path">
<term><varname>search_path</varname> (<type>string</type>)
<indexterm>
 <primary><varname>search_path</varname> 환경 설정 매개 변수</primary>
</indexterm>
<indexterm><primary>path</primary><secondary>for schemas</secondary></indexterm>
</term>
<listitem>
 <para>
이 변수는 스키마 이름을 사용하지 않는 간단한 이름으로 해당 개체(테이블, 자료형, 함수 등)를 지정한 경우 어느 스키마 안에 있는 것을 사용할지 지정한다.
서로 다른 스키마에 같은 이름의 개체가 있는 경우
이 변수 값으로 지정한 스키마들 가운데 제일 처음 발견된 것을 사용한다.
이렇게 찾았는데, 어디에도 해당 개체가 없다면, 그 개체는 스키마 이름을 지정해서
(점(.)으로 구분) 사용해야 한다.
 </para>

 <para>
<varname>search_path</varname>에 대한 값은 스키마 이름을 쉼표로 구분한 목록이다. 
스키마에 존재하지 않는 이름이거나, 사용자가 <literal>USAGE</literal> 권한이 없는 스키마 이름은 조용히 무시된다.
 </para>

 <para>
목록 항목 중 하나가 특수한 이름 <literal>$user</literal>인 경우, 해당 스키마 및 사용자에게 <literal>USAGE</literal> 권한이 있으면 <function>CURRENT_USER</function>가 리턴한 이름의 스키마는 대체된다. 
(그 외에는 <literal>$user</literal>가 무시된다.)
 </para>

 <para>
시스템 카탈로그 스키마 <literal>pg_catalog</literal>는 경로에 있든 없든 항상 검색된다. 경로에 있을 경우 지정된 순서대로 검색된다. <literal>pg_catalog</literal>가 경로에 없으면 경로 항목을 검색하기 <emphasis>전</emphasis>에 검색된다.
 </para>

       <!-- To further split hairs, funcname('foo') does not use the temporary
            schema, even when it considers typname='funcname'.  This paragraph
            refers to function names in a loose sense, "pg_proc.proname or
            func_name grammar production". -->

 <para>
마찬가지로, 현재 세션의 임시 테이블 스키마 <literal>pg_temp_<replaceable>nnn</replaceable></literal>은 존재할 경우 항상 검색된다. 
<literal>pg_temp</literal><indexterm><primary>pg_temp</primary></indexterm> 별칭을 사용함으로써 경로에 명시적으로 나열할 수 있다. 
경로에 나열하지 않으면 검색부터 된다(<literal>pg_catalog</literal>를 검색하기도 전에). 
그러나, 관계(테이블, 뷰, 시퀀스 등) 및 데이터 타입 이름에 대한 임시 스키마만 검색된다. 
함수 또는 연산자 이름으로는 절대 검색되지 않는다.
 </para>

 <para>
특별한 타겟 스키마를 지정하지 않고 개체를 생성한 경우 <varname>search_path</varname>에 명명된 첫 번째 유효 스키마에 배치된다. 
검색 경로가 비어 있으면 에러가 리포트된다.
 </para>

 <para>
이 매개 변수의 기본값은 <literal>"$user", public</literal>이다. 
이 설정은 데이터베이스의 공유 사용(사용자에게 개인 스키마가 없고 모두 <literal>public</literal>의 공유 사용인 경우), 개인 사용자별 스키마 및 이러한 것들의 조합을 지원한다. 
전역적 또는 사용자별 기본 검색 경로 설정을 전환함으로써 다른 효과를 얻을 수도 있다.
 </para>

       <para>
        For more information on schema handling, see
        <xref linkend="ddl-schemas"/>.  In particular, the default
        configuration is suitable only when the database has a single user or
        a few mutually-trusting users.
       </para>

 <para>
검색 경로에서 현재 효과적인 값은 <acronym>SQL</acronym> 함수 <function>current_schemas</function>(<xref linkend="functions-info"/> 참조)를 통해서 검사할 수 있다. 
<function>current_schemas</function>는 <varname>search_path</varname>에 표시되는 항목이 해결되는 방법을 표시하므로 이것은 <varname>search_path</varname> 값을 검사하는 것과 다르다. 
 </para>

</listitem>
 </varlistentry>

     <varlistentry id="guc-row-security" xreflabel="row_security">
      <term><varname>row_security</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>row_security</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This variable controls whether to raise an error in lieu of applying a
        row security policy.  When set to <literal>on</literal>, policies apply
        normally.  When set to <literal>off</literal>, queries fail which would
        otherwise apply at least one policy.  The default is <literal>on</literal>.
        Change to <literal>off</literal> where limited row visibility could cause
        incorrect results; for example, <application>pg_dump</application> makes that
        change by default.  This variable has no effect on roles which bypass
        every row security policy, to wit, superusers and roles with
        the <literal>BYPASSRLS</literal> attribute.
       </para>

       <para>
        For more information on row security policies,
        see <xref linkend="sql-createpolicy"/>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-table-access-method" xreflabel="default_table_access_method">
      <term><varname>default_table_access_method</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>default_table_access_method</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This parameter specifies the default table access method to use when
        creating tables or materialized views if the <command>CREATE</command>
        command does not explicitly specify an access method, or when
        <command>SELECT ... INTO</command> is used, which does not allow to
        specify a table access method. The default is <literal>heap</literal>.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-default-tablespace" xreflabel="default_tablespace">
<term><varname>default_tablespace</varname> (<type>string</type>)
<indexterm>
 <primary><varname>default_tablespace</varname> 환경 설정 매개 변수</primary>
</indexterm>
<indexterm><primary>tablespace</primary><secondary>default</secondary></indexterm>
</term>
<listitem>
 <para>
이 변수는 <command>CREATE</command> 명령이 테이블스페이스를 명시적으로 지정하지 않는 경우 개체(테이블 및 인덱스)가 생성되는 기본 테이블스페이스를 지정한다.
 </para>

 <para>
값은 테이블스페이스의 이름 또는 현재 데이터베이스의 기본 테이블스페이스를 사용하여 지정하기 위한 비어 있는 string이다. 
기존 테이블스페이스의 이름과 값이 일치하지 않으면 <productname>PostgreSQL</productname>이 자동으로 현재 데이터베이스의 기본 테이블스페이스를 사용한다. 
기본값이 아닌 테이블스페이스가 지정되면 사용자는 <literal>CREATE</literal> 권한이 있어야 하며, 그렇지 않으면 생성 시도에 실패한다.
 </para>

 <para>
이 변수를 임시 테이블에는 사용되지 않으며, 대신 <xref linkend="guc-temp-tablespaces"/>를 사용해야 한다.
 </para>

 <para>
이 변수는 데이터베이스 생성 시 사용되지 않는다. 
기본적으로 새 데이터베이스는 복사되었던 템플릿 데이터베이스로부터 테이블스페이스 설정을 상속받는다.
 </para>

       <para>
        If this parameter is set to a value other than the empty string
        when a partitioned table is created, the partitioned table's
        tablespace will be set to that value, which will be used as
        the default tablespace for partitions created in the future,
        even if <varname>default_tablespace</varname> has changed since then.
       </para>

 <para>
테이블스페이스에 대한 자세한 내용은 <xref linkend="manage-ag-tablespaces"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-temp-tablespaces" xreflabel="temp_tablespaces">
<term><varname>temp_tablespaces</varname> (<type>string</type>)
<indexterm>
 <primary><varname>temp_tablespaces</varname> 환경 설정 매개 변수</primary>
</indexterm>
<indexterm><primary>tablespace</primary><secondary>temporary</secondary></indexterm>
</term>
<listitem>
 <para>
이 변수는 <command>CREATE</command> 명령이 테이블스페이스를 명시적으로 지정하지 않는 경우 임시 개체(임시 테이블 및 임시 테이블의 인덱스)가 생성되는 테이블스페이스를 지정한다. 
대형 데이터집합 정렬 같은 용도의 임시 파일도 이 테이블스페이스에서 생성된다.
 </para>

 <para>
값은 테이블스페이스의 이름 목록이다. 
목록에서 이름이 2개 이상 있는 경우, 트랜잭션 내에서 연속 생성된 임시 개체가 목록에서 연속 테이블스페이스에 매치되는 것 외에는 <productname>PostgreSQL</productname>는 임시 개체를 생성할 때마다 목록에서 멤버를 임의로 선택한다. 
목록에서 선택된 요소가 비어 있는 string인 경우 <productname>PostgreSQL</productname>이 현재 데이터베이스의 기본 테이블 스페이스를 자동으로 대신 사용한다.
 </para>

 <para>
사용자에게 <literal>CREATE</literal> 권한이 없는 테이블스페이스를 지정하는 것이므로, <varname>temp_tablespaces</varname>가 인터랙티브하게 설정된 경우 존재하지 않는 테이블스페이스를 지정하는 것은 에러이다. 
단, 사용자에게 <literal>CREATE</literal> 권한이 없는 테이블스페이스이므로, 이전에 설정된 값을 사용하는 경우 존재하지 않는 테이블스페이스는 무시된다. 
특히, 이 규칙은 <filename>postgresql.conf</filename>에 설정된 값을 사용하는 경우에 적용된다.
 </para>

 <para>
기본 값은, 현재 데이터베이스의 기본 테이블스페이스에서 모든 임시 개체가 생성되는 비어 있는 string이다.
default_tablespace도 참조 바란다.
 </para>

 <para>
See also <xref linkend="guc-default-tablespace"/>.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-check-function-bodies" xreflabel="check_function_bodies">
<term><varname>check_function_bodies</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>check_function_bodies</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 매개 변수는 일반적으로 on이다. <literal>off</literal>로 설정되면 <xref
linkend="sql-createfunction"/> 중에 함수 본문 string의 검증이 비활성화된다. 
검증을 비활성화하면 검증 프로세스의 부작용이 예방되고 전방 참조 같은 문제로 인한 거짓 긍정이 방지된다. 
다른 사용자를 위해 함수를 로딩하기 전에 이 매개 변수를 <literal>off</literal>로 설정해야 한다. 
<application>pg_dump</application>는 자동으로 off로 설정한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-default-transaction-isolation" xreflabel="default_transaction_isolation">
<term><varname>default_transaction_isolation</varname> (<type>enum</type>)
<indexterm>
 <primary>transaction isolation level</primary>
 <secondary>setting default</secondary>
</indexterm>
<indexterm>
 <primary><varname>default_transaction_isolation</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
각 SQL 트랜잭션은 <quote>read uncommitted</quote> 또는 <quote>read
committed</quote>, <quote>repeatable read</quote>, 
<quote>serializable</quote>의 격리 레벨을 갖고 있다. 
이 매개 변수는 새 트랜잭션마다 기본 격리 레벨을 제어한다. 기본값은 <quote>read committed</quote>이다.
 </para>

 <para>
자세한 내용은 <xref linkend="mvcc"/> 및 <xref
linkend="sql-set-transaction"/>을 참고 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-default-transaction-read-only" xreflabel="default_transaction_read_only">
<term><varname>default_transaction_read_only</varname> (<type>boolean</type>)
<indexterm>
 <primary>read-only transaction</primary>
 <secondary>setting default</secondary>
</indexterm>
<indexterm>
 <primary><varname>default_transaction_read_only</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
읽기 전용 SQL 트랜잭션은 비 임시 테이블은 변경할 수 없다. 
이 매개 변수는 새 트랜잭션마다 기본 읽기 전용 상태를 제어한다. 기본값은 <literal>off</literal>이다(읽기/쓰기).
 </para>

 <para>
자세한 내용은 <xref linkend="sql-set-transaction"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-default-transaction-deferrable" xreflabel="default_transaction_deferrable">
<term><varname>default_transaction_deferrable</varname> (<type>boolean</type>)
<indexterm>
 <primary>deferrable transaction</primary>
 <secondary>setting default</secondary>
</indexterm>
<indexterm>
 <primary><varname>default_transaction_deferrable</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<literal>serializable</literal> 격리 수준에서 실행 중인 경우 진행을 허용하기 전에 유예 가능한 읽기 전용 SQL 트랜잭션을 지연시킬 수 있다. 
그러나 실행이 시작되면, 오버헤드가 발생하지 않고 직렬화를 보장하기 때문에 직렬화 코드는 동시 업데이트 때문에 강제 중단을 할 이유가 없어진다. 장기 실행되는 읽기 전용 트랜잭션에 적합하다.
</para>

<para>
이 매개 변수는 새 트랜잭션마다 유예 가능한 기본 상태를 제어한다. 
이것은 현재 읽기 전용 트랜잭션에 아무런 효과가 없고, <literal>serializable</literal>보다 낮은 격리 수준에서 작동되는 트랜잭션에는 효과가 없다. 기본값은 <literal>off</literal>이다.
 </para>

 <para>
자세한 내용은 <xref linkend="sql-set-transaction"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>


 <varlistentry id="guc-session-replication-role" xreflabel="session_replication_role">
<term><varname>session_replication_role</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>session_replication_role</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
복제 관련 트리거 시작 및 현재 세션의 규칙을 제어한다. 
이 변수를 설정하려면 슈퍼유저 권한이 필요하고, 따라서 이전에 캐시된 쿼리 플랜이 삭제된다. 가능한 값은 <literal>origin</literal>(기본값), <literal>replica</literal> 및 <literal>local</literal>이다. 
       </para>

       <para>
        The intended use of this setting is that logical replication systems
        set it to <literal>replica</literal> when they are applying replicated
        changes.  The effect of that will be that triggers and rules (that
        have not been altered from their default configuration) will not fire
        on the replica.  See the <xref linkend="sql-altertable"/> clauses
        <literal>ENABLE TRIGGER</literal> and <literal>ENABLE RULE</literal>
        for more information.
       </para>

       <para>
        PostgreSQL treats the settings <literal>origin</literal> and
        <literal>local</literal> the same internally.  Third-party replication
        systems may use these two values for their internal purposes, for
        example using <literal>local</literal> to designate a session whose
        changes should not be replicated.
       </para>

       <para>
        Since foreign keys are implemented as triggers, setting this parameter
        to <literal>replica</literal> also disables all foreign key checks,
        which can leave data in an inconsistent state if improperly used.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-statement-timeout" xreflabel="statement_timeout">
<term><varname>statement_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>statement_timeout</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
       <para>
        Abort any statement that takes more than the specified amount of time.
        If <varname>log_min_error_statement</varname> is set
        to <literal>ERROR</literal> or lower, the statement that timed out
        will also be logged.
        If this value is specified without units, it is taken as milliseconds.
        A value of zero (the default) disables the timeout.
       </para>

       <para>
        The timeout is measured from the time a command arrives at the
        server until it is completed by the server.  If multiple SQL
        statements appear in a single simple-Query message, the timeout
        is applied to each statement separately.
        (<productname>PostgreSQL</productname> versions before 13 usually
        treated the timeout as applying to the whole query string.)
        In extended query protocol, the timeout starts running when any
        query-related message (Parse, Bind, Execute, Describe) arrives, and
        it is canceled by completion of an Execute or Sync message.
       </para>

 <para>
모든 세션에 영향을 줄 수 있으므로 <filename>postgresql.conf</filename>에서 <varname>statement_timeout</varname>을 설정하는 것은 권장하지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lock-timeout" xreflabel="lock_timeout">
<term><varname>lock_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>lock_timeout</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
테이블, 인덱스, 행 또는 기타 데이터베이스 개체의 잠금을 획득하기 위해 대기한 시간이 지정된
이상 초과하면 문을 중단한다. 
획득 시도별로 시간 제한이 개별적으로 적용된다. 
이 제한은 명시적 잠금 요청(예: <command>LOCK TABLE</command> 또는 <literal>NOWAIT</literal>하지 않은 <command>SELECT
FOR UPDATE</command>) 및 암시적으로 획득한 잠금에 모두 적용된다. 
설정값에 단위가 없으면 밀리세컨드로 간주한다.
0 값(기본값)은 이것을 해제한다.
 </para>

 <para>
<varname>statement_timeout</varname>과 달리, 이 타임아웃은 잠금 대기 시에만 발생한다. 
<varname>statement_timeout</varname>이 0이 아닌 경우, 문 타임아웃이 항상 먼저 트리거되므로 <varname>lock_timeout</varname>을 동일한 값이나 큰 값으로 설정하는 것은 무의미하다.
 </para>

 <para>
모든 세션에 영향을 줄 수 있으므로 <filename>postgresql.conf</filename>에서 <varname>lock_timeout</varname>을 설정하는 것은 권장되지 않는다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-idle-in-transaction-session-timeout" xreflabel="idle_in_transaction_session_timeout">
      <term><varname>idle_in_transaction_session_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>idle_in_transaction_session_timeout</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
       Terminate any session with an open transaction that has been idle for
       longer than the specified duration in milliseconds. This allows any
       locks held by that session to be released and the connection slot to be reused;
       it also allows tuples visible only to this transaction to be vacuumed.  See
       <xref linkend="routine-vacuuming"/> for more details about this.
       </para>
       <para>
       The default value of 0 disables this feature.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-vacuum-freeze-table-age" xreflabel="vacuum_freeze_table_age">
<term><varname>vacuum_freeze_table_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>vacuum_freeze_table_age</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>VACUUM</command>은 어떤 테이블의 <structname>pg_class</structname>.<structfield>relfrozenxid</structfield> 칼럼값으로
계산된 나이가 이 설정에서 지정된 나이보다 많으면 
강제 테이블 스캔을 수행한다. 
An aggressive scan differs from
a regular <command>VACUUM</command> in that it visits every page that might
contain unfrozen XIDs or MXIDs, not just those that might contain dead
tuples.  
기본값은 1억 5천만 트랜잭션이다. 
사용자는 이 값을 0 ~ 20억 중 아무거나 설정할 수 있지만
크게 지정해도
<command>VACUUM</command>은 유효 값을 <xref linkend="guc-autovacuum-freeze-max-age"/> 값을 기준으로
그 값의 95%로 강제 조정한다.
이렇기 때문에, 사용자가 직접 실행하는 <command>VACUUM</command> 작업을 
정기적으로 하면, 트랜잭션 ID 겹침 방지 작업을 하는 autovacuum 작업 전에,
테이블 나이가 줄어들게 된다.
자세한 내용은 <xref linkend="vacuum-for-wraparound"/>에서 설명한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-vacuum-freeze-min-age" xreflabel="vacuum_freeze_min_age">
<term><varname>vacuum_freeze_min_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>vacuum_freeze_min_age</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
테이블 스캔 중 행 버전 동결 여부를 결정할 때 <command>VACUUM</command>이 사용해야 하는 컷오프 연령(트랜잭션에서)을 지정한다. 기본값은 5천만 트랜잭션이다. 
사용자는 이 값을 0 ~ 10억 중 아무거나 설정할 수 있지만 <command>VACUUM</command>은 유효 값을 <xref linkend="guc-autovacuum-freeze-max-age"/>의 절반으로 슬며시 제한하므로 강제 autovacuum들 사이에 시간이 불합리하게 짧은 경우는 없다. 
자세한 내용은 <xref
linkend="vacuum-for-wraparound"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-vacuum-multixact-freeze-table-age" xreflabel="vacuum_multixact_freeze_table_age">
<term><varname>vacuum_multixact_freeze_table_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>vacuum_multixact_freeze_table_age</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>VACUUM</command>은 테이블의 <structname>pg_class</structname>.<structfield>relminmxid</structfield> 필드가 이 설정에서 지정된 연령에 도달한 경우 강제 테이블 스캔을 수행한다. 
An aggressive scan differs from
        a regular <command>VACUUM</command> in that it visits every page that might
        contain unfrozen XIDs or MXIDs, not just those that might contain dead
        tuples.
기본값은 1억 5천만 multixact이다. 
사용자는 이 값을 0 ~ 20억 중 아무거나 설정할 수 있지만
크게 지정해도
<command>VACUUM</command>은 유효 값을
<xref linkend="guc-autovacuum-multixact-freeze-max-age"/> 값을 기준으로
그 값의 95%로 강제 조정한다.
이렇기 때문에, 사용자가 직접 실행하는 <command>VACUUM</command> 작업을 
정기적으로 하면, 트랜잭션 ID 겹침 방지 작업을 하는 autovacuum 작업 전에,
테이블 나이가 줄어들게 된다.
자세한 내용은 <xref linkend="vacuum-for-multixact-wraparound"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-vacuum-multixact-freeze-min-age" xreflabel="vacuum_multixact_freeze_min_age">
<term><varname>vacuum_multixact_freeze_min_age</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>vacuum_multixact_freeze_min_age</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
테이블 스캔 중 행 multixact ID를 후속 트랜잭션 ID 또는 multixact ID로 교체 여부를 결정할 때 <command>VACUUM</command>이 사용해야 하는 컷오프 연령(multixact에서)을 지정한다. 
기본값은 5백만 multixact이다. 사용자는 이 값을 0 ~ 10억 중 아무거나 설정할 수 있지만 <command>VACUUM</command>은 유효 값을 <xref linkend="guc-autovacuum-multixact-freeze-max-age"/>의 절반으로 슬며시 제한하므로 강제 autovacuum들 사이에 시간이 불합리하게 짧은 경우는 없다. 
자세한 내용은 <xref linkend="vacuum-for-multixact-wraparound"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-bytea-output" xreflabel="bytea_output">
<term><varname>bytea_output</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>bytea_output</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
타입 <type>bytea</type> 타입의 값에 대한 출력 형식을 설정한다. 유효 값은 <literal>hex</literal>(기본값) 및 <literal>escape</literal>(전형적인 PostgreSQL 형식)이다. 
자세한 내용은 <xref linkend="datatype-binary"/>을 참조 바란다. 
<type>bytea</type> 타입은 이 설정과 무관하게 입력에서 항상 두양쪽 형식을 수용한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-xmlbinary" xreflabel="xmlbinary">
<term><varname>xmlbinary</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>xmlbinary</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
바이너리 값이 XML로 인코딩되는 방법을 설정한다. 
이것은 예를 들면 <type>bytea</type> 값이 <function>xmlelement</function> 또는 <function>xmlforest</function> 함수에 의해 XML로 변환되는 경우에 적용된다. 
가능한 값은, XML 스키마 표준에서 정의된 <literal>base64</literal> 및 <literal>hex</literal>이다. 
기본값은 <literal>base64</literal>이다. XML 함수에 대한 자세한 내용은 <xref linkend="functions-xml"/>을 참조 바란다.
 </para>

 <para>
여기서 선택한 것을 실제로 선호도의 문제로, 클라이언트 애플리케이션에서 가능한 제약에 의해서만 제한된다. 
양쪽 방법은 hex 인코딩이 base64 인코딩보다 다소 크더라도 가능한 모든 값을 지원한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-xmloption" xreflabel="xmloption">
<term><varname>xmloption</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>xmloption</varname> 환경 설정 매개 변수</primary>
</indexterm>
<indexterm>
 <primary><varname>SET XML OPTION</varname></primary>
</indexterm>
<indexterm>
 <primary>XML option</primary>
</indexterm>
</term>
<listitem>
 <para>
XML과 문자 string 값 사이의 변환 시 <literal>DOCUMENT</literal> 또는 <literal>CONTENT</literal>가 암시적인지를 설정한다. 
이것에 대한 설명은 <xref
linkend="datatype-xml"/>을 참조 바란다. 유효 값은 <literal>DOCUMENT</literal> 및 <literal>CONTENT</literal>이다. 기본값은 <literal>CONTENT</literal>이다.
 </para>

 <para>
SQL 표준에 따라 이 옵션을 설정하는 명령은 다음과 같다.
<synopsis>
SET XML OPTION { DOCUMENT | CONTENT };
</synopsis>
이 구문은 PostgreSQL에서도 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-gin-pending-list-limit" xreflabel="gin_pending_list_limit">
      <term><varname>gin_pending_list_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>gin_pending_list_limit</varname></primary>
       <secondary>configuration parameter</secondary>
      </indexterm>
      </term>
      <listitem>
       <para>
        GIN 인덱스 <literal>빠른 변경</literal> 기능이 활성되었을 경우
        GIN 인덱스 펜딩 목록 최대 크기를 지정한다.
        펜딩 목록이 이 크기보다 커지면, 일괄 작업으로
        원 GIN 인덱스 자료에 반영하고 이 목록은 비운다.
        설정값에 단위가 없으면, kB로 간주한다.
        기본값은 4 MB이다.  이 값은 인덱스의 저장 매개 변수 설정으로
        개별 인덱스 별로 따로 설정할 수 있다.
        이 부분에 대해서는 <xref linkend="gin-fast-update"/>과
        <xref linkend="gin-tips"/>에서 보다 자세히 다룬다.
       </para>
      </listitem>
     </varlistentry>

 </variablelist>
</sect2>
 <sect2 id="runtime-config-client-format">
 <title>로케일(locale) 및 출력 양식</title>

 <variablelist>

 <varlistentry id="guc-datestyle" xreflabel="datestyle">
<term><varname>DateStyle</varname> (<type>string</type>)
<indexterm>
 <primary><varname>DateStyle</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
날짜 및 시간 값의 표시 형식과, 애매한 날짜 입력 값을 해석하는 규칙을 설정한다. 
역사적인 이유로, 이 변수는 두 가지 독립적인 요소인 출력 형식 명세(<literal>ISO</literal> 또는
<literal>Postgres</literal>, <literal>SQL</literal>, <literal>German</literal>)와 연/월/일 순서의 입력/출력 명시(<literal>DMY</literal> 또는 <literal>MDY</literal>, <literal>YMD</literal>)로 환경 설정된다. 
이것은 별개로 설정하거나 함께 설정할 수 있다. 키워드 <literal>Euro</literal> 및 <literal>European</literal>은 <literal>DMY</literal>의 동의어이고, 키워드 <literal>US</literal>, <literal>NonEuro</literal> 및 <literal>NonEuropean</literal>은 <literal>MDY</literal>의 동의어이다. 
자세한 내용은 <xref linkend="datatype-datetime"/>을 참조 바란다. 
내장된 기본값은 <literal>ISO, MDY</literal>이지만 <application>initdb</application>는 선택된 <varname>lc_time</varname> 로케일(locale)의 동작에 해당되는 설정으로 환경 설정 파일을 초기화한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-intervalstyle" xreflabel="intervalstyle">
<term><varname>IntervalStyle</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>IntervalStyle</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
간격 값에 대한 표시 형식을 설정한다. <literal>sql_standard</literal>는 <acronym>SQL</acronym> 표준 간격 리터럴과 일치하는 출력을 생성한다. 
<literal>postgres</literal> 값(기본값)은 <xref linkend="guc-datestyle"/> 매개 변수가 <literal>ISO</literal>로 설정된 경우 <productname>PostgreSQL</productname> 8.4 이전 릴리스와 일치하는 출력을 생성한다. 
<literal>postgres_verbose</literal> 값은 <varname>DateStyle</varname> 매개 변수가 비 <literal>ISO</literal> 출력으로 설정된 경우 <productname>PostgreSQL</productname> 8.4 이전 릴리스와 일치하는 출력을 생성한다. 
<literal>iso_8601</literal> 값은 ISO 8601의 section 4.4.3.2에 정의된 <quote>format with designators</quote> 시간 간격과 일치하는 출력을 생성한다.
 </para>
 <para>
<varname>IntervalStyle</varname> 매개 변수 또한 애매한 간격 입력을 해석하는 데 영향을 준다. 자세한 내용은 <xref linkend="datatype-interval-input"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-timezone" xreflabel="timezone">
<term><varname>TimeZone</varname> (<type>string</type>)
<indexterm>
 <primary><varname>TimeZone</varname> 환경 설정 매개 변수</primary>
</indexterm>
<indexterm><primary>time zone</primary></indexterm>
</term>
<listitem>
 <para>
타임스탬프를 표시 및 해석하기 위한 시간대를 설정한다. 
내장 기본값은 <literal>GMT</literal>이지만, 일반적으로 <filename>postgresql.conf</filename>에 오버라이드되고 <application>initdb</application>는 시스템 환경에 해당되는 곳에 설정을 설치한다. 
자세한 내용은 <xref linkend="datatype-timezones"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-timezone-abbreviations" xreflabel="timezone_abbreviations">
<term><varname>timezone_abbreviations</varname> (<type>string</type>)
<indexterm>
 <primary><varname>timezone_abbreviations</varname> 환경 설정 매개 변수</primary>
</indexterm>
<indexterm><primary>time zone names</primary></indexterm>
</term>
<listitem>
 <para>
서버에서 datetime 입력으로 수용되는 시간대 약어 컬렉션을 설정한다. 
기본값은, 거의 전세계적으로 적용되는 컬렉션인 <literal>'Default'</literal>이며, 특정 설치용으로 정의할 수 있는 <literal>'Australia'</literal>와 <literal>'India'</literal> 및 기타 컬렉션도 있다. 
자세한 내용은 <xref linkend="datetime-config-files"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-extra-float-digits" xreflabel="extra_float_digits">
<term><varname>extra_float_digits</varname> (<type>integer</type>)
<indexterm>
 <primary>significant digits</primary>
</indexterm>
<indexterm>
 <primary>floating-point</primary>
 <secondary>display</secondary>
</indexterm>
<indexterm>
 <primary><varname>extra_float_digits</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
       <para>
        This parameter adjusts the number of digits used for textual output of
        floating-point values, including <type>float4</type>, <type>float8</type>,
        and geometric data types.
       </para>
       <para>
        If the value is 1 (the default) or above, float values are output in
        shortest-precise format; see <xref linkend="datatype-float"/>. The
        actual number of digits generated depends only on the value being
        output, not on the value of this parameter. At most 17 digits are
        required for <type>float8</type> values, and 9 for <type>float4</type>
        values. This format is both fast and precise, preserving the original
        binary float value exactly when correctly read. For historical
        compatibility, values up to 3 are permitted.
       </para>
       <para>
        If the value is zero or negative, then the output is rounded to a
        given decimal precision. The precision used is the standard number of
        digits for the type (<literal>FLT_DIG</literal>
        or <literal>DBL_DIG</literal> as appropriate) reduced according to the
        value of this parameter. (For example, specifying -1 will cause
        <type>float4</type> values to be output rounded to 5 significant
        digits, and <type>float8</type> values
        rounded to 14 digits.) This format is slower and does not preserve all
        the bits of the binary float value, but may be more human-readable.
       </para>
       <note>
        <para>
         The meaning of this parameter, and its default value, changed
         in <productname>PostgreSQL</productname> 12;
         see <xref linkend="datatype-float"/> for further discussion.
        </para>
       </note>
</listitem>
 </varlistentry>

 <varlistentry id="guc-client-encoding" xreflabel="client_encoding">
<term><varname>client_encoding</varname> (<type>string</type>)
<indexterm>
 <primary><varname>client_encoding</varname> 환경 설정 매개 변수</primary>
</indexterm>
<indexterm><primary>character set</primary></indexterm>
</term>
<listitem>
 <para>
클라이언트 측 인코딩(문자 집합)을 설정한다. 기본값은 데이터베이스 인코딩을 사용하는 것이다. 
<productname>PostgreSQL</productname> 서버에서 지원하는 문자 집합은 <xref linkend="multibyte-charset-supported"/>에 나와 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lc-messages" xreflabel="lc_messages">
<term><varname>lc_messages</varname> (<type>string</type>)
<indexterm>
 <primary><varname>lc_messages</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
메시지가 표시되는 언어를 설정한다. 허용되는 값은 시스템에 따라 다르다. 자세한 내용은 <xref linkend="locale"/>을 참조 바란다. 
변수가 비어 있는 string으로 설정된 경우(기본값), 값은 시스템 의존적인 방법으로 서버의 실행 환경으로부터 상속된다.
 </para>

 <para>
일부 시스템에서 이 로케일(locale) 카테고리는 존재하지 않는다. 이 변수의 설정은 계속 유효하지만 아무런 효과는 없다. 
또한 원하는 언어로 번역된 메시지가 존재하지 않을 수도 있다. 이런 경우 영어 메시지를 확인할 수 있다.
 </para>

 <para>
서버 로그 및 클라이언트로 전송되는 메시지에 영향을 줄 수 있고 부적절한 값이 서버 로그의 가독성을 해칠 수 있으므로 슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lc-monetary" xreflabel="lc_monetary">
<term><varname>lc_monetary</varname> (<type>string</type>)
<indexterm>
 <primary><varname>lc_monetary</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
통화 형식 지정에 사용되는 로케일(locale)을 지정한다. 예를 들면, 함수의 <function>to_char</function> 계열을 사용한다. 
허용되는 값은 시스템에 따라 다르다. 자세한 내용은 <xref
linkend="locale"/>을 참조 바란다. 
변수가 비어 있는 string으로 설정된 경우(기본값), 값은 시스템 의존적인 방법으로 서버의 실행 환경으로부터 상속된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lc-numeric" xreflabel="lc_numeric">
<term><varname>lc_numeric</varname> (<type>string</type>)
<indexterm>
 <primary><varname>lc_numeric</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
숫자 형식 지정에 사용되는 로케일(locale)을 지정한다. 예를 들면, 함수의 <function>to_char</function> 계열을 사용한다. 
허용되는 값은 시스템에 따라 다르다. 자세한 내용은 <xref
linkend="locale"/>을 참조 바란다. 
변수가 비어 있는 string으로 설정된 경우(기본값), 값은 시스템 의존적인 방법으로 서버의 실행 환경으로부터 상속된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lc-time" xreflabel="lc_time">
<term><varname>lc_time</varname> (<type>string</type>)
<indexterm>
 <primary><varname>lc_time</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
날짜 및 시간 형식 지정에 사용되는 로케일(locale)을 지정한다. 예를 들면, 함수의 <function>to_char</function> 계열을 사용한다. 
허용되는 값은 시스템에 따라 다르다. 자세한 내용은 <xref
linkend="locale"/>을 참조 바란다. 
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-default-text-search-config" xreflabel="default_text_search_config">
<term><varname>default_text_search_config</varname> (<type>string</type>)
<indexterm>
 <primary><varname>default_text_search_config</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
환경 설정을 지정하는 명시적 인수 없이, 텍스트 검색 함수의 변형에서 사용되는 텍스트 검색 환경 설정을 선택한다. 
자세한 내용은 <xref linkend="textsearch"/>을 참조 바란다. 
내장된 기본값은 <literal>pg_catalog.simple</literal>이지만 로케일(locale) 일치 환경 설정을 식별할 수 있는 경우 <application>initdb</application>는 선택된 <varname>lc_ctype</varname> 로케일(locale)에 해당되는 설정으로 환경 설정 파일을 초기화한다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>

</sect2>

<sect2 id="runtime-config-client-preload">
 <title>공유 라이브러리 사전 로드</title>

 <para>
추가 기능을 로드하거나 성능상 이점을 위해 몇 가지 설정을 서버로의 공유 라이브러리 사전 로드에 사용할 수 있다. 
예를 들면, <literal>'$libdir/mylib'</literal> 설정은 <literal>mylib.so</literal>(또는 일부 플랫폼에서, <literal>mylib.sl</literal>)가 설치 표준 라이브러리 디렉터리로부터 사전 로드되게 한다. 설정 간 차이라면 효과가 나타나는 시간과, 변경 시 필요한 권한이다.
 </para>

 <para>
<productname>PostgreSQL</productname> 프로시저 언어 라이브러리는 이와 같은 방식으로 사전 로드할 수 있으며, 일반적으로 <literal>'$libdir/plXXX'</literal> 구문이 사용된다. 
여기서 <literal>XXX</literal>는 <literal>pgsql</literal>, <literal>perl</literal>, <literal>tcl</literal> 또는 <literal>python</literal>이다.
 </para>

 <para>
각 매개 변수별로 2개 이상의 라이브러리를 로드하는 경우 이름은 쉼표로 구분해야 한다. 
모든 라이브러리 이름은 큰따옴표를 사용하지 않는 한 소문자로 변환된다.
 </para>

 <para>
특별히 PostgreSQL과 함께 사용하려는 공유 라이브러리만 이와 같은 방식으로 로드할 수 있다. 
모든 PostgreSQL 지원 라이브러리는 호환성 보장을 검사하는 <quote>magic block</quote>이 있다. 
이러한 이유로 비 PostgreSQL 라이브러리는 이 방식으로 로드할 수 없다. 
이를 위해 <envar>LD_PRELOAD</envar> 같은 운영 체제 기능을 사용할 수는 있다.
 </para>

 <para>
일반적으로 해당 모듈을 로드하는 권장 방법은 특정 모듈에 대한 문서를 참조 바란다.
 </para>

 <variablelist>
 <varlistentry id="guc-local-preload-libraries" xreflabel="local_preload_libraries">
<term><varname>local_preload_libraries</varname> (<type>string</type>)
<indexterm>
 <primary><varname>local_preload_libraries</varname> 환경 설정 매개 변수</primary>
</indexterm>
<indexterm>
 <primary><filename>$libdir/plugins</filename></primary>
</indexterm>
</term>
<listitem>
 <para>
        This variable specifies one or more shared libraries that are to be
        preloaded at connection start.
        It contains a comma-separated list of library names, where each name
        is interpreted as for the <xref linkend="sql-load"/> command.
        Whitespace between entries is ignored; surround a library name with
        double quotes if you need to include whitespace or commas in the name.
        The parameter value only takes effect at the start of the connection.
        Subsequent changes have no effect.  If a specified library is not
        found, the connection attempt will fail.
 </para>

 <para>
이 옵션은 사용자가 설정할 수 있다. 따라서 로드된 라이브러리는 설치의 표준 라이브러리 디렉터리의 <filename>plugins</filename> 서브 디렉터리에 나타나는 것으로 한정된다. 
(<quote>안전한</quote> 라이브러리만 설치되게 하는 것은 데이터베이스 관리자의 책임이다.) 
예를 들면, <literal>$libdir/plugins/mylib</literal> 같이 <varname>local_preload_libraries</varname>의 항목은 이 디렉터리를 명시적으로 지정할 수 있으며, 
또는 라이브러리 이름 <literal>mylib</literal>는 <literal>$libdir/plugins/mylib</literal>와 효과가 동일할 수 있다.
 </para>

 <para>
슈퍼유저 이외에 사용자가 이러한 방식으로 사용할 수 있도록 모듈이 특수하게 디자인되어 있지 않는 한 이것은 일반적으로 올바른 설정 방법이 아니다. 
대신 <xref linkend="guc-session-preload-libraries"/>를 찾아 보기 바란다.
 </para>
</listitem>
 </varlistentry>


 <varlistentry id="guc-session-preload-libraries" xreflabel="session_preload_libraries">
<term><varname>session_preload_libraries</varname> (<type>string</type>)
<indexterm>
 <primary><varname>session_preload_libraries</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
        This variable specifies one or more shared libraries that are to be
        preloaded at connection start.
        It contains a comma-separated list of library names, where each name
        is interpreted as for the <xref linkend="sql-load"/> command.
        Whitespace between entries is ignored; surround a library name with
        double quotes if you need to include whitespace or commas in the name.
        The parameter value only takes effect at the start of the connection.
        Subsequent changes have no effect.  If a specified library is not
        found, the connection attempt will fail.
        Only superusers can change this setting.
 </para>

 <para>
이 기능은 명시적 <command>LOAD</command> 명령 없이 디버깅 또는 성능 평가 라이브러리가 특정 세션에 로드되도록 한다. 
예를 들면, <command>ALTER ROLE SET</command>를 사용하여 이 매개 변수를 설정하면 주어진 사용자 이름 하의 모든 세션에 대해 <xref linkend="auto-explain"/>의 활성화가 가능하다.
또한 이 매개 변수는 서버 재시작 없이 변경 가능하므로(단, 세션을 새로 시작하는 경우에만 효과가 있다), 새 모듈을 모든 세션에 적용해야 하더라도 이렇게 추가하는 것이 쉽다.
 </para>

 <para>
<xref linkend="guc-shared-preload-libraries"/>와 달리, 세션을 먼저 사용한 경우보다 세션 시작 시 라이브러리를 로딩하는 것이 큰 장점은 없다. 
그래도, 연결 풀링을 사용하는 경우에는 장점이 약간 있기는 하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-shared-preload-libraries" xreflabel="shared_preload_libraries">
<term><varname>shared_preload_libraries</varname> (<type>string</type>)
<indexterm>
 <primary><varname>shared_preload_libraries</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 변수는 서버 시작 시에 사전 로드할 하나 이상의 공유 라이브러리를 쉼표를 사용하여 지정한다. 
이 매개 변수는 서버 시작 시에만 설정 가능하다. 지정된 라이브러리를 찾지 못하면 서버 시작이 실패한다.
 </para>

 <para>
일부 라이브러리는 공유 메모리 할당, 경량 잠금 예약 또는 백그라운드 worker 시작 같은 postmaster 시작 시에만 일어날 수 있는 특정한 명령을 수행해야 한다. 
해당 라이브러리는 이 매개 변수를 통해 서버 시작 시에만 로드해야 한다. 
자세한 내용은 각 라이브러리의 문서를 참조 바란다.
 </para>

 <para>
다른 라이브러리는 사전 로드할 수도 있다. 공유 라이브러리를 사전 로드해서 라이브러리를 먼저 사용하는 경우 라이브러리 시작 시간은 라이브러리가 처음 사용될 때 바뀐다. 
단, 해당 프로세스가 라이브러리를 사용하지 않더라도 각각의 새로운 서버 프로세스 시작 시간이 약간 늘어날 수 있다. 
따라서 이 매개 변수는 대부분의 세션에서 사용되는 라이브러리인 경우에만 권장된다. 
또한 이 매개 변수를 변경하면 서버를 재시작해야 하므로 단기간 디버깅 시에는 설정이 바람직하지 않다. 
대신 <xref linkend="guc-session-preload-libraries"/>를 사용해야 한다.
 </para>

<note>
 <para>
Windows 호스트에서 서버 시작 시 라이브러리를 사전 로드하는 것은 각각의 새 서버 프로세스를 시작하는 데 필요한 시간을 줄이지 않는다. 
각 서버 프로세스는 모든 사전 로드 라이브러리를 리로드한다. 
그러나, postmaster 시작 시에 명령을 수행해야 하는 라이브러리의 경우 <varname>shared_preload_libraries
</varname>는 Windows 호스트에 여전히 유용하다.
 </para>
</note>
</listitem>
 </varlistentry>

     <varlistentry id="guc-jit-provider" xreflabel="jit_provider">
      <term><varname>jit_provider</varname> (<type>string</type>)
       <indexterm>
        <primary><varname>jit_provider</varname> configuration parameter</primary>
       </indexterm>
      </term>
      <listitem>
       <para>
        This variable is the name of the JIT provider library to be used
        (see <xref linkend="jit-pluggable"/>).
        The default is <literal>llvmjit</literal>.
        This parameter can only be set at server start.
       </para>

       <para>
        If set to a non-existent library, <acronym>JIT</acronym> will not be
        available, but no error will be raised. This allows JIT support to be
        installed separately from the main
        <productname>PostgreSQL</productname> package.
       </para>
      </listitem>
     </varlistentry>
</variablelist>
 </sect2>

 <sect2 id="runtime-config-client-other">
 <title>그 외 기본값</title>

 <variablelist>

 <varlistentry id="guc-dynamic-library-path" xreflabel="dynamic_library_path">
<term><varname>dynamic_library_path</varname> (<type>string</type>)
<indexterm>
 <primary><varname>dynamic_library_path</varname> 환경 설정 매개 변수</primary>
</indexterm>
<indexterm><primary>dynamic loading</primary></indexterm>
</term>
<listitem>
 <para>
동적 로드 가능한 모듈을 열어야 하고 <command>CREATE FUNCTION</command> 또는 <command>LOAD</command> 명령에서 지정된 파일 이름에 디렉터리 성분이 없는 경우(예: 이름에 슬래시가 없음) 시스템은 필요한 파일에 대한 이 경로를 검색한다.
 </para>

 <para>
 <varname>dynamic_library_path</varname>에 대한 값은 콜론(또는 Windows에서 세미콜론)으로 구분된 절대 디렉터리 경로 목록이어야 한다. 
 목록 요소가 특수 문자 <literal>$libdir</literal>로 시작되는 경우 컴파일된 <productname>PostgreSQL</productname> 패키지 라이브러리 디렉터리가 $libdir에 대체된다. 
 이것은 표준 <productname>PostgreSQL</productname> 배포에 의해 제공된 모듈이 설치되는 경우에 해당된다. 
 (이 디렉터리의 이름을 찾으려면 <literal>pg_config --pkglibdir</literal>을 사용해야 한다.) 예를 들면:
<programlisting>
dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'
</programlisting>
또는 Windows 환경에서:
or, in a Windows environment:
<programlisting>
dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'
</programlisting>
 </para>

 <para>
이 매개 변수의 기본값은 <literal>'$libdir'</literal>이다. 값이 비어 있는 string으로 설정되면, 자동 경로 검색이 해제된다.
 </para>

 <para>
이 매개 변수는 런타임 시 변경될 수 있지만 해당 설정은 클라이언트 연결이 끝날 때까지만 유지되므로 이 방법은 개발 단계에서 따로 준비해야 한다. 
권장 방법은 <filename>postgresql.conf</filename> 환경 설정 파일에서 이 매개 변수를 설정하는 것이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-gin-fuzzy-search-limit" xreflabel="gin_fuzzy_search_limit">
<term><varname>gin_fuzzy_search_limit</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>gin_fuzzy_search_limit</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
GIN 인덱스 스캔에 의해 리턴된 설정 크기에 대한 상한. 자세한 내용은 <xref linkend="gin-tips"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>
 </sect1>

 <sect1 id="runtime-config-locks">
<title>잠금(lock) 관리</title>

 <variablelist>

 <varlistentry id="guc-deadlock-timeout" xreflabel="deadlock_timeout">
<term><varname>deadlock_timeout</varname> (<type>integer</type>)
<indexterm>
 <primary>deadlock</primary>
 <secondary>timeout during</secondary>
</indexterm>
<indexterm>
 <primary>timeout</primary>
 <secondary>deadlock</secondary>
</indexterm>
<indexterm>
 <primary><varname>deadlock_timeout</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 데드록 상황인지 검사하기 전에 잠금을 대기하는 시간이다. 
데드록에 대한 검사는 상대적으로 고비용이므로 잠금을 기다릴 때마다 서버가 검사를 실행하지는 않는다. 
실제 운영 중인 애플리케이션에서 데드록이 일반적이지는 않으며, 데드록 검사 전에 잠시 잠금을 기다리는 것이라고 긍정적으로 가정한다. 
이 값을 늘리면 불필요한 데드록 검사를 위해 대기하는 시간이 줄어들지만
실제 데드록 에러 리포팅이 느려진다. 
설정값에 단위를 지정하지 않았다면, 밀리세컨드로 간주한다.
기본값은, 실제로 사용자가 희망하는 최소값일 가능성이 높은 1초이다(<literal>1s</literal>). 
로드가 과도한 서버에서는 이 값을 올리고 싶을 것이다. 
이상적으로, waiter가 데드록 검사를 결정하기 전에 잠금이 해제되는 이상한 상황을 개선하려면 이 설정은 사용자의 일반적인 트랜잭션 시간을 초과해야 한다. 
슈퍼유저만 이 설정을 변경할 수 있다.
 </para>

 <para>
<xref linkend="guc-log-lock-waits"/>가 설정된 경우 이 매개 변수는 잠금 대기에 대한 로그 메시지가 발생되기 전에 기다려야 하는 시간도 결정한다. 
잠금 지연을 조사하려는 사용자라면 일반적인 <varname>deadlock_timeout</varname>보다 짧게 설정할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-locks-per-transaction" xreflabel="max_locks_per_transaction">
<term><varname>max_locks_per_transaction</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_locks_per_transaction</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
공유 잠금 테이블은 <varname>max_locks_per_transaction</varname> * (<xref
linkend="guc-max-connections"/> + <xref
linkend="guc-max-prepared-transactions"/>) 개체(예: 테이블)에 대한 잠금을 추적하므로 이 개체 수 이하를 언제든 잠글 수 있다. 
이 매개 변수는 트랜잭션별로 할당된 평균 개체 잠금 수를 제어한다. 개별 트랜잭션은 모든 트랜잭션의 잠금이 잠금 테이블에 적합한 경우에 개체를 추가로 잠글 수 있다. 
이것은 잠글 수 있는 행 수는 <emphasis>아니다</emphasis>. 
해당 값은 무제한이다. 기본값으로 64가 충분한 것으로 입증되었지만, 쿼리가 단일 트랜잭션으로 서로 다른 여러 가지 테이블에 액세스하는 경우라면 이 값을 늘려야 할 수도 있다(예: 자식이 다수 있는 부모 테이블에 대한 쿼리).
이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>

 <para>
대기 서버 실행 중에 사용자는 이 매개 변수를 마스터 서버 값보다 크거나 같게 설정해야 한다. 그렇지 않으면 대기 서버에서 쿼리가 허용되지 않는다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-pred-locks-per-transaction" xreflabel="max_pred_locks_per_transaction">
<term><varname>max_pred_locks_per_transaction</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_pred_locks_per_transaction</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
공유 예측 잠금 테이블은 <varname>max_pred_locks_per_transaction</varname> * (<xref
linkend="guc-max-connections"/> + <xref
linkend="guc-max-prepared-transactions"/>) 개체(예: 테이블)에 대한 잠금을 추적하므로 이 개체 수 이하를 언제든 잠글 수 있다. 
이 매개 변수는 트랜잭션별로 할당된 평균 개체 잠금 수를 제어한다. 개별 트랜잭션은 모든 트랜잭션의 잠금이 잠금 테이블에 적합한 경우에 개체를 추가로 잠글 수 있다. 
이것은 잠글 수 있는 행의 수는 <emphasis>아니다</emphasis>. 
해당 값은 무제한이다. 기본값으로 64가 테스트 시 충분한 것으로 입증되었지만, 클라이언트가 직렬화 가능한 트랜잭션으로 서로 다른 여러 가지 테이블에 액세스하는 경우라면 이 값을 늘려야 할 수도 있다. 
이 매개 변수는 서버 시작 시에만 설정 가능하다.
 </para>

</listitem>
 </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-relation" xreflabel="max_pred_locks_per_relation">
      <term><varname>max_pred_locks_per_relation</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_pred_locks_per_relation</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This controls how many pages or tuples of a single relation can be
        predicate-locked before the lock is promoted to covering the whole
        relation.  Values greater than or equal to zero mean an absolute
        limit, while negative values
        mean <xref linkend="guc-max-pred-locks-per-transaction"/> divided by
        the absolute value of this setting.  The default is -2, which keeps
        the behavior from previous versions of <productname>PostgreSQL</productname>.
        This parameter can only be set in the <filename>postgresql.conf</filename>
        file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-page" xreflabel="max_pred_locks_per_page">
      <term><varname>max_pred_locks_per_page</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_pred_locks_per_page</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This controls how many rows on a single page can be predicate-locked
        before the lock is promoted to covering the whole page.  The default
        is 2.  This parameter can only be set in
        the <filename>postgresql.conf</filename> file or on the server command line.
       </para>
      </listitem>
     </varlistentry>

 </variablelist>
 </sect1>

 <sect1 id="runtime-config-compatible">
<title>버전 및 플랫폼 호환성</title>

<sect2 id="runtime-config-compatible-version">
 <title>이전 PostgreSQL 버전</title>

 <variablelist>

 <varlistentry id="guc-array-nulls" xreflabel="array_nulls">
<term><varname>array_nulls</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>array_nulls</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 따옴표 없는 <literal>NULL</literal>을 null 배열 요소로 지정하는 것으로 배열 입력 파서에 인식시킬 것인지를 제어한다. 
기본적으로 이것은, null 값이 포함된 배열값의 입력을 허용하는 <literal>on</literal>이다. 
단, 8.2 이전 버전의 <productname>PostgreSQL</productname>은 배열에서 null 값을 지원하지 않으며, 따라서 string 값 <quote>NULL</quote>을 사용하는 일반적인 배열 요소를 지정하는 것으로 <literal>NULL</literal>을 처리한다. 
예전 동작을 필요로 하는 어플리케이션 이전 버전과의 호환성 때문에 이 변수를 <literal>off</literal>로 설정할 수 있다.
 </para>

 <para>
이 변수가 <literal>off</literal>인 경우에도 null 값을 포함한 배열 변수를 생성하는 것도 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-backslash-quote" xreflabel="backslash_quote">
<term><varname>backslash_quote</varname> (<type>enum</type>)
<indexterm><primary>strings</primary><secondary>backslash quotes</secondary></indexterm>
<indexterm>
 <primary><varname>backslash_quote</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 string 리터럴에서 따옴표를 <literal>\'</literal>로 표기할 수 있는지를 제어한다. 따옴표를 SQL 표준 방식으로 표기하는 방법은 이중으로 사용하는 것(<literal>''</literal>)이지만 <productname>PostgreSQL</productname>은 오래 전부터 <literal>\'</literal>도 허용해 왔다. 
그러나, <literal>\'</literal>를 사용하면 일부 클라이언트 문자 집합 인코딩에서 마지막 바이트가 수치상 ASCII <literal>\</literal>와 동일한 멀티바이트 문자가 있기 때문에 보안상 위험하다. 클라이언트 측 코드가 잘못 이스케이프할 경우 SQL 인젝션 공격이 가능하다. 
이러한 위험은, 역슬래시에 의해 이스케이프되는 따옴표가 있는 경우에 서버가 쿼리를 거부하도록 함으로써 예방할 수 있다. 
<varname>backslash_quote</varname>의 허용 값은 <literal>on</literal>(항상 <literal>\'</literal> 허용), <literal>off</literal>(항상 거부) 및 <literal>safe_encoding</literal>(클라이언트 인코딩이 멀티바이트 문자 내에서 ASCII <literal>\</literal>를 수락하지 않는 경우에만 허용)이다. 
기본 설정은 <literal>safe_encoding</literal>이다.
 </para>

 <para>
표준 준수 string 리터럴에서, <literal>\</literal>는 <literal>\</literal>라는 점에 유의해야 한다. 
이 매개 변수는 이스케이프 string 구문(<literal>E'...'</literal>)을 비롯한 비 표준 준수 리터럴의 처리에만 영향을 준다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-escape-string-warning" xreflabel="escape_string_warning">
<term><varname>escape_string_warning</varname> (<type>boolean</type>)
<indexterm><primary>strings</primary><secondary>escape warning</secondary></indexterm>
<indexterm>
 <primary><varname>escape_string_warning</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on인 경우 역슬래시(<literal>\</literal>)가 일반 string 리터럴(<literal>'...'</literal> 구문)에 있고 <varname>standard_conforming_strings</varname>가 off인 경우 경고가 나타난다. 
기본값은 <literal>on</literal>이다.
 </para>
 <para>
SQL 표준에 따라 일반 string의 기본 동작은 역슬래시를 일반 문자로 처리하기 때문에 역슬래시를 이스케이프로 사용하려는 애플리케이션은 이스케이프 string 구문(<literal>E'...'</literal>)을 수정해야 한다. 
이 변수를 활성화하면 수정이 필요한 코드를 찾는 데 도움이 된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lo-compat-privileges" xreflabel="lo_compat_privileges">
<term><varname>lo_compat_privileges</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>lo_compat_privileges</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
9.0 이전의 <productname>PostgreSQL</productname> 릴리스에서 거대(large) 개체는 액세스 권한이 없었으며, 항상 모든 사용자에 의해 읽기 및 쓰기가 가능했었다. 
이 변수를 <literal>on</literal>으로 설정하면 이전 릴리스와의 호환성에 대한 새 권한 검사가 비활성화된다. 
기본값은 <literal>off</literal>이다. 슈퍼유저만 이 설정을 변경할 수 있다.
 </para>
 <para>
이 변수를 설정한다고 해서 거대(large) 개체와 관련된 모든 보안 검사가 비활성화되는 것은 아니다. 기본 동작에 대한 것만 <productname>PostgreSQL</productname> 9.0에서 변경되었다. 
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-operator-precedence-warning" xreflabel="operator_precedence_warning">
      <term><varname>operator_precedence_warning</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>operator_precedence_warning</varname> 환경 설정 매개 변수</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        이 설정값을 <literal>on</literal>으로 해 두면, 구문 분석시 
        <productname>PostgreSQL</productname> 9.4 포함 이전 버전에 사용되었던 
        연산자 우선 순위에 대한 변경 사항에 대해서 경고를 보여 준다.
        이 설정은 이전 버전부터 사용된 응용프로그램에서 연산자 우선순위 
        때문에 다르게 처리되는 쿼리들을 감시하는데 유용하게 사용된다.
        이 설정은 구문 분석 처리를 이전 버전과 동일하게 변경하지는 않는다.
        기본값은 <literal>off</literal>다.
       </para>

       <para>
        연산자 우선순위에 대한 자세한 것은 <xref linkend="sql-precedence"/>에서 다룬다.
       </para>
      </listitem>
     </varlistentry>

<varlistentry id="guc-quote-all-identifiers" xreflabel="quote-all-identifiers">
<term><varname>quote_all_identifiers</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>quote_all_identifiers</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터베이스가 SQL을 생성하는 경우 (현재) 키워드가 없더라도 모든 식별자에서 따옴표를 사용해야 한다. 
이것은 <command>EXPLAIN</command> 출력과 <function>pg_get_viewdef</function> 같은 함수의 결과에 영향을 준다. 
<xref linkend="app-pgdump"/> 및 <xref linkend="app-pg-dumpall"/>의 <option>--quote-all-identifiers</option> 옵션도 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-standard-conforming-strings" xreflabel="standard_conforming_strings">
<term><varname>standard_conforming_strings</varname> (<type>boolean</type>)
<indexterm><primary>strings</primary><secondary>standard conforming</secondary></indexterm>
<indexterm>
 <primary><varname>standard_conforming_strings</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 대개 string 리터럴(<literal>'...'</literal>)이 역슬래시를 SQL 표준에 지정된 대로 문자 그대로 처리할 것인지 제어한다. 
<productname>PostgreSQL</productname> 9.1 초반에는 기본값이 <literal>on</literal>이다(이전 릴리스에서는 기본값이 <literal>off</literal>). 
애플리케이션은 string 리터럴 처리하는 방법을 결정하는 이 매개 변수를 검사한다. 
이 매개 변수가 존재하면 이스케이프 string 구문(<literal>E'...'</literal>)이 지원되는 것으로 볼 수 있다. 
애플리케이션이 역슬래시를 이스케이프 문자로 처리하기를 원할 경우에는 이스케이프 string 구문(<xref linkend="sql-syntax-strings-escape"/>)을 사용해야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-synchronize-seqscans" xreflabel="synchronize_seqscans">
<term><varname>synchronize_seqscans</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>synchronize_seqscans</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이것은 거대(large) 테이블의 순차 스캔을 허용하여 서로를 동기화하므로 동시 스캔은 동일한 시간에 동일한 블록을 읽고 I/O 작업 부하를 공유한다. 
이것이 활성화되면 스캔이 테이블 중간에서 시작되며, 이미 진행 중인 스캔 활동과 동기화되도록 모든 행을 끝까지 <quote>랩어라운드</quote>한다. 
이것은 결과적으로 <literal>ORDER BY</literal> 절이 없는 쿼리에 의해 리턴된 행 정렬에서 예측 불가능한 변경으로 이어진다. 
이 매개 변수를 <literal>off</literal>로 설정하면 순차 스캔이 항상 테이블 초반에 시작되는 8.3 이전의 동작이 보장된다. 
기본값은 <literal>on</literal>이다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>

<sect2 id="runtime-config-compatible-clients">
 <title>플랫폼 및 클라이언트 호환성</title>
 <variablelist>

 <varlistentry id="guc-transform-null-equals" xreflabel="transform_null_equals">
<term><varname>transform_null_equals</varname> (<type>boolean</type>)
<indexterm><primary>IS NULL</primary></indexterm>
<indexterm>
 <primary><varname>transform_null_equals</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on으로 설정되면 양식의 표현식 <literal><replaceable>expr</replaceable> =
NULL</literal>(또는 <literal>NULL =
<replaceable>expr</replaceable></literal>)은 <literal><replaceable>expr</replaceable> IS NULL</literal>로 처리된다. 
즉, <replaceable>expr</replaceable>가 null 값으로 평가되면 true가 리턴되고, 그 외에는 false가 리턴된다. 
<literal><replaceable>expr</replaceable> = NULL</literal>의 올바른 SQL 규격 호환 동작은 항상 null을 리턴한다(알 수 없음). 
그러므로 이 매개 변수의 기본값은 <literal>off</literal>이다.
 </para>

 <para>
그러나, <productname>Microsoft
Access</productname>에서 필터링된 양식은 <literal><replaceable>expr</replaceable> = NULL</literal>을 사용하여 null 값을 테스트하기 위한 쿼리를 생성하므로 해당 인터페이스를 사용하여 데이터베이스에 액세스하는 경우 사용자는 이 옵션을 on으로 설정하고자 할 수 있다. 
표현식 <literal><replaceable>expr</replaceable> = NULL</literal>은 항상 null 값을 리턴하므로(SQL 표준 해석 사용), 그다지 유용하지 않고, 일반적인 애플리케이션에 거의 나타나지 않으므로 실제로 이 옵션은 해가 되지 않는다. 
하지만 새 사용자는 null 값이 관련된 표현식을 헷갈려 하므로 이 옵션은 기본적으로 off로 설정되어 있다.
 </para>

 <para>
이 옵션은 정확한 양식 <literal>= NULL</literal>에만 영향을 미치며, 다른 비교 연산자 또는 동일한 연산자(예: <literal>IN</literal>)와 관련된 몇몇 표현식과 계산상 동일한 다른 표현식에는 영향을 미치지는 않는다. 
따라서 이 옵션이 나쁜 프로그래밍에 대한 해결책은 아니다.
 </para>

 <para>
관련 내용은 <xref linkend="functions-comparison"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 </variablelist>
</sect2>
 </sect1>

 <sect1 id="runtime-config-error-handling">
<title>에러 처리</title>

<variablelist>

 <varlistentry id="guc-exit-on-error" xreflabel="exit_on_error">
<term><varname>exit_on_error</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>exit_on_error</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on인 경우 어떤 에러가 발생했든 현재 세션이 중단된다. 기본적으로 이것은 off로 설정되고 FATAL 에러 시 세션이 중단된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-restart-after-crash" xreflabel="restart_after_crash">
<term><varname>restart_after_crash</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>restart_after_crash</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
기본값인 on으로 설정되면 백엔드 충돌 후 <productname>PostgreSQL</productname>이 
자동으로 재초기화된다. 
이 값을 계속 on으로 설정하는 것은 일반적으로 데이터베이스의
가용성을 최대화하는 최고의 방법이다. 
그러나, 클러스터웨어에서 <productname>PostgreSQL</productname>를 호출하는 경우처럼 경우에 따라 재시작을 비활성화해서 클러스터웨어가 제어를 획득하고 적절하다고 생각되는 조치를 취할 수 있게 하는 점이 유용하다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-data-sync-retry" xreflabel="data_sync_retry">
      <term><varname>data_sync_retry</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>data_sync_retry</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        When set to off, which is the default, <productname>PostgreSQL</productname>
        will raise a PANIC-level error on failure to flush modified data files
        to the file system.  This causes the database server to crash.  This
        parameter can only be set at server start.
       </para>
       <para>
        On some operating systems, the status of data in the kernel's page
        cache is unknown after a write-back failure.  In some cases it might
        have been entirely forgotten, making it unsafe to retry; the second
        attempt may be reported as successful, when in fact the data has been
        lost.  In these circumstances, the only way to avoid data loss is to
        recover from the WAL after any failure is reported, preferably
        after investigating the root cause of the failure and replacing any
        faulty hardware.
       </para>
       <para>
        If set to on, <productname>PostgreSQL</productname> will instead
        report an error but continue to run so that the data flushing
        operation can be retried in a later checkpoint.  Only set it to on
        after investigating the operating system's treatment of buffered data
        in case of write-back failure.
       </para>
      </listitem>
     </varlistentry>

</variablelist>

 </sect1>

 <sect1 id="runtime-config-preset">
<title>프리셋 옵션</title>

<para>
 다음 <quote>매개 변수</quote>는 읽기 전용이며, <productname>PostgreSQL</productname>이 컴파일 되거나 설치된 경우에만 결정된다. 
 따라서 <filename>postgresql.conf</filename> 샘플 파일에서는 제외되었다. 
 이 옵션은 특정 애플리케이션, 특히 관리 프론트 엔드에 도움이 되는 <productname>PostgreSQL</productname> 동작의 다양한 측면을 보여준다.
</para>

<variablelist>

 <varlistentry id="guc-block-size" xreflabel="block_size">
<term><varname>block_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>block_size</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
디스크 블록의 크기를 알려준다. 이것은 서버 빌드 시 <literal>BLCKSZ</literal> 값에 의해 결정된다. 기본값은 8192바이트이다. 
일부 환경 설정 변수(예: <xref linkend="guc-shared-buffers"/>)의 의미는 <varname>block_size</varname>의 영향을 받는다. 
자세한 내용은 <xref linkend="runtime-config-resource"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-data-checksums" xreflabel="data_checksums">
<term><varname>data_checksums</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>data_checksums</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
데이터 체크섬이 이 클러스터에 대해 활성화되었는지를 알려준다. 자세한 내용은 데이터 <xref linkend="app-initdb-data-checksums"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-data-directory-mode" xreflabel="data_directory_mode">
      <term><varname>data_directory_mode</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>data_directory_mode</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        On Unix systems this parameter reports the permissions of the data
        directory defined by (<xref linkend="guc-data-directory"/>) at startup.
        (On Microsoft Windows this parameter will always display
        <literal>0700</literal>). See
        <xref linkend="app-initdb-allow-group-access"/> for more information.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-integer-datetimes" xreflabel="integer_datetimes">
<term><varname>integer_datetimes</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>integer_datetimes</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
       <para>
        Reports whether <productname>PostgreSQL</productname> was built with support for
        64-bit-integer dates and times.  As of <productname>PostgreSQL</productname> 10,
        this is always <literal>on</literal>.
       </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lc-collate" xreflabel="lc_collate">
<term><varname>lc_collate</varname> (<type>string</type>)
<indexterm>
 <primary><varname>lc_collate</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
텍스트 데이터의 정렬 로케일(locale)을 알려준다. 
자세한 내용은 <xref linkend="locale"/>을 참조 바란다. 
이 값은 데이터베이스를 생성할 때 결정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-lc-ctype" xreflabel="lc_ctype">
<term><varname>lc_ctype</varname> (<type>string</type>)
<indexterm>
 <primary><varname>lc_ctype</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
문자 분류를 결정하는 로케일(locale)을 알려준다. 자세한 내용은 <xref linkend="locale"/>을 참조 바란다. 
이 값은 데이터베이스를 생성할 때 결정된다. 대개는 <varname>lc_collate</varname>와 동일하지만 특수한 애플리케이션의 경우 다르게 설정될 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-function-args" xreflabel="max_function_args">
<term><varname>max_function_args</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_function_args</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
함수 인수의 최대 수를 알려준다. 이것은 서버 빌드 시 <literal>FUNC_MAX_ARGS</literal> 값에 의해 결정된다. 
기본값은 100개 인수이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-identifier-length" xreflabel="max_identifier_length">
<term><varname>max_identifier_length</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_identifier_length</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
최대 식별자 길이를 알려준다. 이것은 서버 빌드 시 <literal>NAMEDATALEN</literal> 값보다 하나 작게 결정된다. 
<literal>NAMEDATALEN</literal>의 기본값이 64이므로 <varname>max_identifier_length</varname> 기본값은 63바이트이며, 이것은 멀티바이트 인코딩 시 63자 미만일 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-max-index-keys" xreflabel="max_index_keys">
<term><varname>max_index_keys</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>max_index_keys</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
인덱스 키의 최대 수를 알려준다. 이것은 서버 빌드 시 <literal>INDEX_MAX_KEYS</literal> 값에 의해 결정된다. 
기본값은 32개 키이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-segment-size" xreflabel="segment_size">
<term><varname>segment_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>segment_size</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
파일 세그먼트 내에서 저장할 수 있는 블록(페이지)의 수를 알려준다. 이것은 서버 빌드 시 <literal>RELSEG_SIZE</literal> 값에 의해 결정된다. 
세그먼트 파일의 최대 크기(바이트 단위)는 <varname>block_size</varname>를 곱한 <varname>segment_size</varname>와 같으며, 기본값은 1GB이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-server-encoding" xreflabel="server_encoding">
<term><varname>server_encoding</varname> (<type>string</type>)
<indexterm>
 <primary><varname>server_encoding</varname> 환경 설정 매개 변수</primary>
</indexterm>
<indexterm><primary>character set</primary></indexterm>
</term>
<listitem>
 <para>
데이터베이스 인코딩(문자 집합)을 알려준다. 데이터베이스를 생성할 때 결정된다. 
대개, 클라이언트는 <xref linkend="guc-client-encoding"/> 값만 사용해서 연결해야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-server-version" xreflabel="server_version">
<term><varname>server_version</varname> (<type>string</type>)
<indexterm>
 <primary><varname>server_version</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버의 버전 번호를 알려준다. 이것은 서버 빌드 시 <literal>PG_VERSION</literal> 값에 의해 결정된다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-server-version-num" xreflabel="server_version_num">
<term><varname>server_version_num</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>server_version_num</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
서버의 버전 번호를 integer로 알려준다. 이것은 서버 빌드 시 <literal>PG_VERSION_NUM</literal> 값에 의해 결정된다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-ssl-library" xreflabel="ssl_library">
      <term><varname>ssl_library</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_library</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Reports the name of the SSL library that this
        <productname>PostgreSQL</productname> server was built with (even if
        SSL is not currently configured or in use on this instance), for
        example <literal>OpenSSL</literal>, or an empty string if none.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-wal-block-size" xreflabel="wal_block_size">
<term><varname>wal_block_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_block_size</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
WAL 디스크 블록의 크기를 알려준다. 이것은 서버 빌드 시 <literal>XLOG_BLCKSZ</literal> 값에 의해 결정된다. 기본값은 8192바이트이다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-wal-segment-size" xreflabel="wal_segment_size">
<term><varname>wal_segment_size</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>wal_segment_size</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
WAL 세그먼트 파일 내에서 블록(페이지)의 수를 알려준다. 
기본값은 16GM이다. 
자세한 내용은 <xref linkend="wal-configuration"/>을 참조 바란다.
 </para>
</listitem>
 </varlistentry>

</variablelist>
 </sect1>

 <sect1 id="runtime-config-custom">
<title>커스텀 옵션</title>

<para>
 이 기능은 일반적으로 <productname>PostgreSQL</productname>이 알지 못하는 매개 변수를 추가 모듈로 추가할 수 있게 한다(예: 프로시저 언어). 
 이렇게 하면 표준 방식으로 확장 모듈을 환경 설정할 수 있다.
</para>

<para>
 커스텀 옵션은 확장명 다음에 점, 다음에 적절한 매개 변수 이름의 두 부분으로 환경 설정되며, SQL의 정규화된 이름과 아주 유사하다. 
 예를 들면, <literal>plpgsql.variable_conflict</literal>와 같다.
</para>

<para>
 커스텀 옵션은 관련 확장 모듈이 로드되지 않은 프로세스에서 설정되어야 하므로, <productname>PostgreSQL</productname>은 두 부분의 매개 변수 이름에 대한 설정을 허용한다. 
 해당 변수는 플레이스 홀더로 처리되며 변수를 정의하는 모듈이 로드되기 전까지는 함수를 갖지 않는다. 
 확장 모듈이 로드된 경우 변수 정의가 추가되고, 해당 변수에 따라 플레이스 홀더 값이 변환되고, 확장명으로 시작되는데 인식되지 않는 플레이스 홀더에 대해 경고를 보낸다.
</para>
 </sect1>

 <sect1 id="runtime-config-developer">
<title>개발자 옵션</title>

<para>
 다음 매개 변수는 <productname>PostgreSQL</productname> 소스 코드에서 사용할 수 있으며 경우에 따라 심각한 데이터베이스 손상을 복구하는 데에도 도움이 된다. 
 실제 운영 중인 데이터베이스에서 이 매개 변수를 사용할 이유는 없다. 
 따라서 <filename>postgresql.conf</filename> 샘플 파일에서는 제외되었다. 
 이러한 매개 변수 다수는 어쨌든 제대로 작동하려면 특수한 소스 컴파일 플래그가 필요하다.
</para>

<variablelist>
 <varlistentry id="guc-allow-system-table-mods" xreflabel="allow_system_table_mods">
<term><varname>allow_system_table_mods</varname> (<type>boolean</type>)
<indexterm>
<primary><varname>allow_system_table_mods</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
        Allows modification of the structure of system tables as well as
        certain other risky actions on system tables.  This is otherwise not
        allowed even for superusers.  Ill-advised use of this setting can
        cause irretrievable data loss or seriously corrupt the database
        system.  Only superusers can change this setting.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-backtrace-functions" xreflabel="backtrace_functions">
      <term><varname>backtrace_functions</varname> (<type>string</type>)
      <indexterm>
        <primary><varname>backtrace_functions</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This parameter contains a comma-separated list of C function names.
        If an error is raised and the name of the internal C function where
        the error happens matches a value in the list, then a backtrace is
        written to the server log together with the error message.  This can
        be used to debug specific areas of the source code.
       </para>

       <para>
        Backtrace support is not available on all platforms, and the quality
        of the backtraces depends on compilation options.
       </para>

       <para>
        This parameter can only be set by superusers.
 </para>
</listitem>
 </varlistentry>


 <varlistentry id="guc-ignore-system-indexes" xreflabel="ignore_system_indexes">
<term><varname>ignore_system_indexes</varname> (<type>boolean</type>)
<indexterm>
<primary><varname>ignore_system_indexes</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
시스템 테이블을 읽을 때 시스템 인덱스를 무시한다(그러나, 테이블을 수정하면 인덱스는 계속 수정된다). 
이것은 손상된 시스템 인덱스를 복구할 때 유용하다. 이 매개 변수는 세션 시작 후에는 변경할 수 없다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-post-auth-delay" xreflabel="post_auth_delay">
<term><varname>post_auth_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>post_auth_delay</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
인증 절차를 수행한 후 새 서버 프로세스가 시작 된 후 이 시간 만큼의 기다렸다가 계속한다.
이것은 개발자가 디버거를 사용하여 서버 프로세스에 접속할 수 있는 기회를 제공하기 위한 것이다. 
설정값에 단위가 없으면, 초로 간주한다.
기본값은 0 이며, 이는 이 지연이 없음을 뜻한다.
이 매개 변수는 세션 시작 후에는 변경할 수 없다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-pre-auth-delay" xreflabel="pre_auth_delay">
<term><varname>pre_auth_delay</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>pre_auth_delay</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
인증 절차를 수행하기 전 새 서버 프로세스가 시작된 직후 이 시간만큼의
지연이 발생한다. 
이것은 개발자가 디버거를 사용하여 인증 오류를 추적할 수 있도록 서버 프로세스에 접속할 수 있는 기회를 제공하기 위한 것이다. 
설정값에 단위가 없으면, 초로 간주한다.
기본값은 0 이며, 이는 이 지연이 없음을 뜻한다.
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-trace-notify" xreflabel="trace_notify">
<term><varname>trace_notify</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>trace_notify</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<command>LISTEN</command> 및 <command>NOTIFY</command> 명령에 대한 대량의 디버깅 출력을 생성한다. 
이 출력을 클라이언트 또는 서버 로그에 각각 전송하려면 <xref linkend="guc-client-min-messages"/> 또는 <xref linkend="guc-log-min-messages"/>는 <literal>DEBUG1</literal>이어야 한다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-trace-recovery-messages" xreflabel="trace_recovery_messages">
<term><varname>trace_recovery_messages</varname> (<type>enum</type>)
<indexterm>
 <primary><varname>trace_recovery_messages</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
복구 관련 디버깅 출력의 로깅을 활성화한다. 그 외에는 로깅되지 않는다. 
이 매개 변수는 사용자가 <xref linkend="guc-log-min-messages"/>의 일반 설정을 오버라이드할 수 있지만, 특정 메시지에만 해당된다. 
이것은 핫 스탠바이에서 사용된다. 유효 값은 <literal>DEBUG5</literal> 및 <literal>DEBUG4</literal>,
<literal>DEBUG3</literal>, <literal>DEBUG2</literal>, <literal>DEBUG1</literal>, <literal>LOG</literal>이다.
기본적으로, <literal>LOG</literal>는 로깅 결정에 전혀 영향을 주지 않는다. 
다른 값들은 <literal>LOG</literal> 우선 순위가 있어도 해당 우선 순위보다 높은 복구 관련 디버그 메시지를 발생시킨다. 
<varname>log_min_messages</varname>의 공통 설정의 경우 이것은 서버 로그로 무조건 메시지를 전송한다. 
이 매개 변수는 <filename>postgresql.conf</filename> 파일 또는 서버 커맨드 라인에서만 설정 가능하다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry id="guc-trace-sort" xreflabel="trace_sort">
<term><varname>trace_sort</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>trace_sort</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on으로 설정된 경우 정렬 명령 중에 리소스 사용량에 대한 정보를 출력한다. 
이것은 <productname>PostgreSQL</productname>이 컴파일된 경우 <symbol>TRACE_SORT</symbol> 매크로가 정의된 경우에만 사용할 수 있다. 
(단, <symbol>TRACE_SORT</symbol>는 현재 기본적으로 정의된다.)
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>trace_locks</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>trace_locks</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on으로 설정된 경우 정렬 명령 중에 잠금 사용에 대한 정보를 출력한다. 덤프된 정보에는 잠금 명령, 
잠금 유형 및 잠금 또는 잠금 해제된 개체의 고유 식별자가 포함된다. 
이 개체에 이미 부여된 잠금 유형 및 이 개체를 기다리는 잠금 유형에 대한 비트 마스크도 포함된다. 
각 잠금 유형의 경우 부여된 잠금 및 대기 중인 잠금 수에 대한 카운트 및 총계도 덤프된다. 
로그 파일 출력에 대한 예제는 다음과 같다.
<screen>
LOG:LockAcquire: new: lock(0xb7acd844) id(24688,24696,0,0,0,1)
grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
wait(0) type(AccessShareLock)
LOG:GrantLock: lock(0xb7acd844) id(24688,24696,0,0,0,1)
grantMask(2) req(1,0,0,0,0,0,0)=1 grant(1,0,0,0,0,0,0)=1
wait(0) type(AccessShareLock)
LOG:UnGrantLock: updated: lock(0xb7acd844) id(24688,24696,0,0,0,1)
grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
wait(0) type(AccessShareLock)
LOG:CleanUpLock: deleting: lock(0xb7acd844) id(24688,24696,0,0,0,1)
grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
wait(0) type(INVALID)
</screen>
덤프되는 구조에 대한 자세한 내용은 <filename>src/include/storage/lock.h</filename>에서 찾을 수 있다.
 </para>
 <para>
이것은 <productname>PostgreSQL</productname>이 컴파일된 경우 <symbol>LOCK_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>trace_lwlocks</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>trace_lwlocks</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on으로 설정된 경우 정렬 명령 중에 가벼운 잠금(lightweight lock) 사용에 대한 정보를 출력한다. 
가벼운 잠금(lightweight lock)은 주로 공유 메모리 데이터 구조에 대한 상호 배제 액세스를 제공하기 위함이다.
 </para>
 <para>
이것은 <productname>PostgreSQL</productname>이 컴파일된 경우 <symbol>LOCK_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>trace_userlocks</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>trace_userlocks</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
on으로 설정된 경우 정렬 명령 중에 사용자 잠금(user lock) 사용에 대한 정보를 출력한다. 
보조 잠금(advisory locks)인 경우에만 출력이 <symbol>trace_locks</symbol>와 동일하다.
 </para>
 <para>
이것은 <productname>PostgreSQL</productname>이 컴파일된 경우 <symbol>LOCK_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>trace_lock_oidmin</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>trace_lock_oidmin</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
설정된 경우 이 OID 아래 테이블에 대해 잠금을 추적하지 않는다.
(시스템 테이블에 출력을 방지하려고 사용되었음)
 </para>
 <para>
이것은 <productname>PostgreSQL</productname>이 컴파일된 경우 <symbol>LOCK_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>trace_lock_table</varname> (<type>integer</type>)
<indexterm>
 <primary><varname>trace_lock_table</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
이 테이블(OID)에 대한 잠금을 무조건 추적한다.
Unconditionally trace locks on this table (OID).
 </para>
 <para>
이것은 <productname>PostgreSQL</productname>이 컴파일된 경우 <symbol>LOCK_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>debug_deadlocks</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>debug_deadlocks</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
설정된 경우 데드락 타임아웃 발생 시 현재 모든 잠금에 대한 정보를 덤프한다.
 </para>
 <para>
이것은 <productname>PostgreSQL</productname>이 컴파일된 경우 <symbol>LOCK_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

 <varlistentry>
<term><varname>log_btree_build_stats</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>log_btree_build_stats</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
설정된 경우 다양한 B-트리 명령에서 시스템 리소스 사용량 통계(메모리 및 CPU)를 로깅한다.
 </para>
 <para>
이것은 <productname>PostgreSQL</productname>이 컴파일된 경우 <symbol>BTREE_BUILD_STATS</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-wal-consistency-checking" xreflabel="wal_consistency_checking">
      <term><varname>wal_consistency_checking</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>wal_consistency_checking</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        This parameter is intended to be used to check for bugs in the WAL
        redo routines.  When enabled, full-page images of any buffers modified
        in conjunction with the WAL record are added to the record.
        If the record is subsequently replayed, the system will first apply
        each record and then test whether the buffers modified by the record
        match the stored images.  In certain cases (such as hint bits), minor
        variations are acceptable, and will be ignored.  Any unexpected
        differences will result in a fatal error, terminating recovery.
       </para>

       <para>
        The default value of this setting is the empty string, which disables
        the feature.  It can be set to <literal>all</literal> to check all
        records, or to a comma-separated list of resource managers to check
        only records originating from those resource managers.  Currently,
        the supported resource managers are <literal>heap</literal>,
        <literal>heap2</literal>, <literal>btree</literal>, <literal>hash</literal>,
        <literal>gin</literal>, <literal>gist</literal>, <literal>sequence</literal>,
        <literal>spgist</literal>, <literal>brin</literal>, and <literal>generic</literal>. Only
        superusers can change this setting.
       </para>
      </listitem>
     </varlistentry>

 <varlistentry id="guc-wal-debug" xreflabel="wal_debug">
<term><varname>wal_debug</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>wal_debug</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
설정된 경우 WAL 관련 디버깅 출력을 내보낸다. 
이것은 <productname>PostgreSQL</productname>이 컴파일된 경우 <symbol>WAL_DEBUG</symbol> 매크로가 정의된 경우에만 사용할 수 있다.
 </para>
</listitem>
 </varlistentry>

<varlistentry id="guc-ignore-checksum-failure" xreflabel="ignore_checksum_failure">
<term><varname>ignore_checksum_failure</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>ignore_checksum_failure</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
<xref linkend="app-initdb-data-checksums"/>가 활성화된 경우에만 효과가 있다.
 </para>
 <para>
읽기 중 체크섬 실패를 감지하면 <productname>PostgreSQL</productname>이 에러를 보고하고, 현재 트랜잭션을 중단한다. 
<varname>ignore_checksum_failure</varname>를 on으로 설정하면 시스템이 실패(그래도 경고는 리포트된다)를 무시하고 프로세싱을 계속한다. 
이러한 동작은 <emphasis>충돌, 충돌 전파나 숨김 또는 기타 심각한 문제를 초래한다</emphasis>. 그러나, 블록 헤더가 온전한 경우에는 이것을 사용하면 에러를 무시하고 테이블에 잔존해 있을 수 있는 미손상 튜플을 검색할 수 있다. 
블록 헤더가 손상된 경우 이 옵션이 활성화된 경우에도 에러가 보고된다. 기본값은 <literal>off</literal>이고 슈퍼유저에 의해서만 변경 가능하다.
 </para>
</listitem>
 </varlistentry>

<varlistentry id="guc-zero-damaged-pages" xreflabel="zero_damaged_pages">
<term><varname>zero_damaged_pages</varname> (<type>boolean</type>)
<indexterm>
 <primary><varname>zero_damaged_pages</varname> 환경 설정 매개 변수</primary>
</indexterm>
</term>
<listitem>
 <para>
손상된 페이지 헤더가 감지되면 <productname>PostgreSQL</productname>이 에러를 보고하고 현재 트랜잭션을 중단한다. 
<varname>zero_damaged_pages</varname>를 on으로 설정하면 시스템이 대신 경고를 보고하고, 메모리에서 손상된 페이지를 0으로 처리하고, 프로세싱을 계속한다. 이러한 작업은 손상된 페이지의 모든 행, 즉 <emphasis>데이터를 소멸시킨다</emphasis>. 
그러나, 이것을 이용하면 사용자는 에러를 무시하고 테이블에 잔존해 있을 수 있는 미손상 페이지에서 행을 검색할 수 있다. 이것은 하드웨어 또는 소프트웨어 에러에 의한 손상이 발생된 경우 데이터를 복구할 때 유용하다. 
테이블의 손상된 페이지에서 데이터를 복구하지 않기로 결정하기 전에는 이것을 on으로 설정하면 안 된다. 
0으로 처리된 페이지는 디스크에 강제로 쓰여지지 않으므로 이 매개 변수를 off로 다시 설정하기 전에 테이블 또는 인덱스를 재생하는 것이 좋다. 
기본값은 <literal>off</literal>이고 슈퍼유저에 의해서만 변경 가능하다.
 </para>
</listitem>
 </varlistentry>

     <varlistentry id="guc-ignore-invalid-pages" xreflabel="ignore_invalid_pages">
      <term><varname>ignore_invalid_pages</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ignore_invalid_pages</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        If set to <literal>off</literal> (the default), detection of
        WAL records having references to invalid pages during
        recovery causes <productname>PostgreSQL</productname> to
        raise a PANIC-level error, aborting the recovery. Setting
        <varname>ignore_invalid_pages</varname> to <literal>on</literal>
        causes the system to ignore invalid page references in WAL records
        (but still report a warning), and continue the recovery.
        This behavior may <emphasis>cause crashes, data loss,
        propagate or hide corruption, or other serious problems</emphasis>.
        However, it may allow you to get past the PANIC-level error,
        to finish the recovery, and to cause the server to start up.
        The parameter can only be set at server start. It only has effect
        during recovery or in standby mode.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-debugging-support" xreflabel="jit_debugging_support">
      <term><varname>jit_debugging_support</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_debugging_support</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        If LLVM has the required functionality, register generated functions
        with <productname>GDB</productname>.  This makes debugging easier.
        The default setting is <literal>off</literal>.
        This parameter can only be set at server start.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-dump-bitcode" xreflabel="jit_dump_bitcode">
      <term><varname>jit_dump_bitcode</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_dump_bitcode</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Writes the generated <productname>LLVM</productname> IR out to the
        file system, inside <xref linkend="guc-data-directory"/>. This is only
        useful for working on the internals of the JIT implementation.
        The default setting is <literal>off</literal>.
        This parameter can only be changed by a superuser.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-expressions" xreflabel="jit_expressions">
      <term><varname>jit_expressions</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_expressions</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Determines whether expressions are JIT compiled, when JIT compilation
        is activated (see <xref linkend="jit-decision"/>).  The default is
        <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-profiling-support" xreflabel="jit_profiling_support">
      <term><varname>jit_profiling_support</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_profiling_support</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        If LLVM has the required functionality, emit the data needed to allow
        <productname>perf</productname> to profile functions generated by JIT.
        This writes out files to <filename>$HOME/.debug/jit/</filename>; the
        user is responsible for performing cleanup when desired.
        The default setting is <literal>off</literal>.
        This parameter can only be set at server start.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-jit-tuple-deforming" xreflabel="jit_tuple_deforming">
      <term><varname>jit_tuple_deforming</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>jit_tuple_deforming</varname> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
       <para>
        Determines whether tuple deforming is JIT compiled, when JIT
        compilation is activated (see <xref linkend="jit-decision"/>).
        The default is <literal>on</literal>.
       </para>
      </listitem>
     </varlistentry>
 </variablelist>
</sect1>
<sect1 id="runtime-config-short">
 <title>단축 옵션</title>

 <para>
  편의상 일부 매개 변수에서는 한 글자로 된 명령행 옵션을 사용할
  수 있다.  이것이 <xref linkend="runtime-config-short-table"/>에 나와
  있다.  이 옵션 중 일부는 그 존재 이유에 나름의 내력이 있으며, 한 글자
  옵션이라고 해서 많이 사용해도 된다는 것을 의미하지는 않는다.
 </para>

<table id="runtime-config-short-table">
 <title>단축 옵션 목록</title>
 <tgroup cols="2">
      <colspec colname="col1" colwidth="1*"/>
      <colspec colname="col2" colwidth="2*"/>
<thead>
 <row>
<entry>단축 옵션</entry>
<entry>동등</entry>
 </row>
</thead>

<tbody>
 <row>
<entry><option>-B <replaceable>x</replaceable></option></entry>
<entry><literal>shared_buffers = <replaceable>x</replaceable></literal></entry>
 </row>
 <row>
<entry><option>-d <replaceable>x</replaceable></option></entry>
<entry><literal>log_min_messages = DEBUG<replaceable>x</replaceable></literal></entry>
 </row>
 <row>
<entry><option>-e</option></entry>
<entry><literal>datestyle = euro</literal></entry>
 </row>
 <row>
<entry>
<option>-fb</option>, <option>-fh</option>, <option>-fi</option>,
<option>-fm</option>, <option>-fn</option>, <option>-fo</option>,
<option>-fs</option>, <option>-ft</option>
 </entry>
 <entry>
<literal>enable_bitmapscan = off</literal>,
<literal>enable_hashjoin = off</literal>,
<literal>enable_indexscan = off</literal>,
<literal>enable_mergejoin = off</literal>,
<literal>enable_nestloop = off</literal>,
<literal>enable_indexonlyscan = off</literal>,
<literal>enable_seqscan = off</literal>,
<literal>enable_tidscan = off</literal>
 </entry>
 </row>
 <row>
<entry><option>-F</option></entry>
<entry><literal>fsync = off</literal></entry>
 </row>
 <row>
<entry><option>-h <replaceable>x</replaceable></option></entry>
<entry><literal>listen_addresses = <replaceable>x</replaceable></literal></entry>
 </row>
 <row>
<entry><option>-i</option></entry>
<entry><literal>listen_addresses = '*'</literal></entry>
 </row>
 <row>
<entry><option>-k <replaceable>x</replaceable></option></entry>
<entry><literal>unix_socket_directories = <replaceable>x</replaceable></literal></entry>
 </row>
 <row>
<entry><option>-l</option></entry>
<entry><literal>ssl = on</literal></entry>
 </row>
 <row>
<entry><option>-N <replaceable>x</replaceable></option></entry>
<entry><literal>max_connections = <replaceable>x</replaceable></literal></entry>
 </row>
 <row>
<entry><option>-O</option></entry>
<entry><literal>allow_system_table_mods = on</literal></entry>
 </row>
 <row>
<entry><option>-p <replaceable>x</replaceable></option></entry>
<entry><literal>port = <replaceable>x</replaceable></literal></entry>
 </row>
 <row>
<entry><option>-P</option></entry>
<entry><literal>ignore_system_indexes = on</literal></entry>
 </row>
 <row>
<entry><option>-s</option></entry>
<entry><literal>log_statement_stats = on</literal></entry>
 </row>
 <row>
<entry><option>-S <replaceable>x</replaceable></option></entry>
<entry><literal>work_mem = <replaceable>x</replaceable></literal></entry>
 </row>
 <row>
<entry><option>-tpa</option>, <option>-tpl</option>, <option>-te</option></entry>
<entry><literal>log_parser_stats = on</literal>,
<literal>log_planner_stats = on</literal>,
<literal>log_executor_stats = on</literal></entry>
 </row>
 <row>
<entry><option>-W <replaceable>x</replaceable></option></entry>
<entry><literal>post_auth_delay = <replaceable>x</replaceable></literal></entry>
 </row>
</tbody>
 </tgroup>
</table>

</sect1>
</chapter>
