<!-- doc/src/sgml/xoper.sgml -->

 <sect1 id="xoper">
  <title>사용자 정의 연산자</title>

  <indexterm zone="xoper">
   <primary>연산자</primary>
   <secondary>사용자 정의</secondary>
  </indexterm>

  <para>
   모든 연산자는 해당 작업을 하는 함수를 호출 하는 <quote>간편 구문,
   syntactic sugar</quote>이다; 즉 새로운 어떤 연산자를 
   만들고자 한다면, 먼저 그 일을 하는 함수부터 만들어야 한다.  하지만,
   하나의 연산자가 그저 구문을 간편하게 하는 역할만 
   <emphasis>하지는 않는다</emphasis>.  쿼리 실행 계획기는 그 연산자를 
   보고 최적화된 실행 계획을 짜기 때문이다.  이것에 대한 설명은
   다음 장에서 추가로 설명한다.
  </para>

  <para>
   <productname>PostgreSQL</productname>에서는 왼쪽, 오른쪽 단항 연산자와
   이항 연산자를 지원한다.
   연산자는 오버로드될 수 있다;
   <indexterm><primary>오버로딩</primary><secondary>연산자</secondary></indexterm>
   같은 연산자인데, 항 개수가 다르거나, 자료형이 다른 여러 연산자가 
   함께 있을 수 있다.  쿼리가 실행 될 때, 그 연산자와 관계된 항과 
   자료형에 따라서 해당 연산자가 사용된다.
  </para>

  <para>
   아래는 두 복소수를 서로 더하는 연산자를 만드는 예제다.  여기서는
   이미 <type>complex</type> 자료형이 만들어져 있다고 간주했다(<xref
   linkend="xtypes"/> 참조).  먼저 그 연산을 할 함수를 만들고, 
   다음 연산자를 만든다:

<programlisting>
CREATE FUNCTION complex_add(complex, complex)
    RETURNS complex
    AS '<replaceable>filename</replaceable>', 'complex_add'
    LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR + (
    leftarg = complex,
    rightarg = complex,
    function = complex_add,
    commutator = +
);
</programlisting>
  </para>

  <para>
   만들어진 연산자는 다음과 같이 사용할 수 있다:

<screen>
SELECT (a + b) AS c FROM test_complex;

        c
-----------------
 (5.2,6.05)
 (133.42,144.95)
</screen>
  </para>

  <para>
   윗 예제는 이항 연산자를 만들고 사용한 것이다.  단항
   연산자를 만들려면 필요 없는 각 항을 생략하면
   된다.  왼쪽 단항이면 <literal>leftarg</literal> 인자를,
   오른쪽 단항이면 <literal>rightarg</literal> 인자를
   생략한다.  <literal>function</literal> 절과 인자를 지정하는
   절이 <command>CREATE OPERATOR</command> 명령에서 필요한
   기본 옵션이다.  윗 예제에 있는 <literal>commutator</literal> 절은
   쿼리 최적화기가 최적의 실행 계획을 만드는데 사용된다.  이런
   <literal>commutator</literal>와 같은 쿼리 최적화 여러 옵션들에
   대해서는 다음 장에서 다룬다.
  </para>
 </sect1>

  <sect1 id="xoper-optimization">
   <title>연산자 최적화 정보</title>

  <indexterm zone="xoper-optimization">
   <primary>optimization information</primary>
   <secondary>for operators</secondary>
  </indexterm>

   <para>
    <productname>PostgreSQL</productname>에서 사용하는 
    연산자는 자신이 어떻게 동작하는지에 대한 여러 정보를 
    서버에서 제공하는 여러 옵션을 포함하여 정의된다.  이 옵션
    정의는 쿼리 처리 속도를 빠르게 하기 때문에, 적절히
    잘 사용해야 한다!  잘못된 옵션 정의는 오히려 쿼리 처리 
    속도를 더 늦게 만들 수도 있고, 의도하지 않은 출력 결과가
    나올 수도 있고, 그 외 다른 문제점을 일으킬 수도 있다.
    물론 아래에서 설명하는 옵션들을 정확히 모르면, 아애 정의하지
    않을 수도 있다; 단지 더 빠르게 할 수 있는 것을 못할 뿐이다.
   </para>

   <para>
    아래에서 설명하고 있는 최적화 옵션들 외에도 
    향후 <productname>PostgreSQL</productname> 버전에서
    보다 많은 최적화 옵션들이 추가 되어야 할 것이다.
    여기서 소개하고 있는 옵션들은
    &version; 버전 기준에서 사용 가능한 것들이다.
   </para>

   <para>
    It is also possible to attach a planner support function to the function
    that underlies an operator, providing another way of telling the system
    about the behavior of the operator.
    See <xref linkend="xfunc-optimization"/> for more information.
   </para>

   <sect2>
    <title><literal>COMMUTATOR</literal></title>

    <para>
     <literal>COMMUTATOR</literal> 절에 (제공한다면) 해당 연산자에 대한
     교환 연산자 이름을 지정한다.  입력된 x, y 값에 대한
     (x A y) 식과 (y B x) 식의 결과값이 같다면, A 연산자를 
     B 연산자의 교환 연산자라 한다.  물론 A 연산자의 교환 연산자는
     B이다.  예를 들어, 특정 자료형에서
     <literal>&lt;</literal>, <literal>&gt;</literal> 두 연산자는 서로
     교환 연산자이며, <literal>+</literal> 연산자는 자기 스스로가 교환
     연산자이지만, <literal>-</literal> 연산자는 자기 스스로가 
     교환 연산자가 되지 못하기도 한다.
    </para>

    <para>
     교환 연산자는 왼쪽, 오른쪽 자료형이 서로 같아야 한다.  그래서,
     <productname>PostgreSQL</productname>에서는 
     <literal>COMMUTATOR</literal> 절에서 단지 그 교환 연산자의 이름만
     정의한다.  (즉, 해당 자료형을 사용하는 연산자가 먼저 
     정의 되어 있어야 한다. - 옮긴이)
    </para>

    <para>
     교환 연산자 정의는 인덱스 사용과 조인 구문에서 아주 중요한 
     영향을 미친다.  왜냐하면, 이 정의가 없다면, 쿼리 최적화기의 
     <quote>항 바꾸기</quote> 작업을 건너띄기 때문이다.  예를 들어,
     WHERE절에 <literal>tab1.x = tab2.y</literal> 형태의 
     구문이 있고, <literal>tab1.x</literal>, <literal>tab2.y</literal>
     둘 다 사용자 정의 자료형이고, <literal>tab2.y</literal> 칼럼에 대해서
     인덱스를 만들어 두었다.  이 경우, 최적화기는 이 구문에서
     인덱스를 사용하지 않는다.  인덱스 검색 기능은 우선적으로
     왼쪽 칼럼에 대해서 인덱스가 있는가를 조사하기 때문이다. 
     <productname>PostgreSQL</productname>에서는 
     그냥 막 항을 서로 바꾸지 <emphasis>않는다</emphasis> &mdash;
     즉, 사용자가 그 자료형에 대한 <literal>=</literal> 연산자를 만들 때,
     각 항이 서로 바뀌어도 결과가 같은가를 정의하는 
     교환 연산자 정의도 바르게 해야 한다.
    </para>

    <para>
     교환 연산자가 만드려고 하는 연산자와 같은 경우라면, 
     그냥 그 연산자로 교환 연산자 정의를 하면 되지만,
     이 두 개의 연산자가 
     서로 쌍인 경우는 약간의 꼼수가 필요하다: 왜냐하면, 
     교환 연산자가 이미 만들어져 있어야 하는데, 그 연산자의 
     교환 연산자를 아직 만들지 않았기 때문이다.
     다음은 이 문제를 푸는 두 가지 방법이다:

     <itemizedlist>
      <listitem>
       <para>
        첫번째 방법은 일단 하나의 연산자에서 <literal>COMMUTATOR</literal>절
        을 빼고 만들고, 다음 연산자에서는 앞에서 만든 연산자를
        교환 연산자로 지정하여 만든다.  <productname>PostgreSQL</productname>에서는
        교환 연산자는 한 쌍을 가지기 때문에, 두번째 만들어진 연산자에서
        첫번째 만들어진 연산자를 교환 연산자로 지정했다면, 자동으로
        첫번째 연산자의 교환 연산자로 두번째 연산자를 다시 지정한다.
       </para>
      </listitem>

      <listitem>
       <para>
        다른 방법은 보다 직설적으로 그냥 두 연산자 모두 <literal>COMMUTATOR</literal>절을
        포함해서 만든다.  이 경우 <productname>PostgreSQL</productname>에서는 
        첫번째 연산자를 만들 때 지정한 교환 연산자가 없는 것을 알고, 
        그냥 시스템 카탈로그에 그 정보만 기록해 두고 연산자를 만든다.  교환 연산자는
        만드려고 하는 연산자에서 사용하는 양쪽 자료형이 서로 같기 때문에,
        임의의 가상 연산자를 만들 수 있다.  그 다음 두번째 연산자를 정상적으로 만들고, 
        두번째 연산자가 만들어지면서 교환 연산자 정의 쌍이 마무리 된다.  
        즉, 두번째 연산자가 만들어지기 전에 첫번째 연산자를 사용하면 오류를 낸다.
       </para>
      </listitem>
     </itemizedlist>
    </para>
   </sect2>

   <sect2>
    <title><literal>NEGATOR</literal></title>

    <para>
     <literal>NEGATOR</literal>절에 (제공한다면) 해당 연산자의 부정 연산자 이름을
     지정한다.  입력된 x, y 값에 대해서 (x A y) 식의 결과값(불리언 자료형)과
     NOT (x B y) 식의 결과값이 같을 때, A 연산자를 B 연산자의 부정 연산자라고
     한다.  물론 B 연산자는 A 연산자의 부정 연산자이기도 하다.
     예를 들어, <literal>&lt;</literal> 연산자와 <literal>&gt;=</literal> 연산자는 
     대부분 자료형에서 부정 연산자 쌍이다.
     자기 스스로가 부정 연산자인 경우는 없다.
    </para>

   <para>
    교환 연산자와 달리, 단항 연산자의 쌍이 서로의 부정 연산자가 되기도 한다.
    이 말은 (A x) 결과값이 NOT (B x)의 결과값과 같음을 의미한다. 
    또한 오른쪽 단항 연산자에서도 마찬가지다.
   </para>

   <para>
    한 연산자의 부정 연산자에서 사용하는 자료형도
    그 연산자가 사용하는 자료형과 같아야 한다.  그래서,
    <literal>COMMUTATOR</literal>절과 마찬가지로 <literal>NEGATOR</literal>절에서도
    연산자 이름만 정의하면 된다.
   </para>

   <para>
    부정 연산자는 최적화기가 <literal>NOT (x = y)</literal> 이런 구문을
    <literal>x &lt;&gt; y</literal> 구문으로 단순화하는데 유용하게 사용된다.
    <literal>NOT</literal> 연산은 다른 재구성 결과로 추가될 수 있기 때문에,
    이런 단순화 작업은 생각보다 빈번하게 일어난다.
   </para>

   <para>
    한 쌍의 부정 연산자 정의에 있어 충돌 문제도 위에서 설명한
    교환 연산자 문제와 같이 처리하면 된다.
   </para>

  </sect2>

  <sect2>
   <title><literal>RESTRICT</literal></title>

   <para>
    <literal>RESTRICT</literal>절에는 (제공한다면) 해당 연산자의 제한 선택 추정 함수
    이름을 지정한다.  (이 이름이 연산자 이름이 아니라, 함수 이름임을 주의해야
    한다)  <literal>RESTRICT</literal>절은 연산자가 이항 연산자이고 그 결과가 
    <type>boolean</type>형인 경우에만 효과가 있다.  이 제한 선택 추정이란 
    <literal>WHERE</literal>절에서 다음과 같은 형태로 연산자를 사용할 경우
    해당 테이블에서 추출될 로우수를 추정하는 것을 말한다:
<programlisting>
칼럼 연산자 상수
</programlisting>
    여기서 연산자는 지금 이야기하는 해당 연산자이며, 상수는 특정 상수다.
    이 함수는
    최적화기가 이 <literal>WHERE</literal>절에서 지정한 조건에 맞는 
    로우수를 예측하는데 도움을 준다. (물론 위와 같은 식에서
    왼쪽 항에 상수가 올 경우는 상황이 복잡해진다. 하지만, 앞 
    <literal>COMMUTATOR</literal>절에서 지정한 교환 연산자를 통해서 
    그 위치를 서로 바꾼 다음 처리할 것이다.)
   </para>

   <para>
    새로운 제한 선택 추정 함수를 만드는 방법에 대해서는 이 장의 범위를
    벗어나지만, 대부분의 사용자 정의 연산자에서 쓸 수 있는 시스템
    표준 추정 함수들을 미리 만들어 두었다.  다음은 이 함수들이다:
    <simplelist>
     <member><literal>=</literal> 연산자에서는 <function>eqsel</function></member>
     <member><literal>&lt;&gt;</literal> 연산자에서는 <function>neqsel</function></member>
     <member><literal>&lt;</literal> 연산자에서는 <function>scalarltsel</function></member>
     <member><literal>&lt;=</literal> 연산자에서는 <function>scalarlesel</function></member>
     <member><literal>&gt;</literal> 연산자에서는 <function>scalargtsel</function></member>
     <member><literal>&gt;=</literal> 연산자에서는 <function>scalargesel</function></member>
    </simplelist>
   </para>

   <para>
    실 결과가 정말 같은지 다른지에 관계 없이,
    아주 많거나, 아주 적은 조건 만족 결과가 예상되는 
    <function>eqsel</function>, <function>neqsel</function> 
    함수 사용은 의미가 없다고 판단하여 종종 사용하지 않을 수도 있다.
    예를 들어, 대략 같다를 처리하는 도형 연산자인 경우
    해당 테이블에서 일치하는 자료가 적을 것으로 간주하고, 
    그 연산자의 제한 선택 추정 함수로 <function>eqsel</function> 함수를 지정한다.
   </para>

   <para>
    You can use <function>scalarltsel</function>, <function>scalarlesel</function>,
    <function>scalargtsel</function> and <function>scalargesel</function> for comparisons on
    data types that have some sensible means of being converted into numeric
    scalars for range comparisons.  If possible, add the data type to those
    understood by the function <function>convert_to_scalar()</function> in
    <filename>src/backend/utils/adt/selfuncs.c</filename>.
    (향후, 이 함수는 <classname>pg_type</classname> 시스템 카탈로그의 
    한 칼럼에 일대일 대응되는 함수들로 대체될 것이다. 아직은 아님)
    물론 이런 조건에 맞지 않아도 최적화기 쪽으로 참고 정보를 주겠지만,
    좋은 실행 계획을 짤 근거 자료가 되지는 못한다.
   </para>

   <para>
    추가로 도형 자료형에 대한 제한 선택 추정 함수로는 
    <filename>src/backend/utils/adt/geo_selfuncs.c</filename> 소스 코드에
    다음과 같이 있다: <function>areasel</function>,
    <function>positionsel</function>, <function>contsel</function>.
    이들은 기본 함수로 작성되었지만, 충분히 쓸만한 것도 있고, 
    개선 해야 할 것도 있다.
   </para>
   </sect2>

   <sect2>
    <title><literal>JOIN</literal></title>

    <para>
     <literal>JOIN</literal>절에서는 (제공한다면) 해당 연산자의
     조인 선택 추정 함수 이름을 지정한다.  (이 이름은
     연산자 이름이 아니라, 함수 이름임을 주의해야 한다.)
     <literal>JOIN</literal>절은 연산자가 이항 연산자이고 그 결과가
     <type>boolean</type>형인 경우에만 효과가 있다. 이 조인 선택 추정이란
     <literal>WHERE</literal>절에서 다음과 같은 형태로 연산자를 사용할 경우
     그 대상 로우수를 추정하는 것을 말한다:
<programlisting>
table1.column1 연산자 table2.column2
</programlisting>
     <literal>RESTRICT</literal>절과 마찬가지로,
     이 지정은 조인 작업을 소요되는 비용을 추정해서 
     최적화기가 최적의 실행계획을 짜도록 도움을 준다.
    </para>

    <para>
     앞에서와 같이 이 함수를 만드는 방법에 대해서는 여기서 소개하지는 않고,
     단지 미리 만들어진 표준 추정 함수를 소개한다:
     <simplelist>
      <member><literal>=</literal> 연산자에서는 <function>eqjoinsel</function></member>
      <member><literal>&lt;&gt;</literal> 연산자에서는 <function>neqjoinsel</function></member>
      <member><function>scalarltjoinsel</function> for <literal>&lt;</literal></member>
      <member><function>scalarlejoinsel</function> for <literal>&lt;=</literal></member>
      <member><function>scalargtjoinsel</function> for <literal>&gt;</literal></member>
      <member><function>scalargejoinsel</function> for <literal>&gt;=</literal></member>
      <member>2D 영역 기반 비교 연산에서는 <function>areajoinsel</function></member>
      <member>2D 위치 기반 비교 연산에서는 <function>positionjoinsel</function></member>
      <member>2D 포함 기반 비교 연산에서는 <function>contjoinsel</function></member>
     </simplelist>
    </para>
   </sect2>

   <sect2>
    <title><literal>HASHES</literal></title>

    <para>
     <literal>HASHES</literal>절에서는 (제공한다면) 해당 연산자를 사용하는
     부분에서 해시 조인을 사용할 수 있도록 한다.  이 지정은 그 연산자가
     이항 연산자이며, 반환값이 <literal>boolean</literal>형이고,
     각 항의 자료형이 서로 같거나, 같은 종류의 자료형이어야 작동한다.
    </para>

    <para>
     해시 조인의 기본 개념은 조인 연산자 기준으로 양쪽 항의 그 값에 대한
     해시값이 같은가를 조사하는 것이다.  이 두 값이 서로 다른 해시 버켓에
     있다면, 그들은 처음부터 비교 대상에서 제외되며, 암묵적으로
     서로 다른 값으로 판단해서 연산 결과값을 false로 반환한다.  따라서
     두 값이 같은가를 조사하는 연산자가 아닌 경우는 이
     <literal>HASHES</literal> 지정은 아무런 의미가 없다.
     보통 이 기능은 양쪽 항 자료형이 같은 경우에 지정하는 것이 일반적이다.
     반면에, 서로 다른 자료형일지라도 해시 함수가 그 값에 대한 해시값을
     같게 만들도록 설계할 수도 있어, 이런 경우라면, 이 기능을 사용할 수 
     있다.  예를 들어, 정수 자료형에 대해서 그 길이가 달라도 그 값이
     같다면, 같은 해시값을 사용한다.
    </para>

    <para>
     <literal>HASHES</literal> 기능을 사용하려면, 먼저 그 해당 연산자가
     해시 인덱스 연산자 가족의 일원이어야 한다.  연산자를 만들
     때, 미리 이 연산자를 위한 연산자 가족이 아직 구성되지 않았기 때문에
     이런 조건에 제한 없이 일단 만들 수 있다.  하지만, 이 연산자를 통해
     해시 조인 작업을 할 경우 해당 연산자 가족이 없으면 실시간 오류를 
     낸다.  해당 자료형에 대한 해시 함수를 찾기 위해 연산자 가족 정보가
     필요하기 때문이다.  물론 연산자 가족을 만들려면, 그 자료형에 대한
     해시 함수를 먼저 만들어야 할 것이다.
    </para>

    <para>
     해시 함수의 반환값이 기계에 따라 다를 수 있어,
     해시 함수를 준비할 때 주의할 필요가 있다.
     예를 들어,  사용할 자료형이 구조체이고, 이 안에 의미 없는 
     비트들이 채워진 경우, <function>hash_any</function> 함수를 사용해서
     해시값을 구하면 위험하다.  (함수와 연산자를 만들 때,
     사용하지 않는 비트는 항상 0으로 처리하도록 작성하는 것이 안전하다.)
     또 다른 예로, -0 값과, +0 값이 서로 다른 것으로 처리하는
     <acronym>IEEE</acronym> 부동소수 표준 처리에 대한
     기계별 차이가 있을 수 있다.  
     이런 경우를 대비해서 -0 값은 해시값을 구하기 전에 미리 +0 으로 
     바꾸는 작업이 필요하다.
    </para>

    <para>
     해시 조인이 가능한 연산자는 교환 연산자를 해당 연산자 가족에
     포함 시켜야 하며, 연산자를 만들 때 그것을 지정해야 한다(
     교환 연산자는 연산 하는 두 자료형이 같은 경우는 그 연산자 자신이
     될 것이고, 서로 다르다면, 그에 상응하는 또 다른 연산자일 것이다).
     교환 연산자를 지정하지 않으면, 실행 계획기에서 오류를 낸다.   또한,
     (반드시 필요하지는 않지만)  해시 연산자 가족에 여러 자료형을 지원하는
     그에 상응하는 다른 연산자들도 모두 포함시켜 놓는 것은 
     좋은 방법이다. 이렇게 함으로 최적화 작업이 더 좋아질 것이다.
    </para>

    <note>
    <para>
     해시 조인이 가능한 연산자에 사용할 함수는 반드시 immutable 이거나
     stable 함수여야 한다.  volatile 함수면 해시 조인 자체를
     시도하지 않는다.
    </para>
    </note>

    <note>
    <para>
     해시 조인이 가능한 연산자에 사용할 함수가 strict 인 경우,
     입력값이 null일 지라도, 그 함수의 반환값은 true 또는
     false 여야만 한다.
     이렇게 하지 않으면,  <literal>IN</literal> 동작의 해시 최적화가 
     잘못된 결과를 만든다.
     (특히, strict 함수는 입력값이 null 인 경우 무조건 null을 
     반환하기 때문에, 입력값으로 null이 오는 경우 default 처리를 하고, 
     함수 내용에서 그 default 값에 대한 예외처리를 하는 것이 안전하다.)
    </para>
    </note>

   </sect2>

   <sect2>
    <title><literal>MERGES</literal></title>

    <para>
     <literal>MERGES</literal>절에서는 (제공한다면) 해당 연산자를 사용하는
     부분에서 머지 조인을 사용할 수 있도록 한다.  이 지정은 그 연산자가
     이항 연산자이며, 반환값이 <literal>boolean</literal>형이고,
     각 항의 자료형이 서로 같거나, 같은 종류의 자료형이어야 작동한다.
    </para>

    <para>
     머지 조인의 기본 개념은 조인할 칼럼의 양쪽 자료를 각각 정렬해서, 
     차례로 그 값이 같은지 비교하는 것이다.  그래서, 먼저 그 자료가
     정렬될 수 있어야 하며, 양쪽 자료 모두 같은 정렬 기준으로 
     <quote>같은 장소</quote>에 같은 자료가 있어야 이들이 서로 같다고
     간주할 수 있다.  하지만, 이 같은 장소는 논리적인 호환성을 
     뜻하기도 한다.  예를 들어 <type>smallint</type> 자료형과
     <type>integer</type> 자료형의 머지 조인도 가능하다.  그래서, 
     양쪽 자료형에 대해서 논리적으로 같은 위치에 있도록 정렬하는 
     작업만 보장되면 된다.
    </para>

    <para>
     <literal>MERGES</literal> 기능을 사용하려면, 이 연산자가 
     <literal>btree</literal> 인덱스 연산자 가족의 일원이어야 한다.
     하지만, 연산자를 만들 때, 그 참조하는 연산자 가족을 
     아직 안 만들었을 수도 있기 때문에, 일단 연산자를 
     먼저 만들 수도 있다.
     하지만 이 연산자가 연산자 가족으로 포함되어 있지 않다면,
     머지 조인을 사용하지 못한다.  <literal>MERGES</literal> 옵션은
     실행계획기에게 사용할 연산자 가족을 찾기위한 힌트를 제공하는
     것이다.
    </para>

    <para>
     머지 조인이 가능한 연산자를 만들 때는 반드시
     교환 연산자도 함께 지정해야 한다. (두 자료형이 같은 경우는
     자기 자신이면 되고, 서로 다른 자료형이라면, 같은 역할을 
     하는 연산자를 지정한다.) 이 연산자 또한 같은 연산자 가족 
     구성원이여야 한다.
     이렇게 만들지 않으면, 실행 계획기가 이 연산자를 사용할 때
     오류를 낸다.  또한,
     (반드시 필요하지는 않지만)  <literal>btree</literal> 연산자 가족에
     여러 자료형을 지원하는
     그에 상응하는 다른 연산자들도 모두 포함시켜 놓는 것은
     좋은 방법이다. 이렇게 함으로 최적화 작업이 더 좋아질 것이다.
    </para>

    <note>
    <para>
     머지 조인이 가능한 연산자에 사용할 함수는 반드시 immutable 이거나
     stable 함수여야 한다.  volatile 함수면 머지 조인 자체를
     시도하지 않는다.
    </para>
    </note>
   </sect2>
  </sect1>
