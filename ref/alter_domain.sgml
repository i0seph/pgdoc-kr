<!--
doc/src/sgml/ref/alter_domain.sgml
PostgreSQL documentation
-->

<refentry id="sql-alterdomain">
 <indexterm zone="sql-alterdomain">
  <primary>ALTER DOMAIN</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>ALTER DOMAIN</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER DOMAIN</refname>
  <refpurpose>도메인 정의 바꾸기</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
ALTER DOMAIN <replaceable class="parameter">이름</replaceable>
    { SET DEFAULT <replaceable class="parameter">표현식</replaceable> | DROP DEFAULT }
ALTER DOMAIN <replaceable class="parameter">이름</replaceable>
    { SET | DROP } NOT NULL
ALTER DOMAIN <replaceable class="parameter">이름</replaceable>
    ADD <replaceable class="parameter">도메인_제약조건</replaceable> [ NOT VALID ]
ALTER DOMAIN <replaceable class="parameter">이름</replaceable>
    DROP CONSTRAINT [ IF EXISTS ] <replaceable class="parameter">제약조건</replaceable> [ RESTRICT | CASCADE ]
ALTER DOMAIN <replaceable class="parameter">이름</replaceable>
     RENAME CONSTRAINT <replaceable class="parameter">제약조건</replaceable> TO <replaceable class="parameter">새제약조건</replaceable>
ALTER DOMAIN <replaceable class="parameter">이름</replaceable>
    VALIDATE CONSTRAINT <replaceable class="parameter">제약조건</replaceable>
ALTER DOMAIN <replaceable class="parameter">이름</replaceable>
    OWNER TO { <replaceable class="parameter">새소유주</replaceable> | CURRENT_USER | SESSION_USER }
ALTER DOMAIN <replaceable class="parameter">이름</replaceable>
    RENAME TO <replaceable class="parameter">새이름</replaceable>
ALTER DOMAIN <replaceable class="parameter">이름</replaceable>
    SET SCHEMA <replaceable class="parameter">새스키마</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>설명</title>

  <para>
   <command>ALTER DOMAIN</command> 명령은 도메인 정의를 바꾼다.
   다음과 같은 여러 구문이 있다:
  </para>

  <variablelist>
   <varlistentry>
    <term><literal>SET</literal>/<literal>DROP DEFAULT</literal></term>
    <listitem>
     <para>
      도메인 기본값 지정 또는 삭제.  이 값은 
      <command>INSERT</command> 명령에서만 적용됨을 기억해야 한다;
      이미 해당 도멘으로 저장된 자료에 대해서는 아무런 영향을 끼치지 않는다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET</literal>/<literal>DROP NOT NULL</literal></term>
    <listitem>
     <para>
      도메인 NULL 값 허용 여부 지정.
      해당 도메인이 NULL 값을 허용하지 않고자 할 때,
      <literal>SET NOT NULL</literal> 구문으로 지정한다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ADD <replaceable class="parameter">도메인_제약조건</replaceable> [ NOT VALID ]</literal></term>
    <listitem>
     <para>
      <xref linkend="sql-createdomain"/> 명령에서 사용하는 문법과 같은 형태로
      해당 도메인에 새 제약 조건을 추가한다.
      이렇게 하나의 제약 조건이 추가되면, 그 도메인을 사용하는 모든 칼럼을
      대상으로 그 제약 조건에 유효한 값이다 모두 확인한다.  이 유효성
      검사 과정을 생략하려면, <literal>NOT VALID</literal> 옵션을 사용한다;
      이렇게 추가한 제약 조건은 나중에,
      <command>ALTER DOMAIN ... VALIDATE CONSTRAINT</command> 명령으로
      유효성을 검사 할 수 있다.
      이 추가 작업 뒤에 발생하는 insert, update 작업에서는
      이 제약 조건이 <literal>NOT VALID</literal> 옵션을 사용해서 
      만들었다고 하더라도 유효성 검사를 항상 한다. 
      <literal>NOT VALID</literal> 옵션은 <literal>CHECK</literal> 제약 조건에서만
      제 역할을 한다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DROP CONSTRAINT [ IF EXISTS ]</literal></term>
    <listitem>
     <para>
      해당 도메인에 지정된 제약 조건을 뺀다.
      <literal>IF EXISTS</literal> 옵션을 사용하면,
      해당 제약 조건이 없더라도 오류를 내지 않는다.  이때는 알림 
      메시지만 보여준다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RENAME CONSTRAINT</literal></term>
    <listitem>
     <para>
      제약 조건 이름을 바꾼다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>VALIDATE CONSTRAINT</literal></term>
    <listitem>
     <para>
      <literal>NOT VALID</literal> 옵션으로 만든 제약 조건에 대해서,
      실재 모든 자료를 대상으로 그 유효성 검사를 한다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OWNER</literal></term>
    <listitem>
     <para>
      해당 도메인의 소유주를 바꾼다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RENAME</literal></term>
    <listitem>
     <para>
      해당 도메인의 이름을 바꾼다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>SET SCHEMA</literal></term>
    <listitem>
     <para>
      해당 스키마를 바꾼다.  도메인에 관련된 모든 제약조건도
      함께 새 스키마로 바뀐다.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   <command>ALTER DOMAIN</command> 명령은 해당 도메인 소유주만 사용할 수 있다.
   스키마를 바꾸는 경우, 소유주는 새 스키마에 대해서
   <literal>CREATE</literal> 권한이 있어야 한다.
   소유주를 바꾸는 경우, 기존 소유주는 새 소유주의 소속원이어야 하며, 
   새 소유주는 해당 도메인의 스키마에 대해 <literal>CREATE</literal>
   권한이 있어야 한다.  (새 소유주가 그 도메인을 지우거나, 
   새로 만들 수 있게 하기 위함이다.  슈퍼유주는 이런 제약 사항을 무시하고
   작업 할 수 있다.)
  </para>
 </refsect1>

 <refsect1>
  <title>매개 변수</title>

   <para>
    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">이름</replaceable></term>
      <listitem>
       <para>
        작업 대상 도메인 이름(스키마 포함).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">도메인_제약조건</replaceable></term>
      <listitem>
       <para>
        새 도메인 제약 조건.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">제약조건</replaceable></term>
      <listitem>
       <para>
        작업할 제약 조건 이름.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NOT VALID</literal></term>
      <listitem>
       <para>
        기존 자료에 대한 제약 조건 유효성 검사를 하지 않음.
       </para>
      </listitem>
     </varlistentry>


     <varlistentry>
      <term><literal>CASCADE</literal></term>
      <listitem>
       <para>
        해당 제약 조건을 지울 때, 그 제약 조건을 사용하는 
        모든 개체들도 함께 삭제한다(<xref linkend="ddl-depend"/> 참조).
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>RESTRICT</literal></term>
      <listitem>
       <para>
        해당 제약 조건을 지울 때, 그 제약 조건을 사용하는
        개체가 하나라도 있으면, 지우지 않는다.  이것은 기본 기능이다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">새이름</replaceable></term>
      <listitem>
       <para>
        바뀔 새 도메인 이름.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">새제약조건</replaceable></term>
      <listitem>
       <para>
        바뀔 새 제약조건 이름.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">새소유주</replaceable></term>
      <listitem>
       <para>
        해당 도메인의 바뀔 새 소유주 이름.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">새스키마</replaceable></term>
      <listitem>
       <para>
        해당 도메인의 바뀔 새 스키마 이름.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>
  </refsect1>

 <refsect1>
  <title>참고</title>

  <para>
   Although <command>ALTER DOMAIN ADD CONSTRAINT</command> attempts to verify
   that existing stored data satisfies the new constraint, this check is not
   bulletproof, because the command cannot <quote>see</quote> table rows that
   are newly inserted or updated and not yet committed.  If there is a hazard
   that concurrent operations might insert bad data, the way to proceed is to
   add the constraint using the <literal>NOT VALID</literal> option, commit
   that command, wait until all transactions started before that commit have
   finished, and then issue <command>ALTER DOMAIN VALIDATE
   CONSTRAINT</command> to search for data violating the constraint.  This
   method is reliable because once the constraint is committed, all new
   transactions are guaranteed to enforce it against new values of the domain
   type.
  </para>

  <para>
   현재, <command>ALTER DOMAIN ADD CONSTRAINT</command>, <command>ALTER
   DOMAIN VALIDATE CONSTRAINT</command>, <command>ALTER DOMAIN SET NOT NULL</command>
   명령은 그 도메인 구성이 복합 자료형인 경우 오류를 낸다.
   이런 중첩된 값들에서 사용되는 새 제약조건 검사는 
   앞으로 개선 되어야 하는 기능이다.
  </para>

 </refsect1>

 <refsect1>
  <title>예제</title>

  <para>
   한 도메인에 <literal>NOT NULL</literal> 제약 조건 추가하는 경우:
<programlisting>
ALTER DOMAIN zipcode SET NOT NULL;
</programlisting>
   <literal>NOT NULL</literal> 제약 조건을 빼는 경우:
<programlisting>
ALTER DOMAIN zipcode DROP NOT NULL;
</programlisting>
  </para>

  <para>
   체크 제약 조건을 추가하는 경우:
<programlisting>
ALTER DOMAIN zipcode ADD CONSTRAINT zipchk CHECK (char_length(VALUE) = 5);
</programlisting>
  </para>

  <para>
   체크 제약 조건을 빼는 경우:
<programlisting>
ALTER DOMAIN zipcode DROP CONSTRAINT zipchk;
</programlisting>
  </para>

  <para>
   위 체크 제약 조건 이름을 바꾸는 경우:
<programlisting>
ALTER DOMAIN zipcode RENAME CONSTRAINT zipchk TO zip_check;
</programlisting>
  </para>

  <para>
   도메인의 스키마를 바꾸는 경우:
<programlisting>
ALTER DOMAIN zipcode SET SCHEMA customers;
</programlisting></para>
 </refsect1>

 <refsect1 id="sql-alterdomain-compatibility">
  <title>호환성</title>

  <para>
   <command>ALTER DOMAIN</command> 명령은 표준 <acronym>SQL</acronym>
   구문을 따른다.  단, <literal>OWNER</literal>, <literal>RENAME</literal>, <literal>SET SCHEMA</literal>, <literal>VALIDATE CONSTRAINT</literal> 옵션은
   <productname>PostgreSQL</productname> 확장 기능이다.
   또한 <literal>ADD CONSTRAINT</literal> 구문에서 <literal>NOT VALID</literal> 
   옵션도 <productname>PostgreSQL</productname> 확장 기능이다.
  </para>
 </refsect1>

 <refsect1 id="sql-alterdomain-see-also">
  <title>관련 항목</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createdomain"/></member>
   <member><xref linkend="sql-dropdomain"/></member>
  </simplelist>
 </refsect1>

</refentry>
