<!--
doc/src/sgml/ref/create_view.sgml
PostgreSQL documentation
-->

<refentry id="sql-createview">
 <indexterm zone="sql-createview">
  <primary>CREATE VIEW</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE VIEW</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE VIEW</refname>
  <refpurpose>새 뷰 정의</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ OR REPLACE ] [ TEMP | TEMPORARY ] [ RECURSIVE ] VIEW <replaceable class="parameter">이름</replaceable> [ ( <replaceable class="parameter">칼럼이름</replaceable> [, ...] ) ]
    [ WITH ( <replaceable class="parameter">뷰옵션이름</replaceable> [= <replaceable class="parameter">뷰옵션값</replaceable>] [, ... ] ) ]
    AS <replaceable class="parameter">쿼리</replaceable>
    [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>설명</title>

  <para>
   <command>CREATE VIEW</command> 명령은 지정한 쿼리를 바탕으로 새 뷰를 만든다.    뷰는 물리적으로 구체화하는 개체는 아니다.  뷰를 호출하면 매번 
   그 뷰에 지정한 쿼리를 실행한다.
  </para>

  <para>
   <command>CREATE OR REPLACE VIEW</command> 명령은 이미 해당 뷰가 있다면, 
   그 뷰에서 사용할 쿼리를 바꾼다.  여기서 지정하는 쿼리의 출력 칼럼 정보는
   정확히 일치해야 한다.  (칼럼 이름, 순서, 자료형 모두 같아야 한다.)  
   단, 마지막에 새롭게 칼럼이 추가 되는 형태의 쿼리는 사용할 수 있다.  
   출력 칼럼 처리 계산은 완전히 다를 수 있다.(?)
  </para>

  <para>
   뷰 이름 앞에 스키마 이름을 사용하면(예, <literal>CREATE VIEW
   myschema.myview ...</literal>), 그 뷰는 해당 스키마 안에 만들어진다.
   스키마 이름을 지정하지 않으면 현재 스키마 안에 만들어진다.  임시 뷰는 
   특별한 스키마를 사용하기 때문에, 임시 뷰를 만들 때는 스키마 이름을
   지정하지 않는다.  뷰 이름은 해당 스키마 안에서, 다른 뷰, 테이블,
   시퀀스, 인덱스, 외부 테이블 이름들 가운데 유일해야 한다.
  </para>
 </refsect1>

 <refsect1>
  <title>매개 변수</title>

  <variablelist>
   <varlistentry>
    <term><literal>TEMPORARY</literal> 또는 <literal>TEMP</literal></term>
    <listitem>
     <para>
      이 옵션을 사용하면, 임시 뷰를 만든다.
      임시 뷰는 현재 세션이 종료 되면 자동 삭제 된다.
      임시 뷰로 만드는 이름과 같은 일반 릴레이션이 있다면, 
      임시 뷰가 만들어지면, 임시 뷰의 스키마 우선 순위로 
      스키마 이름을 지정하지 않으면 이 임시 뷰를 먼저 선택하게 된다.
      이럴 때는 스키마 이름까지 명확하게 지정해야한다.
     </para>

     <para>
      만드는 뷰가 참조 하는 개체가 임시 뷰이거나 임시 테이블이라면, 
      암묵적으로 <literal>TEMPORARY</literal> 옵션을 사용해서 
      임시 뷰로 만들어진다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RECURSIVE</literal>
      <indexterm zone="sql-createview">
       <primary>RECURSIVE</primary>
       <secondary>뷰에서</secondary>
      </indexterm>
    </term>
    <listitem>
     <para>
      재귀형 뷰를 만들 때 사용한다. 사용법은 다음과 같다:
<synopsis>
CREATE RECURSIVE VIEW [ <replaceable>스키마</replaceable> . ] <replaceable>뷰이름</replaceable> (<replaceable>칼럼이름</replaceable>) AS SELECT <replaceable>...</replaceable>;
</synopsis>
      같은 구문으로:
<synopsis>
CREATE VIEW [ <replaceable>스키마</replaceable> . ] <replaceable>뷰이름</replaceable> AS WITH RECURSIVE <replaceable>뷰이름</replaceable> (<replaceable>칼럼이름</replaceable>) AS (SELECT <replaceable>...</replaceable>) SELECT <replaceable>칼럼이름</replaceable> FROM <replaceable>뷰이름</replaceable>;
</synopsis>
      재귀형 뷰를 위해서는 뷰 칼럼 이름 목록이 반드시 지정되어야 한다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">이름</replaceable></term>
    <listitem>
     <para>
      만들 뷰 이름(스키마 이름 포함).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">칼럼이름</replaceable></term>
    <listitem>
     <para>
      뷰에서 사용하는 칼럼 이름 목록. 쿼리 결과로 만들어지는 칼럼 이름과
      다르게 지정하고 싶을 때 사용한다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="parameter">뷰옵션이름</replaceable> [= <replaceable class="parameter">뷰옵션값</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <para>
      해당 뷰에 지정할 선택적 매개 변수와 그 값; 지원하는 옵션은 다음과
      같다:

      <variablelist>
       <varlistentry>
        <term><literal>check_option</literal> (<type>enum</type>)</term>
        <listitem>
         <para>
          이 매개 변수 값으로 <literal>local</literal> 또는
          <literal>cascaded</literal> 중 하나를 사용할 수 있으며,
          <literal>WITH [ CASCADED | LOCAL ] CHECK OPTION</literal>
          구문과 같은 역할을 한다. (아래에서 설명함)
          이 옵션은 <xref
          linkend="sql-alterview"/> 명령으로 변경 할 수 있음.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>security_barrier</literal> (<type>불리언</type>)</term>
        <listitem>
         <para>
          로우 수준 보안 정책을 사용하는 경우 이 옵션을 사용한다.
          <xref linkend="rules-privileges"/>에서 자세히 설명 한다.
         </para>
        </listitem>
       </varlistentry>
      </variablelist></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">쿼리</replaceable></term>
    <listitem>
     <para>
      <xref linkend="sql-select"/> 명령이나
      <xref linkend="sql-values"/> 명령으로 구성된 
      뷰에서 사용할 쿼리.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH [ CASCADED | LOCAL ] CHECK OPTION</literal>
      <indexterm zone="sql-createview">
       <primary>CHECK OPTION</primary>
      </indexterm>
      <indexterm zone="sql-createview">
       <primary>WITH CHECK OPTION</primary>
      </indexterm>
    </term>
    <listitem>
     <para>
      이 옵션은 자동 DML이 가능한 뷰인 경우 그 동작 상태를 제어한다.  이
      옵션을 사용하면, <command>INSERT</command>, <command>UPDATE</command>
      명령을 이 뷰 대상으로 실행하면, 뷰에 보이는 자료에 대해서만, 
      해당 작업을 한다.  이 옵션이 없으면, 이 뷰 정의와 관련되지 않아도 
      작업이 진행된다.  (뷰는 어떤 정책에 의해 원치 않는 자료 전체나, 
      특정 칼럼을 보이지 않게 할 용도로 사용될 수 있다.  이런 
      제한 정책을 DML 작업에서 유지할 것인지, 안할 것인지를 지정하는 옵션이다.)
      이 옵션은 두 가지 선태 사항을 지정할 수 있다:

      <variablelist>
       <varlistentry>
        <term><literal>LOCAL</literal></term>
        <listitem>
         <para>
          이 작동 방식을 이 뷰만 대상으로 제한한 사항에 대해서만 
          자료 유효성을 검사한다. 
          이 뷰의 기반이 된 뷰에서 지정한 제한 사항은 무시한다.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>CASCADED</literal></term>
        <listitem>
         <para>
          이 작동 방식을 이 뷰와 이 뷰의 기반이 된 뷰에서 지정한
          모든 제한 사항을 모두 검사한다.
          특별히 그 기반이 된 뷰에 <literal>LOCAL</literal>,
          <literal>CASCADED</literal>
          옵션을 지정하지 않았다면, 자동으로 <literal>CASCADED</literal>
          옵션을 사용한다.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>

     <para>
      <literal>CHECK OPTION</literal> 옵션은 <literal>RECURSIVE</literal>
      뷰에서는 사용하지 못할 수도 있다.
     </para>

     <para>
      <literal>CHECK OPTION</literal> 옵션 기능은
      <literal>INSTEAD OF</literal> 트리거나, 
      <literal>INSTEAD</literal> 룰을 지정하지 않은 
      자동으로 업데이트 가능한 뷰만을 대상으로 작동된다.
      만들고자 하는 뷰의 기반이 되는 뷰에서 
      <literal>INSTEAD OF</literal> 트리거를 사용하고 있다면,
      새로 만들 뷰에 <literal>LOCAL CHECK OPTION</literal>
      옵션을 지정해야 할 것이다. 그렇지 않으면, 
      그 기반 뷰에 지정한 <literal>INSTEAD OF</literal> 트리거를
      검사하지 않게 된다. (<literal>CASCADED CHECK OPTION</literal>
      옵션은 트리거가 있는 뷰에서는 작동하지 않고, 그에 따라
      이런 모든 조건 검사가 다 무시 될 것이다.)
      만들고자 하는 뷰나, 그 기반이 되는 모든 개체들에
      <literal>INSTEAD</literal> 룰이 있다면, 
      <command>INSERT</command>, <command>UPDATE</command> 작업은
      그 체크 옵션 설정은 모두 그 룰 기반 처리에 의해 무시된다.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>참고</title>

   <para>
    뷰를 삭제할 때는 <xref linkend="sql-dropview"/> 명령을 사용한다.
   </para>

   <para>
    뷰를 만들 때, 그 칼럼 이름을 지정하는 것에 주의해야 한다. 다음이 
    이런 예다:
<programlisting>
CREATE VIEW vista AS SELECT 'Hello World';
</programlisting>
    이런 형태로 뷰를 만들게 되면, 그 뷰의 칼럼으로
    <literal>?column?</literal> 이름의 칼럼이 보이게 된다. 
    그 칼럼의 자료형은 특별히 지정하지 않았음에도 불구하고, 
    <type>text</type>형이 된다.  이런 문제를 피하기 위해서는
    다음과 같이 자료형과 칼럼 이름을 쿼리에 명시적으로 지정하면 된다:
<programlisting>
CREATE VIEW vista AS SELECT text 'Hello World' AS hello;
</programlisting>
   </para>

   <para>
    해당 뷰가 참조하는 테이블의 접근권한은 그 뷰 소유주의 접근권한에 
    따라 결정된다.  경우에 따라, 보안상의 이유로 
    그 참조하는 테이블에 대해서 접근권한을 제한 할 수도 있다.  하지만,
    모든 뷰가 이런 접근 권한 정책으로 자료를 안전하게 관리할 수 
    있는 것은 아니다.  <xref linkend="rules-privileges"/>에서 
    이 부분을 자세히 다룬다.  예를 들어 뷰 안에 있는 함수는 
    그 뷰 소유주의 권한으로 실행된다.  따라서 그 뷰의 사용자는 그 뷰 안에 있는 
    함수를 사용할 수 있는 권한이 있어야한다. (이런 복잡한 상황 때문에, 
    뷰를 만들 때는 권한 관련 부분을 꼼꼼히 살펴보아야 한다. - 옮긴이)
   </para>

   <para>
    기존에 있는 뷰를 대상으로 <command>CREATE OR REPLACE VIEW</command>
    명령으로 바꿀 때는 단지 SELECT 작업에 대한 내용만 바꾼다.
    뷰 속성, 소유주, 접근권한, SELECT 작업이 아닌 룰 등은 바뀌지 않는다.
    또한 이 작업은 그 뷰의 소유주만 할 수 있다. (물론 그 소유주의
    소속원도 포함해서)
   </para>

  <refsect2 id="sql-createview-updatable-views">
   <title>업데이트 가능한 뷰</title>

   <indexterm zone="sql-createview-updatable-views">
    <primary>업데이트 가능한 뷰</primary>
   </indexterm>

   <para>
    간단한 뷰는 그 자료 갱신이 가능하다: 즉, 뷰를 대상으로
    <command>INSERT</command>, <command>UPDATE</command>,
    <command>DELETE</command> 구문을 사용해서 그 뷰가 사용하는
    실 테이블의 자료를 갱신할 수 있다.  다음 모든 조건을 
    만족한다면, 그 뷰는 업데이트가 가능하다:

    <itemizedlist>
     <listitem>
      <para>
       뷰를 정의하는 쿼리의 <literal>FROM</literal> 목록에
       하나의 개체만(테이블이거나 또 다른 업데이트 가능한 뷰이거나) 
       지정된 경우.
      </para>
     </listitem>

     <listitem>
      <para>
       뷰 정의 쿼리에, <literal>WITH</literal>, <literal>DISTINCT</literal>,
       <literal>GROUP BY</literal>, <literal>HAVING</literal>,
       <literal>LIMIT</literal>, 또는 <literal>OFFSET</literal> 구문이 없는
       경우.
      </para>
     </listitem>

     <listitem>
      <para>
       뷰 정의 쿼리에 집합 연산(<literal>UNION</literal>,
       <literal>INTERSECT</literal> 또는 <literal>EXCEPT</literal>)이 없는
       경우.
      </para>
     </listitem>

     <listitem>
      <para>
       뷰 정의 쿼리의 칼럼 출력 부분에, 집계 함수, 윈도우 함수, 집합 반환 함수가
       없는 경우.
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    자동 업데이트 가능한 뷰는 업데이트 가능한 칼럼과 그렇지 못하는 
    칼럼을 함께 사용할 수 있다.  해당 칼럼이 업데이트 가능한 것이라면 (
    위 조건을 만족하는 경우), 그 칼럼을 조작하는 DML 구문에 대해서는 
    처리가 가능하고, 그렇지 않는 경우는 읽기 전용 칼럼으로 처리해서,
    이 읽기 전용 칼럼에 대한 <command>INSERT</command> 또는
    <command>UPDATE</command> 구문을 사용한다면 오류로 처리한다.
   </para>

   <para>
    자동 업데이트 가능한 뷰를 대상으로 <command>INSERT</command>,
    <command>UPDATE</command> 또는 <command>DELETE</command> 구문을 
    사용하게 되면, 내부적으로 그 대상이 되는 실 테이블을 대상으로
    쿼리가 바뀌어 실행된다.
    <command>INSERT</command> 구문에서는 <literal>ON
    CONFLICT UPDATE</literal> 구문도 잘 지원한다.
   </para>

   <para>
    자동 업데이트 가능한 뷰에 <literal>WHERE</literal> 조건이 
    있는 경우라면, <command>UPDATE</command>, <command>DELETE</command>
    명령인 경우, 그 조건이 그대로 실 테이블에 적용된다.
    또한, <command>UPDATE</command> 구문인 경우, 변경된 뒤 값이
    <literal>WHERE</literal> 조건에 맞지 않는 경우는 더 이상 
    해당 뷰를 통해서는 그 자료를 볼 수 없게 된다.  한편,
    <command>INSERT</command> 명령은 일단 <literal>WHERE</literal>
    조건과 관계 없이 자료가 입력은 되고, (<literal>ON CONFLICT UPDATE</literal>
    구문에 의해서 자료가 바뀔 수도 있고) 다음 
    뷰 조회에서 <literal>WHERE</literal> 조건으로 보이지 않을 수 있다.
    이 문제를 방지하려면, <literal>CHECK OPTION</literal> 옵션을 사용해서
    <command>INSERT</command>, <command>UPDATE</command> 명령에서
    자료 변경을 제한할 수도 있다.
   </para>

   <para>
    자동 업데이트 가능한 뷰에 <literal>security_barrier</literal>
    옵션을 지정했다면, <literal>WHERE</literal> 조건 및
    <literal>LEAKPROOF</literal> 옵션이 있는 연산자를 사용하는 경우
    항상 가장 먼저 그 조건을 먼저 검사한다.  이 부분에 대해서는
    <xref linkend="rules-privileges"/>에서 자세히 다룬다.  기억해야 할 점은
    rows which are not ultimately returned (because they do not
    pass the user's <literal>WHERE</literal> conditions) may still end up being locked 이것이다.
    이 부분은 <command>EXPLAIN</command> 명령을 통해서, 
    어떤 조건이 먼저 적용되었는지 살펴 볼 수 있다.
   </para>

   <para>
    그 외, 보다 복잡한 뷰는 일반적으로 대부분 읽기 전용 뷰가 된다. 이 뷰를
    통해서는 자료 입력, 수정, 삭제는 할 수 없다.  이런 뷰도 
    <literal>INSTEAD OF</literal> 트리거를 지정하면, 원한는 자료 변경 
    작업을 할 수는 있다.  예를 들어, 이 뷰에 자료를 입력하면, 
    저 테이블에 그 값을 입력하는 방식으로 구현할 수 있다.  트리거에 
    대한 자세한 설명은 <xref linkend="sql-createtrigger"/> 명령 설명서에
    다룬다.  또 다른 한 방법으로 룰(<xref linkend="sql-createrule"/> 참조)을
    만들어 이 부분을 처리할 수도 있지만, 트리거가 좀 더 구현하기 쉽고, 
    의도하는 대로 작동한다.
   </para>

   <para>
    뷰를 통한 자료 입력, 변경, 삭제 작업을 하려면, 그 뷰에 대해서
    적절한 권한이 있어야 함을 기억해야 한다.  일반적으로 뷰의 소유주가 
    기본적으로 이 권한을 갖고 있지만, 다른 사용자가 그 뷰를 통해서 
    자료를 변경 하려고 한다면, 그 뷰가 사용하는 실 테이블이 아니라, 
    그 뷰 자체에 대한 그 권한이 있어야 한다(<xref
    linkend="rules-privileges"/> 참조).
   </para>
  </refsect2>
 </refsect1>

 <refsect1>
  <title>예제</title>

  <para>
   모든 코미디 영화를 보여주는 뷰 만들기.

<programlisting>
CREATE VIEW comedies AS
    SELECT *
    FROM films
    WHERE kind = 'Comedy';
</programlisting>
   이 명령은 해당 뷰를 만드는 시점의 <literal>film</literal> 테이블의
   칼럼을 기반으로 뷰에서 사용하는 칼럼이 결정된다.
   <literal>*</literal> 칼럼 정의를 했다 하더라도, 그렇다. 즉 뷰를 만든 
   다음 테이블에 새 칼럼이 추가 되어도 뷰에는 추가되지 않는다.
  </para>

  <para>
   <literal>LOCAL CHECK OPTION</literal> 옵션을 사용하는 뷰:

<programlisting>
CREATE VIEW universal_comedies AS
    SELECT *
    FROM comedies
    WHERE classification = 'U'
    WITH LOCAL CHECK OPTION;
</programlisting>
   이 명령은 앞에서 만든 뷰를 기반으로 <literal>classification = 'U'</literal>
   조건을 만족하는 자료를 대상으로만 하는 또 다른 뷰를 만든다.
   이 뷰에서 <command>INSERT</command> 또는 <command>UPDATE</command>
   명령을 사용하는 경우, 단지 <literal>classification = 'U'</literal>
   조건을 만족하는지만 검사하지, 그 기반이 된 comedies 뷰의 제한한
   <literal>kind = 'Comedy'</literal> 조건을 만족하는지는 검사하지 않는다.
  </para>

  <para>
   <literal>CASCADED CHECK OPTION</literal> 옵션을 사용하는 뷰:

<programlisting>
CREATE VIEW pg_comedies AS
    SELECT *
    FROM comedies
    WHERE classification = 'PG'
    WITH CASCADED CHECK OPTION;
</programlisting>
   이 뷰는 두 조건 모두를 만족하는지 검사한다.
  </para>

  <para>
   업데이트 가능한 칼럼과 가능하지 않는 칼럼이 함께 있는 뷰:

<programlisting>
CREATE VIEW comedies AS
    SELECT f.*,
           country_code_to_name(f.country_code) AS country,
           (SELECT avg(r.rating)
            FROM user_ratings r
            WHERE r.film_id = f.id) AS avg_rating
    FROM films f
    WHERE f.kind = 'Comedy';
</programlisting>
   이 뷰를 대상으로 <command>INSERT</command>, <command>UPDATE</command>,
   <command>DELETE</command> 명령을 사용할 수 있다.  <literal>films</literal>
   테이블의 모든 칼럼에 대해서는 업데이트 가능하지만,
   <literal>country</literal>, <literal>avg_rating</literal> 같은 계산된 
   칼럼은 업데이트 할 수 없다.
  </para>

  <para>
   1부터 100까지 출력하는 재귀형 뷰 만들기:
<programlisting>
CREATE RECURSIVE VIEW public.nums_1_100 (n) AS
    VALUES (1)
UNION ALL
    SELECT n+1 FROM nums_1_100 WHERE n &lt; 100;
</programlisting>
   이 예제에서는 스키마 이름 사용법에 주의해야 한다.  <command>CREATE</command>
   명령의 뷰 이름에는 스키마 이름을 지정할 수 있지만, 
   그 뷰에서 사용하는 쿼리 안에서 사용하는 재귀 호출용 뷰 이름에는
   스키마 이름을 지정할 수 없다.  CTE 이름에는 스키마 이름을 지정할 수 
   없기 때문이다.
  </para>
 </refsect1>

 <refsect1>
  <title>호환성</title>

  <para>
   <command>CREATE OR REPLACE VIEW</command> 구문은
   <productname>PostgreSQL</productname> 확장형이다.
   임시 뷰와
   <literal>WITH ( ... )</literal> 구문도 확장형이다.
  </para>
 </refsect1>

 <refsect1>
  <title>관련 항목</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterview"/></member>
   <member><xref linkend="sql-dropview"/></member>
   <member><xref linkend="sql-creatematerializedview"/></member>
  </simplelist>
 </refsect1>
</refentry>
