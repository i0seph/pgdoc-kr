<!--
doc/src/sgml/ref/create_table_as.sgml
PostgreSQL documentation
-->

<refentry id="sql-createtableas">
 <indexterm zone="sql-createtableas">
  <primary>CREATE TABLE AS</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE TABLE AS</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TABLE AS</refname>
  <refpurpose>쿼리 결과로 새 테이블 정의</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE [ IF NOT EXISTS ] <replaceable>테이블이름</replaceable>
    [ (<replaceable>칼럼이름</replaceable> [, ...] ) ]
    [ USING <replaceable class="parameter">method</replaceable> ]
    [ WITH ( <replaceable class="parameter">저장_매개변수</replaceable> [= <replaceable class="parameter">값</replaceable>] [, ... ] ) | WITHOUT OIDS ]
    [ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]
    [ TABLESPACE <replaceable class="parameter">테이블스페이스이름</replaceable> ]
    AS <replaceable>쿼리</replaceable>
    [ WITH [ NO ] DATA ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>설명</title>

  <para>
   <command>CREATE TABLE AS</command> 명령은
   <command>SELECT</command> 명령 결과를 새 테이블로 만든다.
   만들어지는 테이블의 칼럼 이름과 자료형은
   <command>SELECT</command> 명령 출력 칼럼을 사용한다.
   (물론 칼럼 이름은 새로 지정할 있다.)
  </para>

  <para>
   <command>CREATE TABLE AS</command> 명령은 결과적으로 보면
   뷰를 만드는 것과 비슷하지만, 내부적으로는 전혀 다른 것이다.
   이 명령이 실행되면, 새 테이블이 만들어지고, 그 안에 쿼리 
   결과가 물리적으로 채워진다.  그래서, 원본 테이블의 자료와 
   별개의 자료가 된다.  반면, 뷰는 뷰를 조회할 때마다, 
   뷰를 만들 때 지정한 쿼리를 실행하는 형태여서, 
   원본 테이블의 자료가 바뀌면 뷰의 결과도 바뀐다.
  </para>
 </refsect1>

 <refsect1>
  <title>매개 변수</title>

  <variablelist>
   <varlistentry>
    <term><literal>GLOBAL</literal> 또는 <literal>LOCAL</literal></term>
    <listitem>
     <para>
      이 옵션은 호환성 때문에 있으며, 지금은 사용하지 않는다.
      <xref linkend="sql-createtable"/> 참조.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <varlistentry>
    <term><literal>TEMPORARY</literal> 또는 <literal>TEMP</literal></term>
    <listitem>
     <para>
      이 옵션을 사용하면, 임시 테이블로 만든다.
      <xref linkend="sql-createtable"/> 참조.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>UNLOGGED</literal></term>
    <listitem>
     <para>
      이 옵션을 사용하면, 미리 쓰기 로그를 남기지 않는 테이블로 만든다.
      <xref linkend="sql-createtable"/> 참조.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>IF NOT EXISTS</literal></term>
    <listitem>
     <para>
      해당 이름의 개체가 있으면 오류로 처리하지 않고 알림 메시지만 보이고, 
      작업을 중지한다.
      <xref linkend="sql-createtable"/> 참조
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>테이블이름</replaceable></term>
    <listitem>
     <para>
      새로 만들 테이블 이름(스키마 이름 포함).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>칼럼이름</replaceable></term>
    <listitem>
     <para>
      새 테이블의 칼럼 이름.  칼럼 이름을 지정하지 않으면,
      쿼리 결과에서 출력된 칼럼 이름을 사용한다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>USING <replaceable class="parameter">method</replaceable></literal></term>
    <listitem>
     <para>
      This optional clause specifies the table access method to use to store
      the contents for the new table; the method needs be an access method of
      type <literal>TABLE</literal>. See <xref linkend="tableam"/> for more
      information.  If this option is not specified, the default table access
      method is chosen for the new table. See <xref
      linkend="guc-default-table-access-method"/> for more information.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="parameter">저장_매개변수</replaceable> [= <replaceable class="parameter">값</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <para>
      만들 새 테이블의 저장 매개 변수를 지정한다:
      <xref linkend="sql-createtable"/>의 
      <xref linkend="sql-createtable-storage-parameters"/> 부분에서
      이 변수들을 자세히 다룬다.
      For backward-compatibility the <literal>WITH</literal>
      clause for a table can also include <literal>OIDS=FALSE</literal> to
      specify that rows of the new table should contain no OIDs (object
      identifiers), <literal>OIDS=TRUE</literal> is not supported anymore.
      <xref linkend="sql-createtable"/> 참조.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITHOUT OIDS</literal></term>
    <listitem>
     <para>
      This is backward-compatible syntax for declaring a table
      <literal>WITHOUT OIDS</literal>, creating a table <literal>WITH
      OIDS</literal> is not supported anymore.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ON COMMIT</literal></term>
    <listitem>
     <para>
      만드는 테이블이 임시 테이블이고, 
      이 테이블이 트랜잭션 블럭 안에서 사용된 경우,
      그 트랜잭션이 커밋 되었을 때 그 임시 테이블을 어떻게 할지를 지정한다.
      세가지 옵션이 있다:

      <variablelist>
       <varlistentry>
        <term><literal>PRESERVE ROWS</literal></term>
        <listitem>
         <para>
          특별히 다른 조작 없이 그대로 둔다.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DELETE ROWS</literal></term>
        <listitem>
         <para>
          자료만 다 지워 빈 테이블로 만든다.
          매번 커밋 될 때마다, 자동으로 <xref
          linkend="sql-truncate"/> 명령을 수행하는 것과 같다.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DROP</literal></term>
        <listitem>
         <para>
          트랜잭션이 커밋 되면 임시 테이블을 지운다.
         </para>
        </listitem>
       </varlistentry>
      </variablelist></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TABLESPACE <replaceable class="parameter">테이블스페이스이름</replaceable></literal></term>
    <listitem>
     <para>
      해당 테이블이 사용하는 테이블스페이스 이름.
      지정하지 않으면, 일반 테이블은
      <xref linkend="guc-default-tablespace"/> 테이블스페이스를 사용하며,
      임시 테이블은
      <xref linkend="guc-temp-tablespaces"/> 테이블스페이스를 사용한다.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>쿼리</replaceable></term>
    <listitem>
     <para>
      <xref linkend="sql-select"/>, <link
      linkend="sql-table">TABLE</link>, 또는 <xref linkend="sql-values"/>
      명령, 또는 미리 준비된 <command>SELECT</command>, <command>TABLE</command>, <command>VALUES</command> 명령을 실행하는 <xref linkend="sql-execute"/> 명령
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH [ NO ] DATA</literal></term>
    <listitem>
     <para>
      테이블을 만든 뒤 그 테이블에 자료를 채울 것인지 지정한다.
      채우지 않으면 빈 테이블로 만들어진다.
      기본값은 자료를 채운다.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect1>

 <refsect1>
  <title>참고</title>

  <para>
   이 명령은 기능적으로 <xref
   linkend="sql-selectinto"/> 명령과 비슷하지만, 
   <command>SELECT INTO</command> 문법의 다른 용도와
   덜 헷갈려 더 선호된다.
   나아가, <command>SELECT INTO</command> 명령이 할 수 있는
   기능보다 더 많은 기능을 제공하고 있다.
  </para>
 </refsect1>

 <refsect1>
  <title>예제</title>

  <para>
   <literal>films</literal> 테이블에서 최근 자료만 뽑아서
   <literal>films_recent</literal> 테이블을 만들어 그곳에 따로 보관 하는 경우:
   (따로 보관하기 보다는 복사해 놓는다는 것이 더 맞다)

<programlisting>
CREATE TABLE films_recent AS
  SELECT * FROM films WHERE date_prod &gt;= '2002-01-01';
</programlisting>
  </para>

  <para>
   <literal>TABLE</literal> 명령을 이용해서 
   테이블 전체를 복사하는 경우:

<programlisting>
CREATE TABLE films2 AS
  TABLE films;
</programlisting>
  </para>

  <para>
   미리 준비된 구문으로 자료 범위를 지정하고, 
   EXECUTE 명령으로 실행해서, 
   해당 트랜잭션이 커밋 되면
   자동 삭제 되는 임시 테이블을 만드는 경우:

<programlisting>
PREPARE recentfilms(date) AS
  SELECT * FROM films WHERE date_prod &gt; $1;
CREATE TEMP TABLE films_recent ON COMMIT DROP AS
  EXECUTE recentfilms('2002-01-01');
</programlisting></para>
 </refsect1>

 <refsect1>
  <title>호환성</title>

  <para>
   <command>CREATE TABLE AS</command> 구문은 <acronym>SQL</acronym>
   표준이다.  다음은 표준이 아닌 확장 기능이다:

   <itemizedlist spacing="compact">
    <listitem>
     <para>
      표준에서는 서브쿼리절에는 괄호가 필요하지만,
      <productname>PostgreSQL</productname>에서는 괄호가 선택사항이다.
     </para>
    </listitem>

    <listitem>
     <para>
      표준에서는 <literal>WITH [ NO ] DATA</literal> 절이 필수지만,
      PostgreSQL에서는 선택 사항이다.
     </para>
    </listitem>

    <listitem>
     <para><productname>PostgreSQL</productname>에서는 임시 테이블 처리도 가능하다.
      <xref linkend="sql-createtable"/> 참조.
     </para>
    </listitem>

    <listitem>
     <para>
      저장 매개 변수를 지정하는
      <literal>WITH</literal> 절은 <productname>PostgreSQL</productname> 확장
      기능이다.
     </para>
    </listitem>

    <listitem>
     <para>
      테이블스페이스 개념도 표준이 아닌, 
      <productname>PostgreSQL</productname> 자체 개념임으로,
      <literal>TABLESPACE</literal> 옵션도 확장 기능이다.
     </para>
    </listitem>
   </itemizedlist></para>
 </refsect1>

 <refsect1>
  <title>관련 항목</title>

  <simplelist type="inline">
   <member><xref linkend="sql-creatematerializedview"/></member>
   <member><xref linkend="sql-createtable"/></member>
   <member><xref linkend="sql-execute"/></member>
   <member><xref linkend="sql-select"/></member>
   <member><xref linkend="sql-selectinto"/></member>
   <member><xref linkend="sql-values"/></member>
  </simplelist>
 </refsect1>

</refentry>
