<!--
doc/src/sgml/ref/ecpg-ref.sgml
PostgreSQL documentation
-->

<refentry id="app-ecpg">
 <indexterm zone="app-ecpg">
  <primary>ecpg</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>ecpg</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname><application>ecpg</application></refname>
  <refpurpose>임베디드 SQL C 전처리기</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>ecpg</command>
   <arg choice="opt" rep="repeat"><replaceable>옵션</replaceable></arg>
   <arg choice="plain" rep="repeat"><replaceable>파일</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>


 <refsect1 id="app-ecpg-description">
  <title>설명</title>

  <para>
   <command>ecpg</command> 명령은 C 프로그램용 임베디드 SQL 전처리기다.
   SQL 명령을 사용하는 C 프로그램을 이 전처리기가 해석할 수 있는 
   구문으로 소스 파일을 작성하고, 이 명령을 이용해서 C 컴파일러가 해석할 
   수 있는 소스 파일로 바꾼다.  
  </para>

  <para>
   <command>ecpg</command> will convert each input file given on the
   command line to the corresponding C output file.  If an input file
   name does not have any extension, <filename>.pgc</filename> is
   assumed.  The file's extension will be replaced
   by <filename>.c</filename> to construct the output file name.
   But the output file name can be overridden using the
   <option>-o</option> option.
  </para>

  <para>
   If an input file name is just <literal>-</literal>,
   <command>ecpg</command> reads the program from standard input
   (and writes to standard output, unless that is overridden
   with <option>-o</option>).
  </para>

  <para>
   여기서는 임베디드 SQL 언어에 대한 설명은 하지 않는다.  이 부분은
   <xref linkend="ecpg"/>에서 자세히 다룬다.
  </para>
 </refsect1>


 <refsect1>
  <title>옵션</title>

  <para>
   <command>ecpg</command> 명령에서 사용할 수 있는 옵션은 다음과 같다:

   <variablelist>
    <varlistentry>
     <term><option>-c</option></term>
     <listitem>
      <para>
       SQL 코드에서 특정 C 코드를 자동으로 만든다.  현재 이 옵션은
       <literal>EXEC SQL TYPE</literal> 구문용이다.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-C <replaceable>모드</replaceable></option></term>
     <listitem>
      <para>
       호환 모드 지정. <replaceable>모드</replaceable> 값으로
       <literal>INFORMIX</literal>, <literal>INFORMIX_SE</literal>
       <literal>ORACLE</literal>
       셋 중 하나를 지정할 수 있다.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-D <replaceable>심볼</replaceable></option></term>
     <listitem>
      <para>
       C 전처리에서 사용할 심볼 지정.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-h</option></term>
     <listitem>
      <para>
       Process header files.  When this option is specified, the output file
       extension becomes <literal>.h</literal> not <literal>.c</literal>,
       and the default input file extension is <literal>.pgh</literal>
       not <literal>.pgc</literal>.  Also, the <option>-c</option> option is
       forced on.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-i</option></term>
     <listitem>
      <para>
       Parse system include files as well.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-I <replaceable class="parameter">디렉터리</replaceable></option></term>
     <listitem>
      <para>
       <literal>EXEC SQL INCLUDE</literal> 지정한 파일이 있는 
       디렉터리를 지정한다.  기본 값은 순서 대로, <filename>.</filename>
       (현재 디렉터리), <filename>/usr/local/include</filename>,
       <productname>PostgreSQL</productname> 컴파일 할 때 지정한
       인크루드 디렉터리 (기본값:
       <filename>/usr/local/pgsql/include</filename>),
       <filename>/usr/include</filename> 디렉토리들이다.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-o <replaceable>파일이름</replaceable></option></term>
     <listitem>
      <para>
       <command>ecpg</command> 작업 출력물의 이름을 
       <replaceable>파일이름</replaceable>으로 지정한다.
       Write <literal>-o -</literal> to send all output to standard output.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-r <replaceable>옵션</replaceable></option></term>
     <listitem>
      <para>
       실행 환경을 지정한다.  사용할 수 있는 <replaceable>옵션</replaceable>은
       다음 중 하나다:
       <variablelist>
        <varlistentry>
         <term><option>no_indicator</option></term>
         <listitem>
         <para>
         Do not use indicators but instead use special values to represent
         null values. Historically there have been databases using this approach.
         </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><option>prepare</option></term>
         <listitem>
         <para>
         Prepare all statements before using them. Libecpg will keep a cache of
         prepared statements and reuse a statement if it gets executed again. If the
         cache runs full, libecpg will free the least used statement.
         </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><option>questionmarks</option></term>
         <listitem>
         <para>
         Allow question mark as placeholder for compatibility reasons.
         This used to be the default long ago.
         </para>
         </listitem>
        </varlistentry>
       </variablelist></para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-t</option></term>
     <listitem>
      <para>
       트랜잭션 자동 커밋 처리.  이 옵션을 사용하면, 
       SQL 명령은 명시적으로 트랜잭션 영역 안에 있다고 지정하지 않는 이상
       자동으로 그 명령이 실행 되면 커밋 된다.  기본값은
       <command>EXEC SQL COMMIT</command> 구문이 실행 될 때만
       커밋 된다.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-v</option></term>
     <listitem>
      <para>
       버전과 "include" 경로를 포함한 부가 정보를 보여준다.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>--version</option></term>
     <listitem>
      <para>
       <application>ecpg</application> 버전을 보여주고 마친다.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-?</option></term>
     <term><option>--help</option></term>
     <listitem>
      <para>
       <application>ecpg</application> 명령행 옵션 도움말을 보여주고 마친다.
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </para>
 </refsect1>


 <refsect1>
  <title>참고</title>

  <para>
   이 명령으로 전처리 작업이 완료된 C 코드 파일을 컴파일 하려면,
   <productname>PostgreSQL</productname> include 디렉터리 안에 있는 
   <application>ECPG</application> 헤더 파일이 필요하다.  그래서,
   C 컴파일 작업에서는 <literal>-I/usr/local/pgsql/include</literal> 옵션처럼
   그 컴파일러 맞는 include 파일 경로 설정이 필요하다.
  </para>

  <para>
   이렇게 컴파일 된 실행 파일은 <filename>libecpg</filename> 
   라이브러리를 필요로한다.  그래서, 링크 작업을 할 때는
   <literal>-L/usr/local/pgsql/lib -lecpg</literal> 이와 비슷한
   옵션이 추가적으로 필요하다. (동적으로 링크한다면, 
   LD_LIBRARY_PATH 또는 LD_RUN_PATH 설정이 필요할 수도 있다. - 옮긴이)
  </para>

  <para>
   앞에서 설명한 각 경로들의 적당한 값을 찾는 방법은
   <xref linkend="app-pgconfig"/> 명령을 이용하면 된다.
  </para>
 </refsect1>


 <refsect1>
  <title>예제</title>

  <para>
   <filename>prog1.pgc</filename> 이름으로 임베디드 SQL C
   소스 파일을 작성했다면, 다음 작업 과정을 거쳐 
   실행파일을 만들 수 있다:
<programlisting>
ecpg prog1.pgc
cc -I/usr/local/pgsql/include -c prog1.c
cc -o prog1 prog1.o -L/usr/local/pgsql/lib -lecpg
</programlisting></para>
 </refsect1>

</refentry>
