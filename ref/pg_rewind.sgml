<!--
doc/src/sgml/ref/pg_rewind.sgml
PostgreSQL documentation
-->

<refentry id="app-pgrewind">
 <indexterm zone="app-pgrewind">
  <primary>pg_rewind</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pg_rewind</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo>Application</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_rewind</refname>
  <refpurpose><productname>PostgreSQL</productname> 데이터 디렉터리를
  자신으로부터 파생된 또 다른 데이터 디렉터리에게 맞춰 동기화</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_rewind</command>
   <arg rep="repeat"><replaceable>옵션</replaceable></arg>
   <group choice="plain">
    <group choice="req">
     <arg choice="plain"><option>-D </option></arg>
     <arg choice="plain"><option>--target-pgdata</option></arg>
    </group>
    <replaceable> 디렉터리 위치</replaceable>
    <group choice="req">
     <arg choice="plain"><option>--source-pgdata=<replaceable>디렉터리 위치</replaceable></option></arg>
     <arg choice="plain"><option>--source-server=<replaceable>연결정보</replaceable></option></arg>
    </group>
   </group>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>설명</title>

  <para>
   <application>pg_rewind</application>는 클러스터의 또 다른 복사본에 맞춰 
   PostgreSQL 클러스터를 동기화 해주는 도구이다, 클러스터의 타임라인이
   분기된 후라 할지라도. 이를 사용하는 일반적인 시나리오는 장애복구
   후에 '이전의 master 서버'를 '새로운 master 서버'의 standby 로 되돌려준다.
  </para>

  <para>
   되감기 작업이 끝난 대상 데이터 디렉터리는
   원본 데이터 디렉터리의 베이스 백업본과 비슷하다.  새로운 베이스
   백업을 하거나, <application>rsync</application> 같은 도구를 
   사용할 때와 다른 점은, <application>pg_rewind</application>
   명령을 사용하면 똑 같은 파일은 복사하지 않는다는 점이다.
   오직 해당 릴레이션의 변경된 블록만 복사된다.  또한, 
   대상 데이터 디렉터리에는 없는 릴레이션 파일과, 환경 설정 파일, 
   WAL 파일은 그대로 복사 된다.  데이터베이스가 크고, 
   자료 변경분이 그리 크지 않은 경우, 이 되감기 작업은 다른 구축 방법보다
   빠르다.
  </para>

  <para>
   <application>pg_rewind</application>는 source/target 클러스간에 타임라인
   이력을 조사하여 분기지점을 알아낸다.  그리고 target 클러스터의
   <filename>pg_wal</filename> 디렉터리내에서 분기되었던 시점으로 되돌릴
   전체 WAL 찾아내려 한다.  분기지점은 target, source 또는 그 이전의
   공통된 클러스터 타임라인들 중에서 찾을 수 있다.  전형적인 장애복구
   시나리오에서 target 클러스터는 분기된지 그리 오래 시간이 흐르지 않는다.  이러면
   문제가 없지만, 만약에 target 클러스터가 분기된 이후에도 오래도록
   운영되었다면 source 클러스터쪽에서 오래된 WAL파일들이 없을 수 있다.  
   이 경우, 직접 그 대상 WAL 아카이브 파일을 <filename>pg_wal</filename>
   디렉터리로 복사할 수도 있다, 또는 <application>pg_rewind</application>
   <literal>-c</literal> 옵션을 사용해서 복사할 수도
   있다.  <application>pg_rewind</application>
   명령은 페일오버 용도로만 사용하는 것이 아니라, 
   대기 서버가 운영 서버로 전환되었다가 다시 대기 서버로 바꾸려고 할 때도
   사용될 수 있다.
  </para>

  <para>
   <application>pg_rewind</application> 수행 후, target 서버는 
   자료 정합성을 맞추기 위해 WAL 재반영 작업이 필요하다.  서버가 
   시작되면, 아카이브 복구 모드로 진입하고, 
   원본 데이터베이스 서버의 마지막 체크 포인트 이후의 source 서버에서
   만들어진 모든 WAL을 재생한다.  이때, 필요한 WAL 파일 없다면, 
   <application>pg_rewind</application> 명령으로는 이 파일들을 복사할 수
   없다.  이런 상황에서는 target 서버가 실행 될때
   target 데이터 디렉터리 안에 <filename>recovery.signal</filename>
   파일 만들고, <filename>postgresql.conf</filename> 파일에서
   복구에 필요한 적당한 <xref linkend="guc-restore-command"/> 설정을 
   할 수도 있다.
  </para>

  <para>
   <application>pg_rewind</application>를 수행하기 위한 요구사항은
   target 서버의 <filename>postgresql.conf</filename> 에서
   <xref linkend="guc-wal-log-hints"/> 옵션이 활성화되어 있거나,
   <application>initdb</application> 로 클러스터를 초기화할때 체크섬이
   활성화 되어 있어야 한다.  이것들의 활성화값은 모두 기본값은 아니다.  
   <xref linkend="guc-full-page-writes"/> 값은 <literal>on</literal>
   되어 있어야 한다.  이건 기본값으로 활성화되어 있다.
  </para>

  <warning>
   <para>
    If <application>pg_rewind</application> fails while processing, then
    the data folder of the target is likely not in a state that can be
    recovered.  In such a case, taking a new fresh backup is recommended.
   </para>

   <para>
    As <application>pg_rewind</application> copies configuration files
    entirely from the source, it may be required to correct the configuration
    used for recovery before restarting the target server, especially if
    the target is reintroduced as a standby of the source. If you restart
    the server after the rewind operation has finished but without configuring
    recovery, the target may again diverge from the primary.
   </para>

   <para>
    <application>pg_rewind</application> will fail immediately if it finds
    files it cannot write directly to.  This can happen for example when
    the source and the target server use the same file mapping for read-only
    SSL keys and certificates.  If such files are present on the target server
    it is recommended to remove them before running
    <application>pg_rewind</application>.  After doing the rewind, some of
    those files may have been copied from the source, in which case it may
    be necessary to remove the data copied and restore back the set of links
    used before the rewind.
   </para>
  </warning>
 </refsect1>

 <refsect1>
  <title>옵션</title>

   <para>
    <application>pg_rewind</application>는 다음 명령어 줄 옵션을 사용한다.

    <variablelist>
     <varlistentry>
      <term><option>-D <replaceable class="parameter">directory</replaceable></option></term>
      <term><option>--target-pgdata=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <para>
        이 옵션은 source 서버로 부터 동기화하는 target 데이터 디렉터리를
        가리킨다. target 서버는 <application>pg_rewind</application> 수행전에
        완전히 내려가 있어야 한다. 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--source-pgdata=<replaceable class="parameter">directory</replaceable></option></term>
      <listitem>
       <para>
        target 서버를 동기화시킬 source 서버의 데이터 디렉터리를 가리킨다.  이
        옵션을 사용하려면 source 서버가 완전히 내려가 있어야 한다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--source-server=<replaceable class="parameter">connstr</replaceable></option></term>
      <listitem>
      <para>
        Specifies a libpq connection string to connect to the source
        <productname>PostgreSQL</productname> server to synchronize the target
        with. The connection must be a normal (non-replication) connection
        with a role having sufficient permissions to execute the functions
        used by <application>pg_rewind</application> on the source server
        (see Notes section for details) or a superuser role.  This option
        requires the source server to be running and not in recovery mode.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-R</option></term>
      <term><option>--write-recovery-conf</option></term>
      <listitem>
       <para>
        Create <filename>standby.signal</filename> and append connection
        settings to <filename>postgresql.auto.conf</filename> in the output
        directory.  <literal>--source-server</literal> is mandatory with
        this option.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--dry-run</option></term>
      <listitem>
       <para>
        target 디렉터리에 실제 수정없이 모든 것을 수행해 본다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-N</option></term>
      <term><option>--no-sync</option></term>
      <listitem>
       <para>
        By default, <command>pg_rewind</command> will wait for all files
        to be written safely to disk.  This option causes
        <command>pg_rewind</command> to return without waiting, which is
        faster, but means that a subsequent operating system crash can leave
        the synchronized data directory corrupt.  Generally, this option is
        useful for testing but should not be used on a production
        installation.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P</option></term>
      <term><option>--progress</option></term>
      <listitem>
       <para>
        진행상태를 표시한다.  이 옵션을 활성화 시키면 정확하진 않지만
        source 클러스터로부터 데이터 복제하는 진행상태를 볼 수 있다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-c</option></term>
      <term><option>--restore-target-wal</option></term>
      <listitem>
       <para>
        Use <varname>restore_command</varname> defined in the target cluster
        configuration to retrieve WAL files from the WAL archive if these
        files are no longer available in the <filename>pg_wal</filename>
        directory.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--debug</option></term>
      <listitem>
       <para>
        <application>pg_rewind</application>를 디버깅하는 개발자들에게
        유용한 디버깅 메시지를 출력한다.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-ensure-shutdown</option></term>
      <listitem>
       <para>
        <application>pg_rewind</application> requires that the target server
        is cleanly shut down before rewinding. By default, if the target server
        is not shut down cleanly, <application>pg_rewind</application> starts
        the target server in single-user mode to complete crash recovery first,
        and stops it.
        By passing this option, <application>pg_rewind</application> skips
        this and errors out immediately if the server is not cleanly shut
        down. Users are expected to handle the situation themselves in that
        case.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
      <listitem><para>버전 정보를 표시하고 종료한다.</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>--help</option></term>
      <listitem><para>도움말을 표시하고 종료한다.</para></listitem>
     </varlistentry>

    </variablelist>
   </para>
 </refsect1>

 <refsect1>
  <title>환경 변수</title>

  <para>
   <option>--source-server</option> 옵션이 사용되면,
   <application>pg_rewind</application>는 <application>libpq</application>에서
   지원되는 환경 변수도 사용할 수 있다.(<xref linkend="libpq-envars"/> 참조).
  </para>

  <para>
   The environment variable <envar>PG_COLOR</envar> specifies whether to use
   color in diagnostic messages. Possible values are
   <literal>always</literal>, <literal>auto</literal> and
   <literal>never</literal>.
  </para>
 </refsect1>

 <refsect1>
  <title>주석</title>

  <para>
   When executing <application>pg_rewind</application> using an online
   cluster as source, a role having sufficient permissions to execute the
   functions used by <application>pg_rewind</application> on the source
   cluster can be used instead of a superuser.  Here is how to create such
   a role, named <literal>rewind_user</literal> here:
<programlisting>
CREATE USER rewind_user LOGIN;
GRANT EXECUTE ON function pg_catalog.pg_ls_dir(text, boolean, boolean) TO rewind_user;
GRANT EXECUTE ON function pg_catalog.pg_stat_file(text, boolean) TO rewind_user;
GRANT EXECUTE ON function pg_catalog.pg_read_binary_file(text) TO rewind_user;
GRANT EXECUTE ON function pg_catalog.pg_read_binary_file(text, bigint, bigint, boolean) TO rewind_user;
</programlisting>
  </para>

  <para>
   When executing <application>pg_rewind</application> using an online
   cluster as source which has been recently promoted, it is necessary
   to execute a <command>CHECKPOINT</command> after promotion such that its
   control file reflects up-to-date timeline information, which is used by
   <application>pg_rewind</application> to check if the target cluster
   can be rewound using the designated source cluster.
  </para>

  <refsect2>
   <title>어떻게 동작되는가?</title>

   <para>
    이 생각은 기본적으로은 시스템 수준에서 모든 변경 사항을 source
    클러스터에서 target 클러스터로 복사한다는데 있다.
   </para>

   <procedure>
    <step>
     <para>
      target 클러스터의 WAL을 검사한다. 범위는, target 클러스터로부터
      source 클러스터의 타임라인이 나뉘어진 지점 바로 앞의 마지막
      체크포인트된 지점에서 시작한다.  각 WAL 레코드들을 통해서 변경된
      데이터 블록들을 기록한다.  그러면 source 클러스터를 분기시킨 후에
      target 클러스터에서 변경된 데이터 블록의 전체 목록을 만들 수 있다.  
      If some of the WAL files are no longer
      available, try re-running <application>pg_rewind</application> with
      the <option>-c</option> option to search for the missing files in
      the WAL archive.
     </para>
    </step>
    <step>
     <para>
      1번에서 얻은 목록을 사용해서 source 클러스터에서 target 클러스터로
      변경된 블록 전체를 복사한다.  이때 직접 시스템 파일에 접근하는
      (<option>--source-pgdata</option>)이나 SQL
      (<option>--source-server</option>) 옵션 중 하나를 사용한다.
      Relation files are now in a state equivalent to the moment of the last
      completed checkpoint prior to the point at which the WAL timelines of the
      source and target diverged plus the current state on the source of any
      blocks changed on the target after that divergence.
     </para>
    </step>
    <step>
     <para>
      <filename>pg_xact</filename>이나 설정파일들, WAL 조각 파일들 모두 source
      클러스터에서 target 클러스터로 복사한다.  (변경되지 않는 릴레이션
      파일을 제외하곤 모두) 베이스 백업과 비슷하게, 
      <filename>pg_dynshmem/</filename>,
      <filename>pg_notify/</filename>, <filename>pg_replslot/</filename>,
      <filename>pg_serial/</filename>, <filename>pg_snapshots/</filename>,
      <filename>pg_stat_tmp/</filename>, 
      <filename>pg_subtrans/</filename> 디렉터리의 내용은 빠진다.
      또한
      <filename>backup_label</filename>,
      <filename>tablespace_map</filename>,
      <filename>pg_internal.init</filename>,
      <filename>postmaster.opts</filename>,
      <filename>postmaster.pid</filename> 파일과,
      <filename>pgsql_tmp</filename>로 시작하는 모든 디렉터리와 파일들도 생략한다.
     </para>
    </step>
    <step>
     <para>
      Create a <filename>backup_label</filename> file to begin WAL replay at
      the checkpoint created at failover and configure the
      <filename>pg_control</filename> file with a minimum consistency LSN
      defined as the result of <literal>pg_current_wal_insert_lsn()</literal>
      when rewinding from a live source or the last checkpoint LSN when
      rewinding from a stopped source.
     </para>
    </step>
    <step>
     <para>
      When starting the target, <productname>PostgreSQL</productname> replays
      all the required WAL, resulting in a data directory in a consistent
      state.
     </para>
    </step>
   </procedure>
  </refsect2>
 </refsect1>

</refentry>
