<!-- $PostgreSQL: pgsql/doc/src/sgml/start.sgml,v 1.43 2006/10/21 23:12:57 tgl Exp $ -->

 <chapter id="tutorial-start">
  <title>시작하기</title>

  <sect1 id="tutorial-install">
   <title>설치</title>

   <para>
    <productname>PostgreSQL</productname>을 사용하려면 당연히 설치부터
    해야겠지요.  그런데, 대부분의 시스템(컴퓨터)에는 이미 <productname>PostgreSQL</productname>
    패키지가 설치되어있는 경우가 많습니다.  OS의 배포판에 기본으로 내장되고,
    특별히 제외시키지 않는다면, 기본적으로 설치되어있기 때문이지요.  이런 경우라면, 
    OS 배포판 설치문서나 안내문서를 참조하시면, <productname>PostgreSQL</productname> 패키지가
    어디에 설치되었고, 어떻게 사용하는지에 대해서 알 수 있을 것입니다.
   </para>

   <para>
    만일 사용하는 시스템에 <productname>PostgreSQL</productname> 패키지가
    설치되어 있지 않거나, <productname>PostgreSQL</productname> 설치에 대해서
    공부를 해보려고 한다면, 그리 어렵지 않은 일이기에 한번 정도 시도해 보는 것도
    좋은 연습이 될 것입니다.  <productname>PostgreSQL</productname> 패키지는 굳이
    시스템 관리자의 권한(<systemitem>root</systemitem> ID로 로그인 하는 것)으로
    작업을 해야할 것이 하나도 없는 그저 일반 사용자도 자기 홈 디렉터리에
    충분히 설치하고 사용할 수 있는 패키지입니다.
   </para>

   <para>
    PostgreSQL 패키지를 직접 설치하고자 한다면, 먼저 설치 관련 정보를
    담고 있는 <xref linkend="installation"/>을 차근히 꼼꼼히 읽고 설치를
    하십시오.  또한 서버 셋팅 관련된 적절한 환경 변수들에 대해서 설명한
    다음 장도 같이 읽으면 도움이 될 것입니다.
   </para>

   <para>
    시스템 관리자가 PostgreSQL 사용에 대한 기본적인 작업들을 해 두지
    않았다면, 사용자가 직접 몇가지 작업을 해야 할 것도 있습니다.  가령,
    <productname>PostgreSQL</productname> 서버가 리모트 호스트에서
    가동 중이라면, 그 리모트 호스트명을 지정한 <envar>PGHOST</envar> 환경 변수를
    지정할 필요도 있고, 또한 <envar>PGPORT</envar> 환경변수를 지정해야할
    필요도 있을 것입니다.  만일 이런 작업 없이 그냥 <productname>PostgreSQL</productname>
    프로그램을 실행 시켰을 때, 데이터베이스에 접근을 못한다는 메시지를
    접하게 될 지도 모릅니다. 이때는 먼저 시스템 관리자에게 문의를 해 보거나,
    스스로 설치한 것을 사용하고 있는 중이라면, 설치 및 설정 관련 문서를
    좀 더 꼼꼼히 읽어 보시길 바랍니다.  그런데, 지금 다루고 있는 내용 자체를
    이해하지 못하고 있다면, 다음 섹션을 읽으면서 RDBMS의 서버,
    클라이언트, 데이터베이스 같은 구조적인 개념들을 먼저 숙지 하시길 바랍니다.
   </para>
  </sect1>


  <sect1 id="tutorial-arch">
   <title>기본 구조</title>

   <para>
    진행에 앞서, 기초적인 <productname>PostgreSQL</productname>
    시스템의 구조를 이해해야합니다.
    <productname>PostgreSQL</productname>의 각 부분들이 어떻게 
    상호작용하는가에 대한 이해하는 것, 이것이 이 장의 목표입니다.
   </para>

   <para>
    데이터베이스 전문용어로, <productname>PostgreSQL</productname>은
    클라이언트/서버 모델을 사용하고 있습니다.  하나의 <productname>PostgreSQL</productname>
    세션(작업)은 다음과 같은 프로세스들(프로그램들)의 상호 작동으로 구성됩니다:

    <itemizedlist>
     <listitem>
      <para>
       서버 프로세스, 이것은 데이터베이스 파일을 관리하고, 
       클라이언트 응용 프로그램들이 서버에 연결을 요청할 때, 
       그 요청들을 처리(수락하거나 거부하는 일)하고, 
       클라이언트들이 데이터베이스를 사용할 수 있도록 기반 작업들을 
       준비합니다.  이 프로세스의 이름은 <filename>postgres</filename> 입니다.
       <indexterm><primary>postgres</primary></indexterm>
      </para>
     </listitem>

     <listitem>
      <para>
       클라이언트 프로세스, 이것은 데이터베이스를 사용하려는
       사용자 측 응용 프로그램을 말합니다.  클라이언트 응용 프로그램은
       자연적으로 매우 다양한 형태를 띄고 있습니다. 어떤 것은 텍스트 기반의
       프로그램이기도 하고, 어떤 것은 그래픽 응용 프로그램이기도 하고, 
       어떤 것은 웹서버를 통해서 웹페이지로 보여지기도 하지요.  몇
       클라이언트 프로그램들은 이미 <productname>PostgreSQL</productname> 패키지
       안에 포함되어서 배포되기도합니다.  이것들은 대부분 사용자들이 직접
       개발한 것들입니다.
      </para>
     </listitem>

    </itemizedlist>
   </para>

   <para>
    클라이언트/서버 환경의 프로그램들은 대부분 그렇듯이,
    <productname>PostgreSQL</productname>에서도 클라이언트와 서버가
    서로 다른 호스트일 수 있습니다.  이런 경우에는 서로간의 통신이
    TCP/IP 네트워크 기반 아래서 이루워집니다.  이 부분은 아주 중요한
    부분을 시사하고 있습니다.  클라이언트와 서버가 서로 다를 경우에는
    클라이언트에서 접근하고자 하는 데이터베이스 파일에 대해서
    직접적으로 접근할 수 없음을 의미합니다.  즉, 클라이언트에서 접근 할 수 있는
    파일은 그 클라이언트가 실행되고 있는 호스트의 파일이지
    서버가 가동 중인 호스트의 파일이 아님을 알고 있어야합니다.
   </para>

   <para>
    <productname>PostgreSQL</productname> 서버는 사용자의 다중 접속을 위해서 각 접속에 대해서
    새로운 프로세스를 할당합니다(전문적인 용어로 <quote>forks</quote>를 이용한 하위 프로세스
    생성이라고도 하지요).  이 방법은 클라이언트와 새로 만들어진 서버 프로세스간의
    작업이 있을 때, 서버의 상위 프로세스 격인 <filename>postgres</filename> 프로세스의
    간섭 없이 작업이 이루워짐을 의미합니다. 종합하면, <filename>postgres</filename> 프로세스는
    서버 호스트에서 항상 실행되고 있으면서, 클라이언트의 접속 요청을 처리해서
    새로운 하위 서버 프로세스를 만드는 역활을 합니다.  물론 이 모든 작업들은
    사용자가 관심을 가지고 살펴보지 않는 이상 서버 차원에서 자동으로 이루워지는
    부분입니다.  단지 여기서는 기초적인 개념 설명을 위해서 언급했습니다.
   </para>
  </sect1>


  <sect1 id="tutorial-createdb">
   <title>데이터베이스 만들기</title>

   <indexterm zone="tutorial-createdb">
    <primary>database</primary>
    <secondary>creating</secondary>
   </indexterm>

   <indexterm zone="tutorial-createdb">
    <primary>createdb</primary>
   </indexterm>

   <para>
    데이터베이스 서버를 사용할 수 있는지를 확인하기 위한 테스트로 먼저 하나의
    데이터베이스를 만들어 보겠습니다.  각각의 사용자 단위나, 프로젝트 단위로
    데이터베이스를 분리해서 작업하는 것이 일반적이기에, 하나의
    <productname>PostgreSQL</productname> 서버는 많은 데이터베이스를 관리할 수 있습니다.
   </para>

   <para>
    어쩌면, 이미 시스템 관리자가 일반 사용자들을 위해서 그들이 사용할 수 있는
    데이터베이스를 미리 만들어 두었을 수도 있습니다.  이런 경우라면,
    시스템 관리자가 일반 사용자들에게 그 사실을 알려서 사용할 수 있는
    데이터베이스 이름을 알려주어야겠지요.  이렇게 이미 만들어진 데이터베이스가 있고,
    그것의 이름이 어떤 것인지 알고 있다면, 이 섹션을 읽지 않고 넘어가셔도 좋습니다.
   </para>

   <para>
    예를 들어 <literal>mydb</literal>라는 이름의 새로운 데이터베이스를 만드려면,
    다음과 같은 명령을 사용합니다:
<screen>
<prompt>$</prompt> <userinput>createdb mydb</userinput>
</screen>
    정상적인 결과라면 다음과 같이 나타납니다:
<screen>
CREATE DATABASE
</screen>
    직접 해본 결과가 위 메시지와 같다면, 그냥 이 섹션을 넘어가세요.
   </para>

   <para>
<screen>
createdb: command not found
</screen>
    이런 메시지가 나타났다면, <productname>PostgreSQL</productname> 패키지가 정성적으로
    설치 되지 않은 경우이거나 사용자의 실행 경로 환경변수(PATH)에
    이 PostgreSQL 설치 경로가 포함되어있지 않은 경우입니다.  이것을
    알기 위해서는 일단 다음과 같이 절대경로로 다시 한번 호출해 봅니다:
<screen>
<prompt>$</prompt> <userinput>/usr/local/pgsql/bin/createdb mydb</userinput>
</screen>
    위 명령에서의 절대 경로는 각 시스템마다 다를 수 있습니다.  정확히 알기 위해서는
    시스템 관리자에게 문의해 보든지, 직접 설치했다면, 
    실치 과정을 다시 살펴보든지 하세요.
   </para>

   <para>
    이 명령의 또 다른 결과로 다음과 같은 메시지가 보일 수 있습니다:
<screen>
createdb: postgres 데이터베이스에 연결 할 수 없음: 서버에 연결할 수 없음: 그런 파일이나 디렉터리가 없음
        로컬호스트에 서버가 가동 중인지,
        "/tmp/.s.PGSQL.5432" 유닉스 도메인 소켓 접근이 가능한지 살펴보십시오.
</screen>
    이 경우는 현재 시스템에는 <productname>PostgreSQL</productname> 서버가 가동중이지 않다는 것을
    의미합니다. 다시 한번 설치, 서버 실행 관련 문서를 살펴보거나,
    시스템 관리자에게 자문을 구해보십시오.
   </para>

   <para>
    또 다른 오류 메시지로,
<screen>
createdb: postgres 데이터베이스에 연결 할 수 없음: FATAL:  role "joe" does not exist
</screen>
    이 경우는 사용자 계정의 이름이 데이터베이스 사용자로 등록되어있지 않은
    경우입니다.  (<productname>PostgreSQL</productname>에서는 데이터베이스 사용자로 특별히 
    지정하지 않았을 경우, 기본값으로 시스템 사용자 이름을 사용합니다.)  직접
    데이터베이스를 관리한다면, 사용자 추가에 관계된 문서인 <xref linkend="user-manag"/>을
    읽어 보십시오.  기본적으로 <productname>PostgreSQL</productname> 설치는 <literal>postgres</literal>
    사용자로 진행되며, 이 계정이 데이터베이스 시스템 관리자가 됩니다. 또한
    <productname>PostgreSQL</productname> 사용자와 시스템 사용자 이름 서로 다를 경우, 
    <option>-U</option> 옵션을 사용해서 데이터베이스 사용자 이름을 지정하거나, 
    <envar>PGUSER</envar> 시스템 환경변수로 그 이름을 지정해서 사용할 수 있습니다.
   </para>

   <para>
    한편, 데이터베이스 사용자로 등록은 되어있으나, 데이터베이스를 만들 권한이
    없는 경우는 다음과 같이 나타납니다:
<screen>
createdb: 데이터베이스 만들기 실패: 오류:  데이터베이스를 만들 권한이 없음
</screen>
    모든 사용자가 데이터베이스를 만들 수 있는 것은 아닙니다.  만일
    <productname>PostgreSQL</productname>에서 데이터베이스를 만들고 싶다면,
    데이터베이스 관리자에게 해당 사용자에게 데이터베이스를 만들 수 있는 권한을 
    달라고 요청해야할 것입니다. 자신이 관리자라면, 해당 사용자에게 권한을 
    부여해 주어야합니다. 직접 설치했다면, 그 설치하고, 가동한
    시스템 사용자 계정이 데이터베이스 관리자가 됩니다.

    <footnote>
     <para>
      사용자 이름에 대한 부가 설명을 하면, <productname>PostgreSQL</productname>
      서버의 사용자와 시스템 사용자는 엄격히 다릅니다.  구체적으로 설명하면,
      데이터베이스를 만들거나 사용할 수 있는 사용자가 꼭 시스템 사용자로
      존재해야하는 것도 아니며, 특정 시스템 사용자가 반드시
      <productname>PostgreSQL</productname> 서버의 사용자로 존재해야할
      이유도 없습니다.  단지 <productname>PostgreSQL</productname> 프로그램들은 해당 데이터베이스를
      사용하기 위한 사용자를 지정할 때, 기본적으로 현재 사용중인 시스템
      사용자의 이름을 이용합니다. 만일 사용자가 없다거나, 해당 사용자의 권한이
      부당한 오류 메시지를 만난다면, 그것은 데이터베이스의 사용자에
      대한 이야기입니다.  이 사용자를 바꾸려면, <option>-U</option> 옵션으로 지정할 수 있습니다.
     </para>
    </footnote>
   </para>

   <para>
    물론 데이터베이스 이름은 아무거나 다른 이름을 사용해도
    괜찮습니다.  <productname>PostgreSQL</productname>에서는 만들 수 있는
    데이터베이스 개수 제한이 없습니다.  하지만, 데이터베이스 이름은
    첫글자가 영문 알파벳이어야하며 길이는 최대 63 바이트까지 입니다.
    데이터베이스 이름으로 가장 편하게 사용할 수 있는 이름은
    그 데이터베이스를 만드는 사용자의 이름과 같은 것입니다.  왜냐하면 많은
    프로그램들이 이 사용자와 같은 이름의 데이터베이스 이름을 그 사용자의
    기본 데이터베이스로 가정하기 때문입니다.  이런 식으로 사용자의 이름과
    같은 데이터베이스를 만들려면, 아래와 같은 명령을 이용하면 됩니다. 간편하지요.
<screen>
<prompt>$</prompt> <userinput>createdb</userinput>
</screen>
   </para>

   <para>
    만든 데이터베이스를 더 이상 사용할 일이 없으면,
    데이터베이스를 삭제할 수 있습니다.  예를 들어  <literal>mydb</literal> 데이터베이스를
    만든 사람이 그 데이터베이스를 삭제하려면, 다음과 같은 명령을 사용합니다:
<screen>
<prompt>$</prompt> <userinput>dropdb mydb</userinput>
</screen>
    (dropdb 명령은 그 인자가 없어도 기본으로 삭제할 데이터베이스를
    사용자 이름가 같은 데이터베이스를 삭제하지는 않습니다. 삭제할
    데이터베이스 이름을 반드시 지정해 주어야합니다) 이 작업은 해당 데이터베이스와
    관련된 모든 파일들을 물리적으로 완전히 삭제하는 것입니다.  그러기에
    실행취소 할 수 없습니다.  이 작업을 할 때는 반드시 신중을 기하십시오. 
   </para>

   <para>
    <command>createdb</command>, <command>dropdb</command> 명령의
    자세한 정보는 <xref linkend="app-createdb"/>, <xref linkend="app-dropdb"/>
    설명서를 참조 하십시오.
   </para>
  </sect1>


  <sect1 id="tutorial-accessdb">
   <title>데이터베이스 사용하기</title>

   <indexterm zone="tutorial-accessdb">
    <primary>psql</primary>
   </indexterm>

   <para>
    데이터베이스를 하나 만들었다면, 이제 그 데이터베이스를 다음과 같은 방법으로 사용할 수 있습니다:

    <itemizedlist spacing="compact" mark="bullet">
     <listitem>
      <para>
       <application><firstterm>psql</firstterm></application> 이라는 <productname>PostgreSQL</productname> 대화형
       터미널 프로그램을 실행하기.  이것은 대화형으로 <acronym>SQL</acronym> 명령을 편집/실행 할 수 있습니다. 
      </para>
     </listitem>

     <listitem>
      <para>
       <application>pgAdmin</application>와 같은 그래픽 툴을 이용하거나
       <acronym>ODBC</acronym>나 <acronym>JDBC</acronym>를 이용한 다른 툴들로 데이터베이스를 만들거나
       사용할 수 있습니다.  이 부분에 대해서는 이 자습서에서 다루지 않겠습니다.
      </para>
     </listitem>

     <listitem>
      <para>
       직접 응용 프로그램을 만들어서 사용하기. - PostgreSQL에서는 이런 응용 프로그램을
       만들 수 있는 다양한 프로그래밍 언어를 지원하고 있습니다.  이 부분에 대한 자세한 내용은
       <xref linkend="client-interfaces"/>를 참조 하십시오.
      </para>
     </listitem>
    </itemizedlist>

    여기서는 <command>psql</command> 프로그램을 이용해서 데이터베이스를
    다루는 방법에 대해서 언급하겠습니다.  먼저 앞 섹션에서 이야기한 그 <literal>mydb</literal>
    데이터베이스를 성공적으로 만들었다면, 다음과 같이 입력합니다:
<screen>
<prompt>$</prompt> <userinput>psql mydb</userinput>
</screen>
    데이터베이스 이름이 빠지면 기본적으로 현재 시스템 사용자 이름과 동일한
    이름의 데이터베이스에 접속을 시도합니다.  이 부분에 대해서는 앞 섹션 <command>createdb</command> 명령어 사용법에서 잠깐 언급했었죠.
   </para>

   <para>
    위 명령이 정상적으로 실행되면 다음과 같은 메시지를 볼 수 있습니다:

<screen>
psql (&version;)
도움말을 보려면 "help"를 입력하십시오.

mydb=&gt;
</screen>
    <indexterm><primary>superuser</primary></indexterm>
    한편 맨 마지막 줄이 다음과 같을 수도 있습니다:
<screen>
mydb=#
</screen>
    이 경우는 현재 데이터베이스 사용자가 데이터베이스 관리자임을
    나타냅니다.  <productname>PostgreSQL</productname> 서버를 실행한 
    시스템 사용자 이름과 데이터베이스 사용자 이름이 같은 경우가 대부분
    이렇게 보입니다.  데이터베이스 관리자가 무엇이며 어떤 일을 할 수 있는지는
    이 문서 안에서 별로 중요한 부분이 아니기에 언급하지 않겠습니다. 
   </para>

   <para>
    만일 이 <command>psql</command> 프로그램을 시작하는데 문제가 발생한다면,
    이전 섹션을 다시 읽어보십시오.  <command>psql</command> 프로그램의 실행과
    <command>createdb</command> 프로그램의 실행 요건이 비슷합니다.  오류에
    대한 대처 방안도 비슷하죠.
   </para>

   <para>
    <command>psql</command> 프로그램을 실행했을 때 맨 마지막 줄에 나오는
    프롬프트는 이제부터 SQL 쿼리를 사용할 수 있음을 의미합니다.  이제
    다음과 같은 명령들을 입력해 봅시다:
    <indexterm><primary>version</primary></indexterm>
<screen>
<prompt>mydb=&gt;</prompt> <userinput>SELECT version();</userinput>
                                         version
-------------------------------------------------------------------&zwsp;-----------------------
 PostgreSQL &version; on x86_64-pc-linux-gnu, compiled by gcc (Debian 4.9.2-10) 4.9.2, 64-bit

(1건 있음)

<prompt>mydb=&gt;</prompt> <userinput>SELECT current_date;</userinput>
    date
------------
 2016-01-07
(1건 있음)

<prompt>mydb=&gt;</prompt> <userinput>SELECT 2 + 2;</userinput>
 ?column?
----------
        4
(1건 있음)
</screen>
   </para>

   <para>
    <command>psql</command> 프로그램에서는 SQL 명령 말고도
    내부적으로 사용할 수 있는 몇가지 명령들이 있습니다 - 이 명령들을 psql 내장 명령이라고
    합니다. 이 명령들은 역슬래쉬 (<quote><literal>\</literal></quote>) 문자로 시작합니다.
    예를 들어, <productname>PostgreSQL</productname> <acronym>SQL</acronym> 구문을
    살펴보려면 다음과 같이 입력합니다: 
<screen>
<prompt>mydb=&gt;</prompt> <userinput>\h</userinput>
</screen>
   </para>

   <para>
    <command>psql</command>을 마치려면:
<screen>
<prompt>mydb=&gt;</prompt> <userinput>\q</userinput>
</screen>
    이 명령이 실행되면, <command>psql</command> 프로그램은 종료되고
    다시 시스템 쉘 명령 프롬프트가 나타납니다. (<command>psql</command> 내장 명령들을
    모두 살펴보려면, <literal>\?</literal> 명령을 이용하세요) 한편,
    이 명령들의 완전한 설명과 사용방법을 알고 싶으면, 
        <xref linkend="app-psql"/> 문서에 있는 
        <command>psql</command> 설명서 를 참조하십시오.
    이 자습서에서는 이런 것이 있다는 소개 정도로 마칩니다.
   </para>

  </sect1>
 </chapter>
