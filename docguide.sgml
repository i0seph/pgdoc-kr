<!-- doc/src/sgml/docguide.sgml -->

<appendix id="docguide">
 <title>문서 작업</title>

 <para>
  <productname>PostgreSQL</productname>은 아래와 같은 
  일반적인 네 가지 문서 형식을 지원한다:

  <itemizedlist>
   <listitem>
    <para>
     소스에서 설치하기 전 필요한 정보를 담고 있는 일반 텍스트 문서
    </para>
   </listitem>
   <listitem>
    <para>
     <acronym>HTML</acronym>, 온라인 웹 페이지 형태
    </para>
   </listitem>
   <listitem>
    <para>
     인쇄용 PDF
    </para>
   </listitem>
   <listitem>
    <para>
     유닉스 맨페이지 (쉘 프롬프트 상태에서 man 명령을 이용)
    </para>
   </listitem>
  </itemizedlist>

  또한, <productname>PostgreSQL</productname> 소스 디렉터리 내 
  여러 <filename>README</filename> 파일이 있는데, 
  이것은 해당 디렉터리 내 기능 구현에 관련 된 설명을 다루는 일반 텍스트 파일이다.
 </para>

 <para>
<acronym>HTML</acronym> 문서와  맨 페이지는 표준 배포판에서 기본적으로 제공한다.
PDF 형식의 문서는 따로 다운로드 해서 사용할 수 있다.
 </para>

 <sect1 id="docguide-docbook">
  <title>DocBook</title>
  <para>
   이 문서는 <firstterm>DocBook</firstterm> 조판 언어로 작성되었다.  이것은
   <acronym>XML</acronym>로 만들어졌다.
   여기서는 DocBook이라는 용어와,  <acronym>XML</acronym>
   용어가 함께 사용되지만, 기술적으로는 서로 호환되는 것은 아니다.
  </para>

  <para>
  <productname>DocBook</productname>은 최종 출력이 어떤 모습으로 
  될 것인지를 고민하지 않고, 단지, 기술적인 문서의 내용과 
  그 구조들에 대해서만 작성 할 수 있도록 한다.  문서의 최종 모습은 
  문서 스타일로 정의한다.  DocBook은 현재, <ulink url="https://www.oasis-open.org">
  OASIS 그룹</ulink>에서 관리되고 있다.  <ulink url="https://www.oasis-open.org/docbook/">
  DocBook 공식 사이트</ulink>에서 소개와 문서 작성 방법에 대한 설명을 자세히 하고 있으며,
  O'Reilly 책도 온라인으로 읽을 수 있도록 제공하고 있다.  또한
   <ulink url="http://newbiedoc.sourceforge.net/metadoc/docbook-guide.html">
   NewbieDoc Docbook Guide</ulink> 웹 페이지도 처음 사용자에게는 유용한
   문서다.  <ulink url="https://www.freebsd.org/docproj/docproj.html">
   FreeBSD 문서 프로젝트</ulink>도 DocBook을 사용하고 있으며,  참고 할 만한 여러 스타일
   제안들을 포함하는 여러 도움 될 만한 정보를 제공하고 있다.
  </para>
 </sect1>


 <sect1 id="docguide-toolsets">
  <title>작업 도구들</title>

  <para>
   아래 도구들은 문서 작업에 필요하다.  몇몇은 선택적으로 필요하기도 하다.

   <variablelist>
    <varlistentry>
     <term><ulink url="https://www.oasis-open.org/docbook/">DocBook DTD</ulink></term>
     <listitem>
      <para>
           DocBook 문서 형식 정의 파일이다.  PostgreSQL 문서는 4.5 버전을 
           사용하다.  다른 버전을 사용할 수 없다.  
           DocBook DTD의 <acronym>XML</acronym> 패키지들이 필요하다.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><ulink url="https://github.com/docbook/wiki/wiki/DocBookXslStylesheets">DocBook XSL 스타일시트</ulink></term>
     <listitem>
      <para>
           DocBook 소스를 <acronym>HTML</acronym>과 같은 다른 문서 형태로
           변환 할 때 필요하다. 
      </para>

      <para>
       1.77.0 버전 이상을 필요로 하나, 보다 나은 환경은 사용 가능한 최신 버전을 사용한다.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><ulink url="http://xmlsoft.org/">Libxml2</ulink> for <command>xmllint</command></term>
     <listitem>
      <para>
       This library and the <command>xmllint</command> tool it contains are
       used for processing XML.  Many developers will already
       have <application>Libxml2</application> installed, because it is also
       used when building the PostgreSQL code.  Note, however,
       that <command>xmllint</command> might need to be installed from a
       separate subpackage.
      </para>
     </listitem>
     </varlistentry>

    <varlistentry>
     <term><command>xsltproc</command> 사용하기 위한 <ulink url="http://xmlsoft.org/XSLT/">Libxslt</ulink></term>
     <listitem>
      <para>
       XSLT 스타일시트를 이용한 처리 도구다.  이 프로그램은
       XSLT 스타일시트를 이용해 XML 문서를 여러 다른 양식으로
       변환하는데 사용한다.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><ulink url="https://xmlgraphics.apache.org/fop/">FOP</ulink></term>
     <listitem>
      <para>
       XML 문서를 PDF 문서로 변환하는데 사용한다.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <para>
   아래 내용은 문서 작업을 하면서 겪은 여러 경험들을 소개한 것이다.  여기에는
   여러 패키지들을 설치할 때의 문제와 사용할 때의 문제를 
   설명하고 있다.  이곳에 없는 여러 문제점들이 
   발견되면, 문서 메일링 리스트를 통해 알려주면,  이 문서에 계속 추가할 것이다.
  </para>

  <para>
   DocBook XML, DocBook XSLT 스타일시트를 굳이 설치할 필요는 없다. 이들은
   작업 중에 온라인으로 다운로드 받고, 캐시로 보관해서 사용하기 때문이다.  이
   방법은 사용 환경이 옛 버전만 이용할 수 있는 환경에서 좋은 해결책이다.  이와
   달리 배포판에서 제공하는 옛 패키지를 이용하거나, 
   인터넷 외부 접속 환경이 아닌 경우에는
   <command>xmllint</command>, <command>xsltproc</command> 명령의
   <option>--nonet</option> 옵션을 사용할 수 있다. 사용법은 아래 예제에서
   다룬다.
  </para>

  <sect2>
   <title>페도라, 레드햇 계열 배포판에서 설치</title>

   <para>
    관련 패키지를 설치하기 위해서는 다음 명령을 실행한다:
<programlisting>
yum install docbook-dtds docbook-style-xsl fop libxslt
</programlisting>

   </para>
   <note>
     <para>
       설치할 RPM 패키지 이름은 각 리눅스 배포판 마다 약간씩
       차이가 있다. 참고로, RedHat 계열(Enterprise Linux, CentOS)은
       openjade, opensp, docbook-dtds, docbook-utils,
       docbook-style-dsssl, sgml-common 패키지들이 필요하다.
     </para>
   </note>
     </sect2>

  <sect2>
   <title>FreeBSD에서 설치</title>

   <para>
    To install the required packages with <command>pkg</command>, use:
<programlisting>
pkg install docbook-xml docbook-xsl fop libxslt
</programlisting>
   </para>

   <para>
    When building the documentation from the <filename>doc</filename>
    directory you'll need to use <command>gmake</command>, because the
    makefile provided is not suitable for FreeBSD's <command>make</command>.
   </para>

  </sect2>

  <sect2>
   <title>데비안 패키지</title>

   <para>
    <productname>Debian GNU/Linux</productname>에서는 
        다음 패키지들을 설치하면 된다. 간단하게:
<programlisting>
apt-get install docbook-xml docbook-xsl fop libxml2-utils xsltproc
</programlisting>
   </para>
  </sect2>

  <sect2>
   <title>macOS</title>

   <para>
    On macOS, you can build the HTML and man documentation without installing
    anything extra.  If you want to build PDFs or want to install a local copy
    of DocBook, you can get those from your preferred package manager.
   </para>

   <para>
    If you use MacPorts, the following will get you set up:
<programlisting>
sudo port install docbook-xml-4.5 docbook-xsl fop
</programlisting>
    If you use Homebrew, use this:
<programlisting>
brew install docbook docbook-xsl fop
</programlisting>
   </para>
  </sect2>

  <sect2 id="docguide-toolsets-configure">
   <title><command>configure</command> 명령으로 확인</title>

  <para>
   문서 파일을 만들기 전에 필요한 패키지들이 모두 있는지 
   확인 하는 방법은 <productname>PostgreSQL</productname>
   소스 디렉터리에서 <filename>configure</filename> 명령을 
   실행해 보면 된다.  이 명령을 실행하면, 다음과 
   비슷한 내용이 출력된다.  이를 확인 해 보고, 적당한 작업(
   해당 프로그램이 없다고 나온다면, 그 프로그램이 있는 
   경로를 지정한다든가, 적당한 패키지를 설치한다든가)을 
   한다:
<screen>
checking for xmllint... xmllint
checking for xsltproc... xsltproc
checking for fop... fop
checking for dbtoepub... dbtoepub
</screen>
   <filename>xmllint</filename> 또는 <filename>xsltproc</filename>
   파일이 없다면, 문서 만들기 작업을 할 수 없다.
   <filename>fop</filename> 파일이 없다면, PDF 파일로 만들 수 없다.
   <filename>dbtoepub</filename> 파일은 EPUB 형식 문서파일을 만드는데 사용된다.
  </para>

  <para>
   필요하다면, <filename>configure</filename> 작업에서 이들 프로그램을
   아래와 같이 직접 지정할 수 있다.
<screen>
./configure ... XMLLINT=/opt/local/bin/xmllint ...
</screen>
   또, 인터넷 연결이 불가능한 상태라면, <filename>xmllint</filename>,
   <filename>xsltproc</filename> 지정에서 다음과 같이 옵션을 
   지정할 수도 있다.
<screen>
./configure ... XMLLINT="xmllint --nonet" XSLTPROC="xsltproc --nonet" ...
</screen>
  </para>

  </sect2>
 </sect1>

 <sect1 id="docguide-build">
  <title>문서 만들기</title>

  <para>
   모든 사전 작업이 끝났다면, <filename>doc/src/sgml</filename>
   디렉터리로 이동해서, 아래에서 설명하고 있는 명령 가운데 원하는 작업을
   할 명령을 실행한다. (make는 GNU make를 사용해야한다.)
  </para>

  <sect2>
   <title>HTML</title>

   <para>
    <acronym>HTML</acronym> 양식의 문서를 만드려면 다음과 같이 한다:
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make html</userinput>
</screen>
    이것이 make 작업의 기본이다.  최종 결과물은 
         <filename>html</filename> 하위 디렉터리안에 만들어진다.
   </para>
   <para>
    기본 단순한 스타일 대신에 <ulink
    url="https://www.postgresql.org/docs/current/">postgresql.org</ulink> 사이트에서
    사용하는 스타일을 사용하는 HTML 문서는 다음과 같이 만든다:
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make STYLE=website html</userinput>
</screen>
   </para>

   <para>
    <literal>STYLE=website</literal> 옵션을 사용하면, 만들어지는
    HTML 파일에서 사용하는 스타일시트 파일을
    <ulink
    url="https://www.postgresql.org/docs/current/">postgresql.org</ulink> 홈페이지에
    있는 것을 사용한다. (물론 이 홈페이지에 접속 가능해야한다.)
   </para>

 </sect2>

 <sect2>
  <title>맨페이지</title>

  <para>
   맨페이지는 DocBook XSL 스타일시트를 이용해서, 
   <productname>DocBook</productname> <sgmltag>refentry</sgmltag>
   페이지로 변환해서 만든다.  직접
   맨페이지를 만드려면 다음 명령을 실행한다:
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make man</userinput>
</screen>
  </para>
 </sect2>

  <sect2>
   <title>PDF</title>

   <para>
    PDF 문서는 <productname>FOP</productname> 패키지를 이용해서 만든다. 이 
    때, 다음과 같이 그 출력 크기에 따라 다음 명령을 사용한다:

    <itemizedlist>
     <listitem>
      <para>
       A4 용지:
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make postgres-A4.pdf</userinput>
</screen>
      </para>
     </listitem>

     <listitem>
      <para>
       For U.S. letter format:
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make postgres-US.pdf</userinput>
</screen>
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    PostgreSQL 문서는 정말 방대해서, <productname>FOP</productname> 프로그램을
    실행할 때 몇몇 OS 작업 환경에서 메모리가 부족하다는 메시지를 
    볼 수 있다.  이런 경우는 다음과 같이 자바 힙 메모리 설정을
    <filename>~/.foprc</filename> 파일에 해야한다:
<programlisting>
# FOP binary distribution
FOP_OPTS='-Xmx1500m'
# Debian
JAVA_ARGS='-Xmx1500m'
# Red Hat
ADDITIONAL_FLAGS='-Xmx1500m'
</programlisting>
    There is a minimum amount of memory that is required, and to some extent
    more memory appears to make things a bit faster.  On systems with very
    little memory (less than 1 GB), the build will either be very slow due to
    swapping or will not work at all.
   </para>

   <para>
    Other XSL-FO processors can also be used manually, but the automated build
    process only supports FOP.
   </para>
  </sect2>

  <sect2>
   <title>일반 텍스트 파일 만들기</title>

   <para>
    The installation instructions are also distributed as plain text,
    in case they are needed in a situation where better reading tools
    are not available.  The <filename>INSTALL</filename> file
    corresponds to <xref linkend="installation"/>, with some minor
    changes to account for the different context.  To recreate the
    file, change to the directory <filename>doc/src/sgml</filename>
    and enter <userinput>make INSTALL</userinput>.  Building text output
    requires <productname>Pandoc</productname> version 1.13 or newer as an
    additional build tool.
   </para>

   <para>
    예전에는 릴리즈 노트와 단위 테스트 방법에 대한 문서들도 일반 
    텍스트 파일로 제공했으나, 이제부터는 더 이상 이들 문서들에 대해서는
    일반 텍스트 파일로 제공하지 않는다.
   </para>
  </sect2>

  <sect2>
   <title>문법 검사</title>

   <para>
    원하는 최종 결과물을 만드는데, 꽤 긴 시간이 걸린다.  작업한 파일의
        문법이 틀려서 작업 도중 오류를 내면 다시 작업해야하기에 
        문서 생성 전에 먼저 작업한 파일의 문법이 맞는지 검사를 해 보는 것이 
        작업 시간을 최소화 할 수 있다.  문법 검사 방법은 다음과 같다:
<screen>
<prompt>doc/src/sgml$ </prompt><userinput>make check</userinput>
</screen>
   </para>
  </sect2>
 </sect1>


 <sect1 id="docguide-authoring">
  <title>문서 작성 방법</title>

   <note>
   <para>
   이 부분은 emacs 편집기를 이용한 .sgml 파일 작성 방법에 대한 
   소개를 하고 있다.  필요한 사람이 번역하기
   </para>
   </note>

   <para>
    The documentation sources are most conveniently modified with an editor
    that has a mode for editing XML, and even more so if it has some awareness
    of XML schema languages so that it can know about
    <productname>DocBook</productname> syntax specifically.
   </para>

   <para>
    Note that for historical reasons the documentation source files are named
    with an extension <filename>.sgml</filename> even though they are now XML
    files.  So you might need to adjust your editor configuration to set the
    correct mode.
   </para>

   <sect2>
    <title>Emacs</title>

    <para>
     <productname>nXML Mode</productname>, which ships with
     <productname>Emacs</productname>, is the most common mode for editing
     <acronym>XML</acronym> documents with <productname>Emacs</productname>.
     It will allow you to use <application>Emacs</application> to insert tags
     and check markup consistency, and it supports
     <productname>DocBook</productname> out of the box.  Check the <ulink
     url="https://www.gnu.org/software/emacs/manual/html_mono/nxml-mode.html">
     nXML manual</ulink> for detailed documentation.
    </para>

    <para>
     <filename>src/tools/editors/emacs.samples</filename> contains
     recommended settings for this mode.
    </para>
   </sect2>

 </sect1>


 <sect1 id="docguide-style">
  <title>Style Guide</title>

  <sect2>
   <title>Reference Pages</title>

   <para>
    Reference pages should follow a standard layout.  This allows
    users to find the desired information more quickly, and it also
    encourages writers to document all relevant aspects of a command.
    Consistency is not only desired among
    <productname>PostgreSQL</productname> reference pages, but also
    with reference pages provided by the operating system and other
    packages.  Hence the following guidelines have been developed.
    They are for the most part consistent with similar guidelines
    established by various operating systems.
   </para>

   <para>
    Reference pages that describe executable commands should contain
    the following sections, in this order.  Sections that do not apply
    can be omitted.  Additional top-level sections should only be used
    in special circumstances; often that information belongs in the
    <quote>Usage</quote> section.

    <variablelist>
     <varlistentry>
      <term>Name</term>
      <listitem>
       <para>
        This section is generated automatically.  It contains the
        command name and a half-sentence summary of its functionality.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Synopsis</term>
      <listitem>
       <para>
        This section contains the syntax diagram of the command.  The
        synopsis should normally not list each command-line option;
        that is done below.  Instead, list the major components of the
        command line, such as where input and output files go.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Description</term>
      <listitem>
       <para>
        Several paragraphs explaining what the command does.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Options</term>
      <listitem>
       <para>
        A list describing each command-line option.  If there are a
        lot of options, subsections can be used.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Exit Status</term>
      <listitem>
       <para>
        If the program uses 0 for success and non-zero for failure,
        then you do not need to document it.  If there is a meaning
        behind the different non-zero exit codes, list them here.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Usage</term>
      <listitem>
       <para>
        Describe any sublanguage or run-time interface of the program.
        If the program is not interactive, this section can usually be
        omitted.  Otherwise, this section is a catch-all for
        describing run-time features.  Use subsections if appropriate.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Environment</term>
      <listitem>
       <para>
        List all environment variables that the program might use.
        Try to be complete; even seemingly trivial variables like
        <envar>SHELL</envar> might be of interest to the user.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Files</term>
      <listitem>
       <para>
        List any files that the program might access implicitly.  That
        is, do not list input and output files that were specified on
        the command line, but list configuration files, etc.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Diagnostics</term>
      <listitem>
       <para>
        Explain any unusual output that the program might create.
        Refrain from listing every possible error message.  This is a
        lot of work and has little use in practice.  But if, say, the
        error messages have a standard format that the user can parse,
        this would be the place to explain it.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Notes</term>
      <listitem>
       <para>
        Anything that doesn't fit elsewhere, but in particular bugs,
        implementation flaws, security considerations, compatibility
        issues.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Examples</term>
      <listitem>
       <para>
        Examples
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>History</term>
      <listitem>
       <para>
        If there were some major milestones in the history of the
        program, they might be listed here.  Usually, this section can
        be omitted.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Author</term>
      <listitem>
       <para>
        Author (only used in the contrib section)
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>See Also</term>
      <listitem>
       <para>
        Cross-references, listed in the following order: other
        <productname>PostgreSQL</productname> command reference pages,
        <productname>PostgreSQL</productname> SQL command reference
        pages, citation of <productname>PostgreSQL</productname>
        manuals, other reference pages (e.g., operating system, other
        packages), other documentation.  Items in the same group are
        listed alphabetically.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

   <para>
    Reference pages describing SQL commands should contain the
    following sections: Name, Synopsis, Description, Parameters,
    Outputs, Notes, Examples, Compatibility, History, See
    Also.  The Parameters section is like the Options section, but
    there is more freedom about which clauses of the command can be
    listed.  The Outputs section is only needed if the command returns
    something other than a default command-completion tag.  The Compatibility
    section should explain to what extent
    this command conforms to the SQL standard(s), or to which other
    database system it is compatible.  The See Also section of SQL
    commands should list SQL commands before cross-references to
    programs.
   </para>
  </sect2>

 </sect1>
</appendix>
